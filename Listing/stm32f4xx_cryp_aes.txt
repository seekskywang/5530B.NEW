; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\stm32f4xx_cryp_aes.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\stm32f4xx_cryp_aes.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\stm32f4xx_cryp_aes.crf ..\Libraries\FWlib\src\stm32f4xx_cryp_aes.c]
                          THUMB

                          AREA ||i.CRYP_AES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CBC PROC
;;;293      */
;;;294    ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;295                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;296                             uint8_t *Output)
;;;297    {
000004  b091              SUB      sp,sp,#0x44
000006  469b              MOV      r11,r3
000008  e9dd5a1e          LDRD     r5,r10,[sp,#0x78]
;;;298      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;299      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;300      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;301      __IO uint32_t counter = 0;
00000c  2700              MOVS     r7,#0
;;;302      uint32_t busystatus = 0;
;;;303      ErrorStatus status = SUCCESS;
00000e  f04f0801          MOV      r8,#1
;;;304      uint32_t keyaddr    = (uint32_t)Key;
000012  4614              MOV      r4,r2
;;;305      uint32_t inputaddr  = (uint32_t)Input;
;;;306      uint32_t outputaddr = (uint32_t)Output;
;;;307      uint32_t ivaddr = (uint32_t)InitVectors;
000014  4689              MOV      r9,r1
;;;308      uint32_t i = 0;
;;;309    
;;;310      /* Crypto structures initialisation*/
;;;311      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000016  4668              MOV      r0,sp
000018  9e20              LDR      r6,[sp,#0x80]
00001a  f7fffffe          BL       CRYP_KeyStructInit
;;;312    
;;;313      switch(Keysize)
00001e  f1bb0f80          CMP      r11,#0x80
000022  d01f              BEQ      |L1.100|
000024  f44f7080          MOV      r0,#0x100
000028  f1bb0fc0          CMP      r11,#0xc0
00002c  d027              BEQ      |L1.126|
00002e  4583              CMP      r11,r0
000030  d138              BNE      |L1.164|
;;;314      {
;;;315        case 128:
;;;316        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;317        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;318        keyaddr+=4;
;;;319        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;320        keyaddr+=4;
;;;321        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;322        keyaddr+=4;
;;;323        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;324        break;
;;;325        case 192:
;;;326        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;327        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;328        keyaddr+=4;
;;;329        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;330        keyaddr+=4;
;;;331        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;332        keyaddr+=4;
;;;333        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;334        keyaddr+=4;
;;;335        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;336        keyaddr+=4;
;;;337        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;338        break;
;;;339        case 256:
;;;340        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000032  0040              LSLS     r0,r0,#1
;;;341        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000034  900b              STR      r0,[sp,#0x2c]
000036  6820              LDR      r0,[r4,#0]
000038  ba00              REV      r0,r0
;;;342        keyaddr+=4;
;;;343        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00003a  9000              STR      r0,[sp,#0]
00003c  6860              LDR      r0,[r4,#4]
00003e  ba00              REV      r0,r0
;;;344        keyaddr+=4;
;;;345        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000040  9001              STR      r0,[sp,#4]
000042  68a0              LDR      r0,[r4,#8]
000044  ba00              REV      r0,r0
;;;346        keyaddr+=4;
;;;347        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000046  9002              STR      r0,[sp,#8]
000048  68e0              LDR      r0,[r4,#0xc]
00004a  ba00              REV      r0,r0
;;;348        keyaddr+=4;
;;;349        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004c  9003              STR      r0,[sp,#0xc]
00004e  6920              LDR      r0,[r4,#0x10]
000050  ba00              REV      r0,r0
;;;350        keyaddr+=4;
;;;351        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000052  9004              STR      r0,[sp,#0x10]
000054  6960              LDR      r0,[r4,#0x14]
000056  ba00              REV      r0,r0
;;;352        keyaddr+=4;
;;;353        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000058  9005              STR      r0,[sp,#0x14]
00005a  69a0              LDR      r0,[r4,#0x18]
00005c  ba00              REV      r0,r0
;;;354        keyaddr+=4;
;;;355        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00005e  9006              STR      r0,[sp,#0x18]
;;;356        break;
000060  69e0              LDR      r0,[r4,#0x1c]
000062  e01d              B        |L1.160|
                  |L1.100|
000064  2000              MOVS     r0,#0                 ;316
000066  900b              STR      r0,[sp,#0x2c]         ;317
000068  6820              LDR      r0,[r4,#0]            ;317
00006a  ba00              REV      r0,r0                 ;317
00006c  9004              STR      r0,[sp,#0x10]         ;319
00006e  6860              LDR      r0,[r4,#4]            ;319
000070  ba00              REV      r0,r0                 ;319
000072  9005              STR      r0,[sp,#0x14]         ;321
000074  68a0              LDR      r0,[r4,#8]            ;321
000076  ba00              REV      r0,r0                 ;321
000078  9006              STR      r0,[sp,#0x18]         ;323
00007a  68e0              LDR      r0,[r4,#0xc]          ;324
00007c  e010              B        |L1.160|
                  |L1.126|
00007e  900b              STR      r0,[sp,#0x2c]         ;327
000080  6820              LDR      r0,[r4,#0]            ;327
000082  ba00              REV      r0,r0                 ;327
000084  9002              STR      r0,[sp,#8]            ;329
000086  6860              LDR      r0,[r4,#4]            ;329
000088  ba00              REV      r0,r0                 ;329
00008a  9003              STR      r0,[sp,#0xc]          ;331
00008c  68a0              LDR      r0,[r4,#8]            ;331
00008e  ba00              REV      r0,r0                 ;331
000090  9004              STR      r0,[sp,#0x10]         ;333
000092  68e0              LDR      r0,[r4,#0xc]          ;333
000094  ba00              REV      r0,r0                 ;333
000096  9005              STR      r0,[sp,#0x14]         ;335
000098  6920              LDR      r0,[r4,#0x10]         ;335
00009a  ba00              REV      r0,r0                 ;335
00009c  9006              STR      r0,[sp,#0x18]         ;337
00009e  6960              LDR      r0,[r4,#0x14]         ;337
                  |L1.160|
0000a0  ba00              REV      r0,r0                 ;323
0000a2  9007              STR      r0,[sp,#0x1c]         ;323
                  |L1.164|
;;;357        default:
;;;358        break;
;;;359      }
;;;360    
;;;361      /* CRYP Initialization Vectors */
;;;362      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000a4  f8d90000          LDR      r0,[r9,#0]
0000a8  ba00              REV      r0,r0
;;;363      ivaddr+=4;
;;;364      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0000aa  900c              STR      r0,[sp,#0x30]
0000ac  f8d90004          LDR      r0,[r9,#4]
0000b0  ba00              REV      r0,r0
;;;365      ivaddr+=4;
;;;366      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
0000b2  900d              STR      r0,[sp,#0x34]
0000b4  f8d90008          LDR      r0,[r9,#8]
0000b8  ba00              REV      r0,r0
;;;367      ivaddr+=4;
;;;368      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
0000ba  900e              STR      r0,[sp,#0x38]
0000bc  f8d9000c          LDR      r0,[r9,#0xc]
;;;369    
;;;370    
;;;371      /*------------------ AES Decryption ------------------*/
;;;372      if(Mode == MODE_DECRYPT) /* AES decryption */
;;;373      {
;;;374        /* Flush IN/OUT FIFOs */
;;;375        CRYP_FIFOFlush();
;;;376    
;;;377        /* Crypto Init for Key preparation for decryption process */
;;;378        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;379        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
;;;380        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
;;;381    
;;;382        CRYP_Init(&AES_CRYP_InitStructure);
;;;383    
;;;384        /* Key Initialisation */
;;;385        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;386    
;;;387        /* Enable Crypto processor */
;;;388        CRYP_Cmd(ENABLE);
;;;389    
;;;390        /* wait until the Busy flag is RESET */
;;;391        do
;;;392        {
;;;393          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;394          counter++;
;;;395        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
0000c0  f44f3980          MOV      r9,#0x10000
0000c4  ba00              REV      r0,r0                 ;368
0000c6  900f              STR      r0,[sp,#0x3c]         ;372
0000c8  9811              LDR      r0,[sp,#0x44]         ;372
0000ca  b1c8              CBZ      r0,|L1.256|
;;;396    
;;;397        if (busystatus != RESET)
;;;398       {
;;;399           status = ERROR;
;;;400        }
;;;401        else
;;;402        {
;;;403          /* Crypto Init for decryption process */  
;;;404          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;405        }
;;;406      }
;;;407      /*------------------ AES Encryption ------------------*/
;;;408      else /* AES encryption */
;;;409      {
;;;410        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0000cc  4668              MOV      r0,sp
0000ce  f7fffffe          BL       CRYP_KeyInit
;;;411    
;;;412        /* Crypto Init for Encryption process */
;;;413        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
0000d2  2000              MOVS     r0,#0
0000d4  9008              STR      r0,[sp,#0x20]
                  |L1.214|
;;;414      }
;;;415      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
0000d6  2028              MOVS     r0,#0x28
;;;416      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0000d8  9009              STR      r0,[sp,#0x24]
0000da  2080              MOVS     r0,#0x80
;;;417      CRYP_Init(&AES_CRYP_InitStructure);
0000dc  900a              STR      r0,[sp,#0x28]
0000de  a808              ADD      r0,sp,#0x20
0000e0  f7fffffe          BL       CRYP_Init
;;;418    
;;;419      /* CRYP Initialization Vectors */
;;;420      CRYP_IVInit(&AES_CRYP_IVInitStructure);
0000e4  a80c              ADD      r0,sp,#0x30
0000e6  f7fffffe          BL       CRYP_IVInit
;;;421    
;;;422      /* Flush IN/OUT FIFOs */
;;;423      CRYP_FIFOFlush();
0000ea  f7fffffe          BL       CRYP_FIFOFlush
;;;424    
;;;425      /* Enable Crypto processor */
;;;426      CRYP_Cmd(ENABLE);
0000ee  2001              MOVS     r0,#1
0000f0  f7fffffe          BL       CRYP_Cmd
;;;427    
;;;428      if(CRYP_GetCmdStatus() == DISABLE)
0000f4  f7fffffe          BL       CRYP_GetCmdStatus
0000f8  2800              CMP      r0,#0
0000fa  d056              BEQ      |L1.426|
;;;429      {
;;;430        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;431           the CRYP peripheral (please check the device sales type. */
;;;432        return(ERROR);
;;;433      }
;;;434      
;;;435      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
0000fc  2700              MOVS     r7,#0
0000fe  e04b              B        |L1.408|
                  |L1.256|
000100  f7fffffe          BL       CRYP_FIFOFlush
000104  2404              MOVS     r4,#4                 ;378
000106  2038              MOVS     r0,#0x38              ;379
000108  e9cd4008          STRD     r4,r0,[sp,#0x20]      ;379
00010c  2000              MOVS     r0,#0                 ;380
00010e  900a              STR      r0,[sp,#0x28]         ;382
000110  a808              ADD      r0,sp,#0x20           ;382
000112  f7fffffe          BL       CRYP_Init
000116  4668              MOV      r0,sp                 ;385
000118  f7fffffe          BL       CRYP_KeyInit
00011c  2001              MOVS     r0,#1                 ;388
00011e  f7fffffe          BL       CRYP_Cmd
                  |L1.290|
000122  2010              MOVS     r0,#0x10              ;393
000124  f7fffffe          BL       CRYP_GetFlagStatus
000128  1c7f              ADDS     r7,r7,#1              ;394
00012a  454f              CMP      r7,r9                 ;395
00012c  d002              BEQ      |L1.308|
00012e  2800              CMP      r0,#0                 ;395
000130  d1f7              BNE      |L1.290|
000132  e003              B        |L1.316|
                  |L1.308|
000134  b110              CBZ      r0,|L1.316|
000136  f04f0800          MOV      r8,#0                 ;399
00013a  e7cc              B        |L1.214|
                  |L1.316|
00013c  9408              STR      r4,[sp,#0x20]         ;404
00013e  e7ca              B        |L1.214|
                  |L1.320|
;;;436      {
;;;437    
;;;438        /* Write the Input block in the IN FIFO */
;;;439        CRYP_DataIn(*(uint32_t*)(inputaddr));
000140  6828              LDR      r0,[r5,#0]
000142  f7fffffe          BL       CRYP_DataIn
;;;440        inputaddr+=4;
;;;441        CRYP_DataIn(*(uint32_t*)(inputaddr));
000146  f8550f04          LDR      r0,[r5,#4]!
00014a  f7fffffe          BL       CRYP_DataIn
;;;442        inputaddr+=4;
;;;443        CRYP_DataIn(*(uint32_t*)(inputaddr));
00014e  f8550f04          LDR      r0,[r5,#4]!
000152  f7fffffe          BL       CRYP_DataIn
;;;444        inputaddr+=4;
;;;445        CRYP_DataIn(*(uint32_t*)(inputaddr));
000156  f8550f04          LDR      r0,[r5,#4]!
00015a  f7fffffe          BL       CRYP_DataIn
;;;446        inputaddr+=4;
00015e  1d2d              ADDS     r5,r5,#4
;;;447        /* Wait until the complete message has been processed */
;;;448        counter = 0;
000160  2400              MOVS     r4,#0
                  |L1.354|
;;;449        do
;;;450        {
;;;451          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
000162  2010              MOVS     r0,#0x10
000164  f7fffffe          BL       CRYP_GetFlagStatus
;;;452          counter++;
000168  1c64              ADDS     r4,r4,#1
;;;453        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
00016a  454c              CMP      r4,r9
00016c  d002              BEQ      |L1.372|
00016e  2800              CMP      r0,#0
000170  d1f7              BNE      |L1.354|
000172  e003              B        |L1.380|
                  |L1.372|
;;;454    
;;;455        if (busystatus != RESET)
000174  b110              CBZ      r0,|L1.380|
;;;456       {
;;;457           status = ERROR;
000176  f04f0800          MOV      r8,#0
00017a  e00c              B        |L1.406|
                  |L1.380|
;;;458        }
;;;459        else
;;;460        {
;;;461    
;;;462          /* Read the Output block from the Output FIFO */
;;;463          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00017c  f7fffffe          BL       CRYP_DataOut
;;;464          outputaddr+=4;
;;;465          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000180  6030              STR      r0,[r6,#0]
000182  f7fffffe          BL       CRYP_DataOut
;;;466          outputaddr+=4;
;;;467          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000186  6070              STR      r0,[r6,#4]
000188  f7fffffe          BL       CRYP_DataOut
;;;468          outputaddr+=4;
;;;469          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00018c  60b0              STR      r0,[r6,#8]
00018e  f7fffffe          BL       CRYP_DataOut
000192  60f0              STR      r0,[r6,#0xc]
000194  3610              ADDS     r6,r6,#0x10
                  |L1.406|
000196  3710              ADDS     r7,r7,#0x10           ;435
                  |L1.408|
000198  4557              CMP      r7,r10                ;435
00019a  d202              BCS      |L1.418|
00019c  f1b80f00          CMP      r8,#0                 ;435
0001a0  d1ce              BNE      |L1.320|
                  |L1.418|
;;;470          outputaddr+=4;
;;;471        }
;;;472      }
;;;473    
;;;474      /* Disable Crypto */
;;;475      CRYP_Cmd(DISABLE);
0001a2  2000              MOVS     r0,#0
0001a4  f7fffffe          BL       CRYP_Cmd
;;;476    
;;;477      return status;
0001a8  4640              MOV      r0,r8
                  |L1.426|
;;;478    }
0001aa  b015              ADD      sp,sp,#0x54
0001ac  e8bd8ff0          POP      {r4-r11,pc}
;;;479    
                          ENDP


                          AREA ||i.CRYP_AES_CCM||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CCM PROC
;;;1134     */
;;;1135   ErrorStatus CRYP_AES_CCM(uint8_t Mode, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1136                            uint8_t* Nonce, uint32_t NonceSize,
;;;1137                            uint8_t *Key, uint16_t Keysize,
;;;1138                            uint8_t *Input, uint32_t ILength,
;;;1139                            uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
;;;1140                            uint8_t *Output,
;;;1141                            uint8_t *AuthTAG, uint32_t TAGSize)
;;;1142   {
000004  b09f              SUB      sp,sp,#0x7c
000006  ad2d              ADD      r5,sp,#0xb4
000008  e9dd0731          LDRD     r0,r7,[sp,#0xc4]
00000c  e8b50c40          LDM      r5!,{r6,r10,r11}
;;;1143     CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;1144     CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;1145     CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;1146     __IO uint32_t counter = 0;
;;;1147     uint32_t busystatus = 0;
;;;1148     ErrorStatus status = SUCCESS;
;;;1149     uint32_t keyaddr    = (uint32_t)Key;
000010  f8dd90c0          LDR      r9,[sp,#0xc0]
;;;1150     uint32_t inputaddr  = (uint32_t)Input;
;;;1151     uint32_t outputaddr = (uint32_t)Output;
;;;1152     uint32_t headeraddr = (uint32_t)Header;
;;;1153     uint32_t tagaddr = (uint32_t)AuthTAG;
;;;1154     uint32_t headersize = HLength;
000014  931c              STR      r3,[sp,#0x70]
;;;1155     uint32_t loopcounter = 0;
000016  2300              MOVS     r3,#0
000018  9c33              LDR      r4,[sp,#0xcc]         ;1149
00001a  941e              STR      r4,[sp,#0x78]         ;1154
;;;1156     uint32_t bufferidx = 0;
;;;1157     uint8_t blockb0[16] = {0};/* Block B0 */
00001c  9301              STR      r3,[sp,#4]
00001e  9302              STR      r3,[sp,#8]
;;;1158     uint8_t ctr[16] = {0}; /* Counter */
000020  9304              STR      r3,[sp,#0x10]
;;;1159     uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
;;;1160     uint32_t ctraddr = (uint32_t)ctr;
000022  f10d0c10          ADD      r12,sp,#0x10
000026  464c              MOV      r4,r9                 ;1154
000028  9300              STR      r3,[sp,#0]            ;1157
00002a  9303              STR      r3,[sp,#0xc]          ;1158
00002c  9306              STR      r3,[sp,#0x18]         ;1158
00002e  9307              STR      r3,[sp,#0x1c]         ;1159
;;;1161     uint32_t b0addr = (uint32_t)blockb0;
;;;1162     
;;;1163     /************************ Formatting the header block ***********************/
;;;1164     if(headersize != 0)
000030  f8cdc074          STR      r12,[sp,#0x74]
000034  f04f0801          MOV      r8,#1                 ;1148
000038  465d              MOV      r5,r11                ;1152
00003a  469e              MOV      lr,r3                 ;1157
00003c  9305              STR      r3,[sp,#0x14]         ;1158
00003e  9310              STR      r3,[sp,#0x40]         ;1159
000040  9311              STR      r3,[sp,#0x44]         ;1159
000042  9312              STR      r3,[sp,#0x48]         ;1159
000044  9313              STR      r3,[sp,#0x4c]
000046  ea5f0904          MOVS     r9,r4
00004a  d037              BEQ      |L2.188|
;;;1165     {
;;;1166       /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
;;;1167       if(headersize < 65280)
;;;1168       {
;;;1169         HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
;;;1170         HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
00004c  f00905ff          AND      r5,r9,#0xff
000050  f5b44f7f          CMP      r4,#0xff00            ;1167
000054  d207              BCS      |L2.102|
000056  ea4f2c14          LSR      r12,r4,#8             ;1169
00005a  f880c000          STRB     r12,[r0,#0]           ;1169
00005e  7045              STRB     r5,[r0,#1]
000060  2502              MOVS     r5,#2
;;;1171         headersize += 2;
000062  1ca4              ADDS     r4,r4,#2
000064  e017              B        |L2.150|
                  |L2.102|
;;;1172       }
;;;1173       else
;;;1174       {
;;;1175         /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
;;;1176         HBuffer[bufferidx++] = 0xFF;
000066  f04f0cff          MOV      r12,#0xff
00006a  f880c000          STRB     r12,[r0,#0]
;;;1177         HBuffer[bufferidx++] = 0xFE;
00006e  f04f0cfe          MOV      r12,#0xfe
000072  f880c001          STRB     r12,[r0,#1]
;;;1178         HBuffer[bufferidx++] = headersize & 0xff000000;
000076  f880e002          STRB     lr,[r0,#2]
;;;1179         HBuffer[bufferidx++] = headersize & 0x00ff0000;
00007a  f880e003          STRB     lr,[r0,#3]
;;;1180         HBuffer[bufferidx++] = headersize & 0x0000ff00;
00007e  f880e004          STRB     lr,[r0,#4]
;;;1181         HBuffer[bufferidx++] = headersize & 0x000000ff;
000082  7145              STRB     r5,[r0,#5]
000084  2506              MOVS     r5,#6
;;;1182         headersize += 6;
000086  1da4              ADDS     r4,r4,#6
000088  e005              B        |L2.150|
                  |L2.138|
;;;1183       }
;;;1184       /* Copy the header buffer in internal buffer "HBuffer" */
;;;1185       for(loopcounter = 0; loopcounter < headersize; loopcounter++)
;;;1186       {
;;;1187         HBuffer[bufferidx++] = Header[loopcounter];
00008a  f81bc003          LDRB     r12,[r11,r3]
00008e  f800c005          STRB     r12,[r0,r5]
000092  1c6d              ADDS     r5,r5,#1
000094  1c5b              ADDS     r3,r3,#1              ;1185
                  |L2.150|
000096  42a3              CMP      r3,r4                 ;1185
000098  d3f7              BCC      |L2.138|
;;;1188       }
;;;1189       /* Check if the header size is modulo 16 */
;;;1190       if ((headersize % 16) != 0)
00009a  0723              LSLS     r3,r4,#28
00009c  d009              BEQ      |L2.178|
;;;1191       {
;;;1192         /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
;;;1193         for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
00009e  0923              LSRS     r3,r4,#4
0000a0  011d              LSLS     r5,r3,#4
0000a2  3510              ADDS     r5,r5,#0x10
0000a4  4673              MOV      r3,lr                 ;1146
0000a6  e001              B        |L2.172|
                  |L2.168|
;;;1194         {
;;;1195           HBuffer[loopcounter] = 0;
0000a8  5503              STRB     r3,[r0,r4]
0000aa  1c64              ADDS     r4,r4,#1              ;1193
                  |L2.172|
0000ac  42a5              CMP      r5,r4                 ;1193
0000ae  d2fb              BCS      |L2.168|
0000b0  462c              MOV      r4,r5                 ;1193
                  |L2.178|
;;;1196         }
;;;1197         /* Set the header size to modulo 16 */
;;;1198         headersize = ((headersize/16) + 1) * 16;
;;;1199       }
;;;1200       /* set the pointer headeraddr to HBuffer */
;;;1201       headeraddr = (uint32_t)HBuffer;
0000b2  4605              MOV      r5,r0
;;;1202     }
;;;1203     /************************* Formatting the block B0 **************************/
;;;1204     if(headersize != 0)
0000b4  b114              CBZ      r4,|L2.188|
;;;1205     {
;;;1206       blockb0[0] = 0x40;
0000b6  2340              MOVS     r3,#0x40
0000b8  f88d3000          STRB     r3,[sp,#0]
                  |L2.188|
;;;1207     }
;;;1208     /* Flags byte */
;;;1209     blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
0000bc  9834              LDR      r0,[sp,#0xd0]
0000be  b2c0              UXTB     r0,r0
0000c0  1e83              SUBS     r3,r0,#2
0000c2  eb0373d3          ADD      r3,r3,r3,LSR #31
0000c6  f3c30042          UBFX     r0,r3,#1,#3
0000ca  f1c2030e          RSB      r3,r2,#0xe
0000ce  f36003df          BFI      r3,r0,#3,#29
0000d2  f89d0000          LDRB     r0,[sp,#0]
0000d6  4303              ORRS     r3,r3,r0
0000d8  f88d3000          STRB     r3,[sp,#0]
;;;1210     
;;;1211     for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
0000dc  2000              MOVS     r0,#0
0000de  466b              MOV      r3,sp                 ;1157
0000e0  e006              B        |L2.240|
                  |L2.226|
;;;1212     {
;;;1213       blockb0[loopcounter+1] = Nonce[loopcounter];
0000e2  f811c000          LDRB     r12,[r1,r0]
0000e6  eb030900          ADD      r9,r3,r0
0000ea  1c40              ADDS     r0,r0,#1              ;1211
0000ec  f889c001          STRB     r12,[r9,#1]
                  |L2.240|
0000f0  4290              CMP      r0,r2                 ;1211
0000f2  d3f6              BCC      |L2.226|
0000f4  46f1              MOV      r9,lr                 ;1146
                  |L2.246|
;;;1214     }
;;;1215     for ( ; loopcounter < 13; loopcounter++)
0000f6  280d              CMP      r0,#0xd
0000f8  d205              BCS      |L2.262|
;;;1216     {
;;;1217       blockb0[loopcounter+1] = 0;
0000fa  eb030c00          ADD      r12,r3,r0
0000fe  1c40              ADDS     r0,r0,#1              ;1215
000100  f88c9001          STRB     r9,[r12,#1]
000104  e7f7              B        |L2.246|
                  |L2.262|
;;;1218     }
;;;1219     
;;;1220     blockb0[14] = ((ILength >> 8) & 0xFF);
000106  ea4f211a          LSR      r1,r10,#8
00010a  f88d100e          STRB     r1,[sp,#0xe]
;;;1221     blockb0[15] = (ILength & 0xFF);
;;;1222     
;;;1223     /************************* Formatting the initial counter *******************/
;;;1224     /* Byte 0:
;;;1225        Bits 7 and 6 are reserved and shall be set to 0
;;;1226        Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
;;;1227        are distinct from B0
;;;1228        Bits 0, 1, and 2 contain the same encoding of q as in B0
;;;1229     */
;;;1230     ctr[0] = blockb0[0] & 0x07;
00010e  f89d1000          LDRB     r1,[sp,#0]
;;;1231     /* byte 1 to NonceSize is the IV (Nonce) */
;;;1232     for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
000112  2001              MOVS     r0,#1
000114  f0010107          AND      r1,r1,#7              ;1230
000118  f88d1010          STRB     r1,[sp,#0x10]         ;1230
00011c  f88da00f          STRB     r10,[sp,#0xf]         ;1221
000120  a904              ADD      r1,sp,#0x10           ;1158
000122  1c52              ADDS     r2,r2,#1
000124  e004              B        |L2.304|
                  |L2.294|
;;;1233     {
;;;1234       ctr[loopcounter] = blockb0[loopcounter];
000126  f813c000          LDRB     r12,[r3,r0]
00012a  f801c000          STRB     r12,[r1,r0]
00012e  1c40              ADDS     r0,r0,#1              ;1232
                  |L2.304|
000130  4290              CMP      r0,r2                 ;1232
000132  d3f8              BCC      |L2.294|
;;;1235     }
;;;1236     /* Set the LSB to 1 */
;;;1237     ctr[15] |= 0x01;
000134  f89d101f          LDRB     r1,[sp,#0x1f]
;;;1238     
;;;1239     /* Crypto structures initialisation*/
;;;1240     CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000138  a808              ADD      r0,sp,#0x20
00013a  f0410101          ORR      r1,r1,#1              ;1237
00013e  f88d101f          STRB     r1,[sp,#0x1f]         ;1237
000142  f7fffffe          BL       CRYP_KeyStructInit
;;;1241     
;;;1242     switch(Keysize)
000146  982c              LDR      r0,[sp,#0xb0]
000148  2880              CMP      r0,#0x80
00014a  d020              BEQ      |L2.398|
00014c  f44f7180          MOV      r1,#0x100
000150  28c0              CMP      r0,#0xc0
000152  d02b              BEQ      |L2.428|
000154  4288              CMP      r0,r1
000156  d13e              BNE      |L2.470|
;;;1243     {
;;;1244       case 128:
;;;1245       AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;1246       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;1247       keyaddr+=4;
;;;1248       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;1249       keyaddr+=4;
;;;1250       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;1251       keyaddr+=4;
;;;1252       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;1253       break;
;;;1254       case 192:
;;;1255       AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;1256       AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;1257       keyaddr+=4;
;;;1258       AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;1259       keyaddr+=4;
;;;1260       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;1261       keyaddr+=4;
;;;1262       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;1263       keyaddr+=4;
;;;1264       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;1265       keyaddr+=4;
;;;1266       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;1267       break;
;;;1268       case 256:
;;;1269       AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000158  0041              LSLS     r1,r0,#1
;;;1270       AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
00015a  9117              STR      r1,[sp,#0x5c]
00015c  991c              LDR      r1,[sp,#0x70]
00015e  6809              LDR      r1,[r1,#0]
000160  ba09              REV      r1,r1
;;;1271       keyaddr+=4;
000162  9108              STR      r1,[sp,#0x20]
;;;1272       AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
000164  991c              LDR      r1,[sp,#0x70]
000166  684a              LDR      r2,[r1,#4]
000168  ba12              REV      r2,r2
;;;1273       keyaddr+=4;
;;;1274       AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00016a  9209              STR      r2,[sp,#0x24]
00016c  688a              LDR      r2,[r1,#8]
00016e  ba12              REV      r2,r2
;;;1275       keyaddr+=4;
;;;1276       AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000170  920a              STR      r2,[sp,#0x28]
000172  68ca              LDR      r2,[r1,#0xc]
000174  ba12              REV      r2,r2
;;;1277       keyaddr+=4;
;;;1278       AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000176  920b              STR      r2,[sp,#0x2c]
000178  690a              LDR      r2,[r1,#0x10]
00017a  ba12              REV      r2,r2
;;;1279       keyaddr+=4;
;;;1280       AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00017c  920c              STR      r2,[sp,#0x30]
00017e  694a              LDR      r2,[r1,#0x14]
000180  ba12              REV      r2,r2
;;;1281       keyaddr+=4;
;;;1282       AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000182  920d              STR      r2,[sp,#0x34]
000184  698a              LDR      r2,[r1,#0x18]
000186  ba12              REV      r2,r2
;;;1283       keyaddr+=4;
;;;1284       AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000188  920e              STR      r2,[sp,#0x38]
00018a  69c9              LDR      r1,[r1,#0x1c]
;;;1285       break;
00018c  e021              B        |L2.466|
                  |L2.398|
00018e  f8cd905c          STR      r9,[sp,#0x5c]         ;1246
000192  991c              LDR      r1,[sp,#0x70]         ;1246
000194  6809              LDR      r1,[r1,#0]            ;1246
000196  ba09              REV      r1,r1                 ;1246
000198  910c              STR      r1,[sp,#0x30]         ;1247
00019a  991c              LDR      r1,[sp,#0x70]         ;1248
00019c  684a              LDR      r2,[r1,#4]            ;1248
00019e  ba12              REV      r2,r2                 ;1248
0001a0  920d              STR      r2,[sp,#0x34]         ;1250
0001a2  688a              LDR      r2,[r1,#8]            ;1250
0001a4  ba12              REV      r2,r2                 ;1250
0001a6  920e              STR      r2,[sp,#0x38]         ;1252
0001a8  68c9              LDR      r1,[r1,#0xc]          ;1252
0001aa  e012              B        |L2.466|
                  |L2.428|
0001ac  9117              STR      r1,[sp,#0x5c]         ;1256
0001ae  991c              LDR      r1,[sp,#0x70]         ;1256
0001b0  6809              LDR      r1,[r1,#0]            ;1256
0001b2  ba09              REV      r1,r1                 ;1256
0001b4  910a              STR      r1,[sp,#0x28]         ;1257
0001b6  991c              LDR      r1,[sp,#0x70]         ;1258
0001b8  684a              LDR      r2,[r1,#4]            ;1258
0001ba  ba12              REV      r2,r2                 ;1258
0001bc  920b              STR      r2,[sp,#0x2c]         ;1260
0001be  688a              LDR      r2,[r1,#8]            ;1260
0001c0  ba12              REV      r2,r2                 ;1260
0001c2  920c              STR      r2,[sp,#0x30]         ;1262
0001c4  68ca              LDR      r2,[r1,#0xc]          ;1262
0001c6  ba12              REV      r2,r2                 ;1262
0001c8  920d              STR      r2,[sp,#0x34]         ;1264
0001ca  690a              LDR      r2,[r1,#0x10]         ;1264
0001cc  ba12              REV      r2,r2                 ;1264
0001ce  920e              STR      r2,[sp,#0x38]         ;1266
0001d0  6949              LDR      r1,[r1,#0x14]         ;1266
                  |L2.466|
0001d2  ba09              REV      r1,r1                 ;1252
0001d4  910f              STR      r1,[sp,#0x3c]         ;1252
                  |L2.470|
;;;1286       default:
;;;1287       break;
;;;1288     }
;;;1289     
;;;1290     /* CRYP Initialization Vectors */
;;;1291     AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
0001d6  991d              LDR      r1,[sp,#0x74]
;;;1292     ctraddr+=4;
;;;1293     AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
;;;1294     ctraddr+=4;
;;;1295     AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
;;;1296     ctraddr+=4;
;;;1297     AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
;;;1298     
;;;1299     /*------------------ AES Encryption ------------------*/
;;;1300     if(Mode == MODE_ENCRYPT) /* AES encryption */
;;;1301     {
;;;1302       /* Flush IN/OUT FIFOs */
;;;1303       CRYP_FIFOFlush();
;;;1304       
;;;1305       /* Key Initialisation */
;;;1306       CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;1307       
;;;1308       /* CRYP Initialization Vectors */
;;;1309       CRYP_IVInit(&AES_CRYP_IVInitStructure);
;;;1310       
;;;1311       /* Crypto Init for Key preparation for decryption process */
;;;1312       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;1313       AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
;;;1314       AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
;;;1315       CRYP_Init(&AES_CRYP_InitStructure);
;;;1316       
;;;1317       /***************************** Init phase *********************************/
;;;1318       /* Select init phase */
;;;1319       CRYP_PhaseConfig(CRYP_Phase_Init);
;;;1320       
;;;1321       b0addr = (uint32_t)blockb0;
;;;1322       /* Write the blockb0 block in the IN FIFO */
;;;1323       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1324       b0addr+=4;
;;;1325       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1326       b0addr+=4;
;;;1327       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1328       b0addr+=4;
;;;1329       CRYP_DataIn((*(uint32_t*)(b0addr)));
;;;1330       
;;;1331       /* Enable Crypto processor */
;;;1332       CRYP_Cmd(ENABLE);
;;;1333       
;;;1334       /* Wait for CRYPEN bit to be 0 */
;;;1335       while(CRYP_GetCmdStatus() == ENABLE)
;;;1336       {
;;;1337       }
;;;1338       /***************************** header phase *******************************/
;;;1339       if(headersize != 0)
;;;1340       {
;;;1341         /* Select header phase */
;;;1342         CRYP_PhaseConfig(CRYP_Phase_Header);
0001d8  f44f3b80          MOV      r11,#0x10000
0001dc  6809              LDR      r1,[r1,#0]            ;1291
0001de  ba09              REV      r1,r1                 ;1291
0001e0  9118              STR      r1,[sp,#0x60]         ;1292
0001e2  991d              LDR      r1,[sp,#0x74]         ;1293
0001e4  684a              LDR      r2,[r1,#4]            ;1293
0001e6  ba12              REV      r2,r2                 ;1293
0001e8  9219              STR      r2,[sp,#0x64]         ;1295
0001ea  688a              LDR      r2,[r1,#8]            ;1295
0001ec  ba12              REV      r2,r2                 ;1295
0001ee  921a              STR      r2,[sp,#0x68]         ;1297
0001f0  68c9              LDR      r1,[r1,#0xc]          ;1297
0001f2  981f              LDR      r0,[sp,#0x7c]         ;1300
0001f4  ba09              REV      r1,r1                 ;1297
0001f6  911b              STR      r1,[sp,#0x6c]         ;1300
0001f8  2801              CMP      r0,#1                 ;1300
0001fa  d036              BEQ      |L2.618|
;;;1343         
;;;1344         /* Enable Crypto processor */
;;;1345         CRYP_Cmd(ENABLE);
;;;1346         
;;;1347         if(CRYP_GetCmdStatus() == DISABLE)
;;;1348         {
;;;1349            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1350               the CRYP peripheral (please check the device sales type. */
;;;1351            return(ERROR);
;;;1352         }
;;;1353         
;;;1354         for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
;;;1355         {
;;;1356           /* Wait until the IFEM flag is reset */
;;;1357           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1358           {
;;;1359           }
;;;1360           
;;;1361           /* Write the Input block in the IN FIFO */
;;;1362           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1363           headeraddr+=4;
;;;1364           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1365           headeraddr+=4;
;;;1366           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1367           headeraddr+=4;
;;;1368           CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;1369           headeraddr+=4;
;;;1370         }
;;;1371         
;;;1372         /* Wait until the complete message has been processed */
;;;1373         counter = 0;
;;;1374         do
;;;1375         {
;;;1376           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1377           counter++;
;;;1378         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1379   
;;;1380         if (busystatus != RESET)
;;;1381         {
;;;1382           status = ERROR;
;;;1383         }
;;;1384       }
;;;1385       
;;;1386       /**************************** payload phase *******************************/
;;;1387       if(ILength != 0)
;;;1388       {
;;;1389         /* Select payload phase */
;;;1390         CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;1391         
;;;1392         /* Enable Crypto processor */
;;;1393         CRYP_Cmd(ENABLE);
;;;1394         
;;;1395         if(CRYP_GetCmdStatus() == DISABLE)
;;;1396         {
;;;1397           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1398              the CRYP peripheral (please check the device sales type. */
;;;1399           return(ERROR);
;;;1400         }
;;;1401         
;;;1402         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;1403         {
;;;1404           /* Wait until the IFEM flag is reset */
;;;1405           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;1406           {
;;;1407           }
;;;1408           
;;;1409           /* Write the Input block in the IN FIFO */
;;;1410           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1411           inputaddr+=4;
;;;1412           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1413           inputaddr+=4;
;;;1414           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1415           inputaddr+=4;
;;;1416           CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;1417           inputaddr+=4;
;;;1418           
;;;1419           /* Wait until the complete message has been processed */
;;;1420           counter = 0;
;;;1421           do
;;;1422           {
;;;1423             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;1424             counter++;
;;;1425           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;1426   
;;;1427           if (busystatus != RESET)
;;;1428           {
;;;1429             status = ERROR;
;;;1430           }
;;;1431           else
;;;1432           {
;;;1433             /* Wait until the OFNE flag is reset */
;;;1434             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1435             {
;;;1436             }
;;;1437             
;;;1438             /* Read the Output block from the Output FIFO */
;;;1439             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1440             outputaddr+=4;
;;;1441             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1442             outputaddr+=4;
;;;1443             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1444             outputaddr+=4;
;;;1445             *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;1446             outputaddr+=4;
;;;1447           }
;;;1448         }
;;;1449       }
;;;1450       
;;;1451       /***************************** final phase ********************************/
;;;1452       /* Select final phase */
;;;1453       CRYP_PhaseConfig(CRYP_Phase_Final);
;;;1454       
;;;1455       /* Enable Crypto processor */
;;;1456       CRYP_Cmd(ENABLE);
;;;1457       
;;;1458       if(CRYP_GetCmdStatus() == DISABLE)
;;;1459       {
;;;1460         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1461            the CRYP peripheral (please check the device sales type. */
;;;1462         return(ERROR);
;;;1463       }
;;;1464       
;;;1465       ctraddr = (uint32_t)ctr;
;;;1466       /* Write the counter block in the IN FIFO */
;;;1467       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1468       ctraddr+=4;
;;;1469       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1470       ctraddr+=4;
;;;1471       CRYP_DataIn(*(uint32_t*)(ctraddr));
;;;1472       ctraddr+=4;
;;;1473       /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
;;;1474       CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
;;;1475       
;;;1476       /* Wait until the OFNE flag is reset */
;;;1477       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;1478       {
;;;1479       }
;;;1480       
;;;1481       /* Read the Auth TAG in the IN FIFO */
;;;1482       temptag[0] = CRYP_DataOut();
;;;1483       temptag[1] = CRYP_DataOut();
;;;1484       temptag[2] = CRYP_DataOut();
;;;1485       temptag[3] = CRYP_DataOut();
;;;1486     }
;;;1487     /*------------------ AES Decryption ------------------*/
;;;1488     else /* AES decryption */
;;;1489     {
;;;1490       /* Flush IN/OUT FIFOs */
;;;1491       CRYP_FIFOFlush();
0001fc  f7fffffe          BL       CRYP_FIFOFlush
;;;1492       
;;;1493       /* Key Initialisation */
;;;1494       CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000200  a808              ADD      r0,sp,#0x20
000202  f7fffffe          BL       CRYP_KeyInit
;;;1495       
;;;1496       /* CRYP Initialization Vectors */
;;;1497       CRYP_IVInit(&AES_CRYP_IVInitStructure);
000206  a818              ADD      r0,sp,#0x60
000208  f7fffffe          BL       CRYP_IVInit
;;;1498       
;;;1499       /* Crypto Init for Key preparation for decryption process */
;;;1500       AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00020c  2104              MOVS     r1,#4
;;;1501       AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
00020e  9114              STR      r1,[sp,#0x50]
000210  f04f1108          MOV      r1,#0x80008
;;;1502       AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000214  9115              STR      r1,[sp,#0x54]
000216  2180              MOVS     r1,#0x80
;;;1503       CRYP_Init(&AES_CRYP_InitStructure);
000218  a814              ADD      r0,sp,#0x50
00021a  9116              STR      r1,[sp,#0x58]
00021c  f7fffffe          BL       CRYP_Init
;;;1504       
;;;1505       /***************************** Init phase *********************************/
;;;1506       /* Select init phase */
;;;1507       CRYP_PhaseConfig(CRYP_Phase_Init);
000220  2000              MOVS     r0,#0
000222  f7fffffe          BL       CRYP_PhaseConfig
;;;1508       
;;;1509       b0addr = (uint32_t)blockb0;
;;;1510       /* Write the blockb0 block in the IN FIFO */
;;;1511       CRYP_DataIn((*(uint32_t*)(b0addr)));
000226  9800              LDR      r0,[sp,#0]
000228  f7fffffe          BL       CRYP_DataIn
;;;1512       b0addr+=4;
;;;1513       CRYP_DataIn((*(uint32_t*)(b0addr)));
00022c  9801              LDR      r0,[sp,#4]
00022e  f7fffffe          BL       CRYP_DataIn
;;;1514       b0addr+=4;
;;;1515       CRYP_DataIn((*(uint32_t*)(b0addr)));
000232  9802              LDR      r0,[sp,#8]
000234  f7fffffe          BL       CRYP_DataIn
;;;1516       b0addr+=4;
;;;1517       CRYP_DataIn((*(uint32_t*)(b0addr)));
000238  9803              LDR      r0,[sp,#0xc]
00023a  f7fffffe          BL       CRYP_DataIn
;;;1518       
;;;1519       /* Enable Crypto processor */
;;;1520       CRYP_Cmd(ENABLE);
00023e  2001              MOVS     r0,#1
000240  f7fffffe          BL       CRYP_Cmd
                  |L2.580|
;;;1521       
;;;1522       /* Wait for CRYPEN bit to be 0 */
;;;1523       while(CRYP_GetCmdStatus() == ENABLE)
000244  f7fffffe          BL       CRYP_GetCmdStatus
000248  2801              CMP      r0,#1
00024a  d0fb              BEQ      |L2.580|
;;;1524       {
;;;1525       }
;;;1526       
;;;1527       /***************************** header phase *******************************/
;;;1528       if(headersize != 0)
00024c  2c00              CMP      r4,#0
00024e  d078              BEQ      |L2.834|
;;;1529       {
;;;1530         /* Select header phase */
;;;1531         CRYP_PhaseConfig(CRYP_Phase_Header);
000250  4658              MOV      r0,r11
000252  f7fffffe          BL       CRYP_PhaseConfig
;;;1532         
;;;1533         /* Enable Crypto processor */
;;;1534         CRYP_Cmd(ENABLE);
000256  2001              MOVS     r0,#1
000258  f7fffffe          BL       CRYP_Cmd
;;;1535         
;;;1536         if(CRYP_GetCmdStatus() == DISABLE)
00025c  f7fffffe          BL       CRYP_GetCmdStatus
000260  2800              CMP      r0,#0
000262  d06f              BEQ      |L2.836|
;;;1537         {
;;;1538           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1539              the CRYP peripheral (please check the device sales type. */
;;;1540           return(ERROR);
;;;1541         }
;;;1542         
;;;1543         for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
000264  f04f0900          MOV      r9,#0
000268  e0de              B        |L2.1064|
                  |L2.618|
00026a  f7fffffe          BL       CRYP_FIFOFlush
00026e  a808              ADD      r0,sp,#0x20           ;1306
000270  f7fffffe          BL       CRYP_KeyInit
000274  a818              ADD      r0,sp,#0x60           ;1309
000276  f7fffffe          BL       CRYP_IVInit
00027a  f04f1108          MOV      r1,#0x80008           ;1313
00027e  e9cd9114          STRD     r9,r1,[sp,#0x50]      ;1313
000282  2180              MOVS     r1,#0x80              ;1314
000284  a814              ADD      r0,sp,#0x50           ;1315
000286  9116              STR      r1,[sp,#0x58]         ;1315
000288  f7fffffe          BL       CRYP_Init
00028c  2000              MOVS     r0,#0                 ;1319
00028e  f7fffffe          BL       CRYP_PhaseConfig
000292  9800              LDR      r0,[sp,#0]            ;1323
000294  f7fffffe          BL       CRYP_DataIn
000298  9801              LDR      r0,[sp,#4]            ;1325
00029a  f7fffffe          BL       CRYP_DataIn
00029e  9802              LDR      r0,[sp,#8]            ;1327
0002a0  f7fffffe          BL       CRYP_DataIn
0002a4  9803              LDR      r0,[sp,#0xc]          ;1329
0002a6  f7fffffe          BL       CRYP_DataIn
0002aa  2001              MOVS     r0,#1                 ;1332
0002ac  f7fffffe          BL       CRYP_Cmd
                  |L2.688|
0002b0  f7fffffe          BL       CRYP_GetCmdStatus
0002b4  2801              CMP      r0,#1                 ;1335
0002b6  d0fb              BEQ      |L2.688|
0002b8  b37c              CBZ      r4,|L2.794|
0002ba  4658              MOV      r0,r11                ;1342
0002bc  f7fffffe          BL       CRYP_PhaseConfig
0002c0  2001              MOVS     r0,#1                 ;1345
0002c2  f7fffffe          BL       CRYP_Cmd
0002c6  f7fffffe          BL       CRYP_GetCmdStatus
0002ca  2800              CMP      r0,#0                 ;1347
0002cc  d03a              BEQ      |L2.836|
0002ce  f04f0900          MOV      r9,#0                 ;1354
0002d2  e016              B        |L2.770|
                  |L2.724|
0002d4  2001              MOVS     r0,#1                 ;1357
0002d6  f7fffffe          BL       CRYP_GetFlagStatus
0002da  2800              CMP      r0,#0                 ;1357
0002dc  d0fa              BEQ      |L2.724|
0002de  6828              LDR      r0,[r5,#0]            ;1362
0002e0  f7fffffe          BL       CRYP_DataIn
0002e4  f8550f04          LDR      r0,[r5,#4]!           ;1364
0002e8  f7fffffe          BL       CRYP_DataIn
0002ec  f8550f04          LDR      r0,[r5,#4]!           ;1366
0002f0  f7fffffe          BL       CRYP_DataIn
0002f4  f8550f04          LDR      r0,[r5,#4]!           ;1368
0002f8  f7fffffe          BL       CRYP_DataIn
0002fc  1d2d              ADDS     r5,r5,#4              ;1369
0002fe  f1090910          ADD      r9,r9,#0x10           ;1354
                  |L2.770|
000302  45a1              CMP      r9,r4                 ;1354
000304  d3e6              BCC      |L2.724|
000306  2400              MOVS     r4,#0                 ;1373
000308  465d              MOV      r5,r11                ;1342
                  |L2.778|
00030a  2010              MOVS     r0,#0x10              ;1376
00030c  f7fffffe          BL       CRYP_GetFlagStatus
000310  1c64              ADDS     r4,r4,#1              ;1377
000312  42ac              CMP      r4,r5                 ;1378
000314  d002              BEQ      |L2.796|
000316  2800              CMP      r0,#0                 ;1378
000318  d1f7              BNE      |L2.778|
                  |L2.794|
00031a  e002              B        |L2.802|
                  |L2.796|
00031c  b108              CBZ      r0,|L2.802|
00031e  f04f0800          MOV      r8,#0                 ;1382
                  |L2.802|
000322  f1ba0f00          CMP      r10,#0                ;1387
000326  d049              BEQ      |L2.956|
000328  f44f3000          MOV      r0,#0x20000           ;1390
00032c  f7fffffe          BL       CRYP_PhaseConfig
000330  2001              MOVS     r0,#1                 ;1393
000332  f7fffffe          BL       CRYP_Cmd
000336  f7fffffe          BL       CRYP_GetCmdStatus
00033a  2800              CMP      r0,#0                 ;1395
00033c  d002              BEQ      |L2.836|
00033e  2500              MOVS     r5,#0                 ;1402
000340  e037              B        |L2.946|
                  |L2.834|
000342  e081              B        |L2.1096|
                  |L2.836|
000344  e0c4              B        |L2.1232|
                  |L2.838|
000346  2001              MOVS     r0,#1                 ;1405
000348  f7fffffe          BL       CRYP_GetFlagStatus
00034c  2800              CMP      r0,#0                 ;1405
00034e  d0fa              BEQ      |L2.838|
000350  6830              LDR      r0,[r6,#0]            ;1410
000352  f7fffffe          BL       CRYP_DataIn
000356  f8560f04          LDR      r0,[r6,#4]!           ;1412
00035a  f7fffffe          BL       CRYP_DataIn
00035e  f8560f04          LDR      r0,[r6,#4]!           ;1414
000362  f7fffffe          BL       CRYP_DataIn
000366  f8560f04          LDR      r0,[r6,#4]!           ;1416
00036a  f7fffffe          BL       CRYP_DataIn
00036e  1d36              ADDS     r6,r6,#4              ;1417
000370  2400              MOVS     r4,#0                 ;1420
                  |L2.882|
000372  2010              MOVS     r0,#0x10              ;1423
000374  f7fffffe          BL       CRYP_GetFlagStatus
000378  1c64              ADDS     r4,r4,#1              ;1424
00037a  455c              CMP      r4,r11                ;1425
00037c  d002              BEQ      |L2.900|
00037e  2800              CMP      r0,#0                 ;1425
000380  d1f7              BNE      |L2.882|
000382  e003              B        |L2.908|
                  |L2.900|
000384  b110              CBZ      r0,|L2.908|
000386  f04f0800          MOV      r8,#0                 ;1429
00038a  e011              B        |L2.944|
                  |L2.908|
00038c  2004              MOVS     r0,#4                 ;1434
00038e  f7fffffe          BL       CRYP_GetFlagStatus
000392  2800              CMP      r0,#0                 ;1434
000394  d0fa              BEQ      |L2.908|
000396  f7fffffe          BL       CRYP_DataOut
00039a  6038              STR      r0,[r7,#0]            ;1441
00039c  f7fffffe          BL       CRYP_DataOut
0003a0  6078              STR      r0,[r7,#4]            ;1443
0003a2  f7fffffe          BL       CRYP_DataOut
0003a6  60b8              STR      r0,[r7,#8]            ;1445
0003a8  f7fffffe          BL       CRYP_DataOut
0003ac  60f8              STR      r0,[r7,#0xc]          ;1445
0003ae  3710              ADDS     r7,r7,#0x10           ;1445
                  |L2.944|
0003b0  3510              ADDS     r5,r5,#0x10           ;1402
                  |L2.946|
0003b2  4555              CMP      r5,r10                ;1402
0003b4  d202              BCS      |L2.956|
0003b6  f1b80f00          CMP      r8,#0                 ;1402
0003ba  d1c4              BNE      |L2.838|
                  |L2.956|
0003bc  f44f3040          MOV      r0,#0x30000           ;1453
0003c0  f7fffffe          BL       CRYP_PhaseConfig
0003c4  2001              MOVS     r0,#1                 ;1456
0003c6  f7fffffe          BL       CRYP_Cmd
0003ca  f7fffffe          BL       CRYP_GetCmdStatus
0003ce  2800              CMP      r0,#0                 ;1458
0003d0  d07e              BEQ      |L2.1232|
0003d2  9804              LDR      r0,[sp,#0x10]         ;1467
0003d4  f7fffffe          BL       CRYP_DataIn
0003d8  9805              LDR      r0,[sp,#0x14]         ;1469
0003da  f7fffffe          BL       CRYP_DataIn
0003de  9806              LDR      r0,[sp,#0x18]         ;1471
0003e0  f7fffffe          BL       CRYP_DataIn
0003e4  9807              LDR      r0,[sp,#0x1c]         ;1474
0003e6  f0207080          BIC      r0,r0,#0x1000000      ;1474
0003ea  f7fffffe          BL       CRYP_DataIn
                  |L2.1006|
0003ee  2004              MOVS     r0,#4                 ;1477
0003f0  f7fffffe          BL       CRYP_GetFlagStatus
0003f4  2800              CMP      r0,#0                 ;1477
0003f6  d0fa              BEQ      |L2.1006|
0003f8  e091              B        |L2.1310|
                  |L2.1018|
;;;1544         {
;;;1545           /* Wait until the IFEM flag is reset */
;;;1546           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
0003fa  2001              MOVS     r0,#1
0003fc  f7fffffe          BL       CRYP_GetFlagStatus
000400  2800              CMP      r0,#0
000402  d0fa              BEQ      |L2.1018|
;;;1547           {
;;;1548           }
;;;1549           
;;;1550           /* Write the Input block in the IN FIFO */
;;;1551           CRYP_DataIn(*(uint32_t*)(headeraddr));
000404  6828              LDR      r0,[r5,#0]
000406  f7fffffe          BL       CRYP_DataIn
;;;1552           headeraddr+=4;
;;;1553           CRYP_DataIn(*(uint32_t*)(headeraddr));
00040a  f8550f04          LDR      r0,[r5,#4]!
00040e  f7fffffe          BL       CRYP_DataIn
;;;1554           headeraddr+=4;
;;;1555           CRYP_DataIn(*(uint32_t*)(headeraddr));
000412  f8550f04          LDR      r0,[r5,#4]!
000416  f7fffffe          BL       CRYP_DataIn
;;;1556           headeraddr+=4;
;;;1557           CRYP_DataIn(*(uint32_t*)(headeraddr));
00041a  f8550f04          LDR      r0,[r5,#4]!
00041e  f7fffffe          BL       CRYP_DataIn
;;;1558           headeraddr+=4;
000422  1d2d              ADDS     r5,r5,#4
000424  f1090910          ADD      r9,r9,#0x10           ;1543
                  |L2.1064|
000428  45a1              CMP      r9,r4                 ;1543
00042a  d3e6              BCC      |L2.1018|
;;;1559         }
;;;1560         
;;;1561         /* Wait until the complete message has been processed */
;;;1562         counter = 0;
00042c  2400              MOVS     r4,#0
00042e  465d              MOV      r5,r11                ;1342
                  |L2.1072|
;;;1563         do
;;;1564         {
;;;1565           busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
000430  2010              MOVS     r0,#0x10
000432  f7fffffe          BL       CRYP_GetFlagStatus
;;;1566           counter++;
000436  1c64              ADDS     r4,r4,#1
;;;1567         }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000438  42ac              CMP      r4,r5
00043a  d002              BEQ      |L2.1090|
00043c  2800              CMP      r0,#0
00043e  d1f7              BNE      |L2.1072|
000440  e002              B        |L2.1096|
                  |L2.1090|
;;;1568   
;;;1569         if (busystatus != RESET)
000442  b108              CBZ      r0,|L2.1096|
;;;1570         {
;;;1571           status = ERROR;
000444  f04f0800          MOV      r8,#0
                  |L2.1096|
;;;1572         }
;;;1573       }
;;;1574       
;;;1575       /**************************** payload phase *******************************/
;;;1576       if(ILength != 0)
000448  f1ba0f00          CMP      r10,#0
00044c  d049              BEQ      |L2.1250|
;;;1577       {
;;;1578         /* Select payload phase */
;;;1579         CRYP_PhaseConfig(CRYP_Phase_Payload);
00044e  f44f3000          MOV      r0,#0x20000
000452  f7fffffe          BL       CRYP_PhaseConfig
;;;1580   
;;;1581         /* Enable Crypto processor */
;;;1582         CRYP_Cmd(ENABLE);
000456  2001              MOVS     r0,#1
000458  f7fffffe          BL       CRYP_Cmd
;;;1583         
;;;1584         if(CRYP_GetCmdStatus() == DISABLE)
00045c  f7fffffe          BL       CRYP_GetCmdStatus
000460  2800              CMP      r0,#0
000462  d076              BEQ      |L2.1362|
;;;1585         {
;;;1586           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1587              the CRYP peripheral (please check the device sales type. */
;;;1588           return(ERROR);
;;;1589         }
;;;1590         
;;;1591         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
000464  2500              MOVS     r5,#0
000466  e037              B        |L2.1240|
                  |L2.1128|
;;;1592         {
;;;1593           /* Wait until the IFEM flag is reset */
;;;1594           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
000468  2001              MOVS     r0,#1
00046a  f7fffffe          BL       CRYP_GetFlagStatus
00046e  2800              CMP      r0,#0
000470  d0fa              BEQ      |L2.1128|
;;;1595           {
;;;1596           }
;;;1597           
;;;1598           /* Write the Input block in the IN FIFO */
;;;1599           CRYP_DataIn(*(uint32_t*)(inputaddr));
000472  6830              LDR      r0,[r6,#0]
000474  f7fffffe          BL       CRYP_DataIn
;;;1600           inputaddr+=4;
;;;1601           CRYP_DataIn(*(uint32_t*)(inputaddr));
000478  f8560f04          LDR      r0,[r6,#4]!
00047c  f7fffffe          BL       CRYP_DataIn
;;;1602           inputaddr+=4;
;;;1603           CRYP_DataIn(*(uint32_t*)(inputaddr));
000480  f8560f04          LDR      r0,[r6,#4]!
000484  f7fffffe          BL       CRYP_DataIn
;;;1604           inputaddr+=4;
;;;1605           CRYP_DataIn(*(uint32_t*)(inputaddr));
000488  f8560f04          LDR      r0,[r6,#4]!
00048c  f7fffffe          BL       CRYP_DataIn
;;;1606           inputaddr+=4;
000490  1d36              ADDS     r6,r6,#4
;;;1607           
;;;1608           /* Wait until the complete message has been processed */
;;;1609           counter = 0;
000492  2400              MOVS     r4,#0
                  |L2.1172|
;;;1610           do
;;;1611           {
;;;1612             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
000494  2010              MOVS     r0,#0x10
000496  f7fffffe          BL       CRYP_GetFlagStatus
;;;1613             counter++;
00049a  1c64              ADDS     r4,r4,#1
;;;1614           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
00049c  455c              CMP      r4,r11
00049e  d002              BEQ      |L2.1190|
0004a0  2800              CMP      r0,#0
0004a2  d1f7              BNE      |L2.1172|
0004a4  e003              B        |L2.1198|
                  |L2.1190|
;;;1615   
;;;1616           if (busystatus != RESET)
0004a6  b110              CBZ      r0,|L2.1198|
;;;1617           {
;;;1618             status = ERROR;
0004a8  f04f0800          MOV      r8,#0
0004ac  e013              B        |L2.1238|
                  |L2.1198|
;;;1619           }
;;;1620           else
;;;1621           {
;;;1622             /* Wait until the OFNE flag is reset */
;;;1623             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
0004ae  2004              MOVS     r0,#4
0004b0  f7fffffe          BL       CRYP_GetFlagStatus
0004b4  2800              CMP      r0,#0
0004b6  d0fa              BEQ      |L2.1198|
;;;1624             {
;;;1625             }
;;;1626             
;;;1627             /* Read the Output block from the Output FIFO */
;;;1628             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0004b8  f7fffffe          BL       CRYP_DataOut
;;;1629             outputaddr+=4;
;;;1630             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0004bc  6038              STR      r0,[r7,#0]
0004be  f7fffffe          BL       CRYP_DataOut
;;;1631             outputaddr+=4;
;;;1632             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0004c2  6078              STR      r0,[r7,#4]
0004c4  f7fffffe          BL       CRYP_DataOut
;;;1633             outputaddr+=4;
;;;1634             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0004c8  60b8              STR      r0,[r7,#8]
0004ca  f7fffffe          BL       CRYP_DataOut
0004ce  e000              B        |L2.1234|
                  |L2.1232|
0004d0  e03f              B        |L2.1362|
                  |L2.1234|
0004d2  60f8              STR      r0,[r7,#0xc]
0004d4  3710              ADDS     r7,r7,#0x10
                  |L2.1238|
0004d6  3510              ADDS     r5,r5,#0x10           ;1591
                  |L2.1240|
0004d8  4555              CMP      r5,r10                ;1591
0004da  d202              BCS      |L2.1250|
0004dc  f1b80f00          CMP      r8,#0                 ;1591
0004e0  d1c2              BNE      |L2.1128|
                  |L2.1250|
;;;1635             outputaddr+=4;
;;;1636           }
;;;1637         }
;;;1638       }
;;;1639       
;;;1640       /***************************** final phase ********************************/
;;;1641       /* Select final phase */
;;;1642       CRYP_PhaseConfig(CRYP_Phase_Final);
0004e2  f44f3040          MOV      r0,#0x30000
0004e6  f7fffffe          BL       CRYP_PhaseConfig
;;;1643       
;;;1644       /* Enable Crypto processor */
;;;1645       CRYP_Cmd(ENABLE);
0004ea  2001              MOVS     r0,#1
0004ec  f7fffffe          BL       CRYP_Cmd
;;;1646       
;;;1647       if(CRYP_GetCmdStatus() == DISABLE)
0004f0  f7fffffe          BL       CRYP_GetCmdStatus
0004f4  2800              CMP      r0,#0
0004f6  d02c              BEQ      |L2.1362|
;;;1648       {
;;;1649         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1650            the CRYP peripheral (please check the device sales type. */
;;;1651         return(ERROR);
;;;1652       }
;;;1653       
;;;1654       ctraddr = (uint32_t)ctr;
;;;1655       /* Write the counter block in the IN FIFO */
;;;1656       CRYP_DataIn(*(uint32_t*)(ctraddr));
0004f8  9804              LDR      r0,[sp,#0x10]
0004fa  f7fffffe          BL       CRYP_DataIn
;;;1657       ctraddr+=4;
;;;1658       CRYP_DataIn(*(uint32_t*)(ctraddr));
0004fe  9805              LDR      r0,[sp,#0x14]
000500  f7fffffe          BL       CRYP_DataIn
;;;1659       ctraddr+=4;
;;;1660       CRYP_DataIn(*(uint32_t*)(ctraddr));
000504  9806              LDR      r0,[sp,#0x18]
000506  f7fffffe          BL       CRYP_DataIn
;;;1661       ctraddr+=4;
;;;1662       /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
;;;1663       CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
00050a  9807              LDR      r0,[sp,#0x1c]
00050c  f0207080          BIC      r0,r0,#0x1000000
000510  f7fffffe          BL       CRYP_DataIn
                  |L2.1300|
;;;1664       
;;;1665       /* Wait until the OFNE flag is reset */
;;;1666       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
000514  2004              MOVS     r0,#4
000516  f7fffffe          BL       CRYP_GetFlagStatus
00051a  2800              CMP      r0,#0
00051c  d0fa              BEQ      |L2.1300|
                  |L2.1310|
;;;1667       {
;;;1668       }
;;;1669       
;;;1670       /* Read the Authentaication TAG (MAC) in the IN FIFO */
;;;1671       temptag[0] = CRYP_DataOut();
00051e  f7fffffe          BL       CRYP_DataOut
;;;1672       temptag[1] = CRYP_DataOut();
000522  9010              STR      r0,[sp,#0x40]
000524  f7fffffe          BL       CRYP_DataOut
;;;1673       temptag[2] = CRYP_DataOut();
000528  9011              STR      r0,[sp,#0x44]
00052a  f7fffffe          BL       CRYP_DataOut
;;;1674       temptag[3] = CRYP_DataOut();
00052e  9012              STR      r0,[sp,#0x48]
000530  f7fffffe          BL       CRYP_DataOut
;;;1675     }
;;;1676     
;;;1677     /* Copy temporary authentication TAG in user TAG buffer */
;;;1678     for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
000534  9013              STR      r0,[sp,#0x4c]
000536  2000              MOVS     r0,#0
000538  a910              ADD      r1,sp,#0x40           ;1159
00053a  e003              B        |L2.1348|
                  |L2.1340|
;;;1679     {
;;;1680       /* Set the authentication TAG buffer */
;;;1681       *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
00053c  9a1e              LDR      r2,[sp,#0x78]
00053e  5c0b              LDRB     r3,[r1,r0]
000540  5413              STRB     r3,[r2,r0]
000542  1c40              ADDS     r0,r0,#1              ;1678
                  |L2.1348|
000544  9a34              LDR      r2,[sp,#0xd0]         ;1678
000546  4290              CMP      r0,r2                 ;1678
000548  d3f8              BCC      |L2.1340|
;;;1682     }
;;;1683     
;;;1684     /* Disable Crypto */
;;;1685     CRYP_Cmd(DISABLE);
00054a  2000              MOVS     r0,#0
00054c  f7fffffe          BL       CRYP_Cmd
;;;1686   
;;;1687     return status;
000550  4640              MOV      r0,r8
                  |L2.1362|
;;;1688   }
000552  b023              ADD      sp,sp,#0x8c
000554  e8bd8ff0          POP      {r4-r11,pc}
;;;1689   
                          ENDP


                          AREA ||i.CRYP_AES_CTR||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CTR PROC
;;;495      */
;;;496    ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;497                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;498                             uint8_t *Output)
;;;499    {
000004  b091              SUB      sp,sp,#0x44
000006  469b              MOV      r11,r3
000008  e9dd5a1e          LDRD     r5,r10,[sp,#0x78]
;;;500      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;501      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;502      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;503      __IO uint32_t counter = 0;
;;;504      uint32_t busystatus = 0;
;;;505      ErrorStatus status = SUCCESS;
00000c  f04f0801          MOV      r8,#1
;;;506      uint32_t keyaddr    = (uint32_t)Key;
000010  4614              MOV      r4,r2
;;;507      uint32_t inputaddr  = (uint32_t)Input;
;;;508      uint32_t outputaddr = (uint32_t)Output;
;;;509      uint32_t ivaddr     = (uint32_t)InitVectors;
000012  4689              MOV      r9,r1
;;;510      uint32_t i = 0;
000014  2700              MOVS     r7,#0
;;;511    
;;;512      /* Crypto structures initialisation*/
;;;513      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000016  4668              MOV      r0,sp
000018  9e20              LDR      r6,[sp,#0x80]
00001a  f7fffffe          BL       CRYP_KeyStructInit
;;;514    
;;;515      switch(Keysize)
00001e  f1bb0f80          CMP      r11,#0x80
000022  d01f              BEQ      |L3.100|
000024  f44f7080          MOV      r0,#0x100
000028  f1bb0fc0          CMP      r11,#0xc0
00002c  d027              BEQ      |L3.126|
00002e  4583              CMP      r11,r0
000030  d138              BNE      |L3.164|
;;;516      {
;;;517        case 128:
;;;518        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;519        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;520        keyaddr+=4;
;;;521        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;522        keyaddr+=4;
;;;523        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;524        keyaddr+=4;
;;;525        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;526        break;
;;;527        case 192:
;;;528        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;529        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;530        keyaddr+=4;
;;;531        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;532        keyaddr+=4;
;;;533        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;534        keyaddr+=4;
;;;535        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;536        keyaddr+=4;
;;;537        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;538        keyaddr+=4;
;;;539        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;540        break;
;;;541        case 256:
;;;542        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000032  0040              LSLS     r0,r0,#1
;;;543        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000034  900b              STR      r0,[sp,#0x2c]
000036  6820              LDR      r0,[r4,#0]
000038  ba00              REV      r0,r0
;;;544        keyaddr+=4;
;;;545        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00003a  9000              STR      r0,[sp,#0]
00003c  6860              LDR      r0,[r4,#4]
00003e  ba00              REV      r0,r0
;;;546        keyaddr+=4;
;;;547        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000040  9001              STR      r0,[sp,#4]
000042  68a0              LDR      r0,[r4,#8]
000044  ba00              REV      r0,r0
;;;548        keyaddr+=4;
;;;549        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000046  9002              STR      r0,[sp,#8]
000048  68e0              LDR      r0,[r4,#0xc]
00004a  ba00              REV      r0,r0
;;;550        keyaddr+=4;
;;;551        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004c  9003              STR      r0,[sp,#0xc]
00004e  6920              LDR      r0,[r4,#0x10]
000050  ba00              REV      r0,r0
;;;552        keyaddr+=4;
;;;553        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000052  9004              STR      r0,[sp,#0x10]
000054  6960              LDR      r0,[r4,#0x14]
000056  ba00              REV      r0,r0
;;;554        keyaddr+=4;
;;;555        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000058  9005              STR      r0,[sp,#0x14]
00005a  69a0              LDR      r0,[r4,#0x18]
00005c  ba00              REV      r0,r0
;;;556        keyaddr+=4;
;;;557        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00005e  9006              STR      r0,[sp,#0x18]
;;;558        break;
000060  69e0              LDR      r0,[r4,#0x1c]
000062  e01d              B        |L3.160|
                  |L3.100|
000064  2000              MOVS     r0,#0                 ;518
000066  900b              STR      r0,[sp,#0x2c]         ;519
000068  6820              LDR      r0,[r4,#0]            ;519
00006a  ba00              REV      r0,r0                 ;519
00006c  9004              STR      r0,[sp,#0x10]         ;521
00006e  6860              LDR      r0,[r4,#4]            ;521
000070  ba00              REV      r0,r0                 ;521
000072  9005              STR      r0,[sp,#0x14]         ;523
000074  68a0              LDR      r0,[r4,#8]            ;523
000076  ba00              REV      r0,r0                 ;523
000078  9006              STR      r0,[sp,#0x18]         ;525
00007a  68e0              LDR      r0,[r4,#0xc]          ;526
00007c  e010              B        |L3.160|
                  |L3.126|
00007e  900b              STR      r0,[sp,#0x2c]         ;529
000080  6820              LDR      r0,[r4,#0]            ;529
000082  ba00              REV      r0,r0                 ;529
000084  9002              STR      r0,[sp,#8]            ;531
000086  6860              LDR      r0,[r4,#4]            ;531
000088  ba00              REV      r0,r0                 ;531
00008a  9003              STR      r0,[sp,#0xc]          ;533
00008c  68a0              LDR      r0,[r4,#8]            ;533
00008e  ba00              REV      r0,r0                 ;533
000090  9004              STR      r0,[sp,#0x10]         ;535
000092  68e0              LDR      r0,[r4,#0xc]          ;535
000094  ba00              REV      r0,r0                 ;535
000096  9005              STR      r0,[sp,#0x14]         ;537
000098  6920              LDR      r0,[r4,#0x10]         ;537
00009a  ba00              REV      r0,r0                 ;537
00009c  9006              STR      r0,[sp,#0x18]         ;539
00009e  6960              LDR      r0,[r4,#0x14]         ;539
                  |L3.160|
0000a0  ba00              REV      r0,r0                 ;525
0000a2  9007              STR      r0,[sp,#0x1c]         ;525
                  |L3.164|
;;;559        default:
;;;560        break;
;;;561      }
;;;562      /* CRYP Initialization Vectors */
;;;563      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000a4  f8d90000          LDR      r0,[r9,#0]
0000a8  ba00              REV      r0,r0
;;;564      ivaddr+=4;
;;;565      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0000aa  900c              STR      r0,[sp,#0x30]
0000ac  f8d90004          LDR      r0,[r9,#4]
0000b0  ba00              REV      r0,r0
;;;566      ivaddr+=4;
;;;567      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
0000b2  900d              STR      r0,[sp,#0x34]
0000b4  f8d90008          LDR      r0,[r9,#8]
0000b8  ba00              REV      r0,r0
;;;568      ivaddr+=4;
;;;569      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
0000ba  900e              STR      r0,[sp,#0x38]
0000bc  f8d9000c          LDR      r0,[r9,#0xc]
0000c0  ba00              REV      r0,r0
;;;570    
;;;571      /* Key Initialisation */
;;;572      CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0000c2  900f              STR      r0,[sp,#0x3c]
0000c4  4668              MOV      r0,sp
0000c6  f7fffffe          BL       CRYP_KeyInit
;;;573    
;;;574      /*------------------ AES Decryption ------------------*/
;;;575      if(Mode == MODE_DECRYPT) /* AES decryption */
0000ca  9811              LDR      r0,[sp,#0x44]
0000cc  b1a8              CBZ      r0,|L3.250|
;;;576      {
;;;577        /* Crypto Init for decryption process */
;;;578        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;579      }
;;;580      /*------------------ AES Encryption ------------------*/
;;;581      else /* AES encryption */
;;;582      {
;;;583        /* Crypto Init for Encryption process */
;;;584        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
0000ce  2000              MOVS     r0,#0
                  |L3.208|
;;;585      }
;;;586      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
0000d0  9008              STR      r0,[sp,#0x20]
0000d2  2030              MOVS     r0,#0x30
;;;587      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0000d4  9009              STR      r0,[sp,#0x24]
0000d6  2080              MOVS     r0,#0x80
;;;588      CRYP_Init(&AES_CRYP_InitStructure);
0000d8  900a              STR      r0,[sp,#0x28]
0000da  a808              ADD      r0,sp,#0x20
0000dc  f7fffffe          BL       CRYP_Init
;;;589    
;;;590      /* CRYP Initialization Vectors */
;;;591      CRYP_IVInit(&AES_CRYP_IVInitStructure);
0000e0  a80c              ADD      r0,sp,#0x30
0000e2  f7fffffe          BL       CRYP_IVInit
;;;592    
;;;593      /* Flush IN/OUT FIFOs */
;;;594      CRYP_FIFOFlush();
0000e6  f7fffffe          BL       CRYP_FIFOFlush
;;;595    
;;;596      /* Enable Crypto processor */
;;;597      CRYP_Cmd(ENABLE);
0000ea  2001              MOVS     r0,#1
0000ec  f7fffffe          BL       CRYP_Cmd
;;;598    
;;;599      if(CRYP_GetCmdStatus() == DISABLE)
0000f0  f7fffffe          BL       CRYP_GetCmdStatus
0000f4  2800              CMP      r0,#0
0000f6  d039              BEQ      |L3.364|
0000f8  e02f              B        |L3.346|
                  |L3.250|
0000fa  2004              MOVS     r0,#4                 ;578
0000fc  e7e8              B        |L3.208|
                  |L3.254|
;;;600      {
;;;601        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;602           the CRYP peripheral (please check the device sales type. */
;;;603        return(ERROR);
;;;604      }
;;;605      
;;;606      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
;;;607      {
;;;608    
;;;609        /* Write the Input block in the IN FIFO */
;;;610        CRYP_DataIn(*(uint32_t*)(inputaddr));
0000fe  6828              LDR      r0,[r5,#0]
000100  f7fffffe          BL       CRYP_DataIn
;;;611        inputaddr+=4;
;;;612        CRYP_DataIn(*(uint32_t*)(inputaddr));
000104  f8550f04          LDR      r0,[r5,#4]!
000108  f7fffffe          BL       CRYP_DataIn
;;;613        inputaddr+=4;
;;;614        CRYP_DataIn(*(uint32_t*)(inputaddr));
00010c  f8550f04          LDR      r0,[r5,#4]!
000110  f7fffffe          BL       CRYP_DataIn
;;;615        inputaddr+=4;
;;;616        CRYP_DataIn(*(uint32_t*)(inputaddr));
000114  f8550f04          LDR      r0,[r5,#4]!
000118  f7fffffe          BL       CRYP_DataIn
;;;617        inputaddr+=4;
00011c  1d2d              ADDS     r5,r5,#4
;;;618        /* Wait until the complete message has been processed */
;;;619        counter = 0;
00011e  2400              MOVS     r4,#0
;;;620        do
;;;621        {
;;;622          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;623          counter++;
;;;624        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000120  f44f3980          MOV      r9,#0x10000
                  |L3.292|
000124  2010              MOVS     r0,#0x10              ;622
000126  f7fffffe          BL       CRYP_GetFlagStatus
00012a  1c64              ADDS     r4,r4,#1              ;623
00012c  454c              CMP      r4,r9
00012e  d002              BEQ      |L3.310|
000130  2800              CMP      r0,#0
000132  d1f7              BNE      |L3.292|
000134  e003              B        |L3.318|
                  |L3.310|
;;;625    
;;;626        if (busystatus != RESET)
000136  b110              CBZ      r0,|L3.318|
;;;627       {
;;;628           status = ERROR;
000138  f04f0800          MOV      r8,#0
00013c  e00c              B        |L3.344|
                  |L3.318|
;;;629        }
;;;630        else
;;;631        {
;;;632    
;;;633          /* Read the Output block from the Output FIFO */
;;;634          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00013e  f7fffffe          BL       CRYP_DataOut
;;;635          outputaddr+=4;
;;;636          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000142  6030              STR      r0,[r6,#0]
000144  f7fffffe          BL       CRYP_DataOut
;;;637          outputaddr+=4;
;;;638          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000148  6070              STR      r0,[r6,#4]
00014a  f7fffffe          BL       CRYP_DataOut
;;;639          outputaddr+=4;
;;;640          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00014e  60b0              STR      r0,[r6,#8]
000150  f7fffffe          BL       CRYP_DataOut
000154  60f0              STR      r0,[r6,#0xc]
000156  3610              ADDS     r6,r6,#0x10
                  |L3.344|
000158  3710              ADDS     r7,r7,#0x10           ;606
                  |L3.346|
00015a  4557              CMP      r7,r10                ;606
00015c  d202              BCS      |L3.356|
00015e  f1b80f00          CMP      r8,#0                 ;606
000162  d1cc              BNE      |L3.254|
                  |L3.356|
;;;641          outputaddr+=4;
;;;642        }
;;;643      }
;;;644      /* Disable Crypto */
;;;645      CRYP_Cmd(DISABLE);
000164  2000              MOVS     r0,#0
000166  f7fffffe          BL       CRYP_Cmd
;;;646    
;;;647      return status;
00016a  4640              MOV      r0,r8
                  |L3.364|
;;;648    }
00016c  b015              ADD      sp,sp,#0x54
00016e  e8bd8ff0          POP      {r4-r11,pc}
;;;649    
                          ENDP


                          AREA ||i.CRYP_AES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_AES_ECB PROC
;;;105      */
;;;106    ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;107                             uint8_t* Input, uint32_t Ilength, uint8_t* Output)
;;;108    {
000004  b08d              SUB      sp,sp,#0x34
000006  4683              MOV      r11,r0
000008  e9dd9616          LDRD     r9,r6,[sp,#0x58]
00000c  4692              MOV      r10,r2
;;;109      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;110      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;111      __IO uint32_t counter = 0;
00000e  2700              MOVS     r7,#0
;;;112      uint32_t busystatus = 0;
;;;113      ErrorStatus status = SUCCESS;
000010  f04f0801          MOV      r8,#1
;;;114      uint32_t keyaddr    = (uint32_t)Key;
000014  460c              MOV      r4,r1
;;;115      uint32_t inputaddr  = (uint32_t)Input;
000016  461d              MOV      r5,r3
;;;116      uint32_t outputaddr = (uint32_t)Output;
;;;117      uint32_t i = 0;
;;;118    
;;;119      /* Crypto structures initialisation*/
;;;120      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       CRYP_KeyStructInit
;;;121    
;;;122      switch(Keysize)
00001e  f1ba0f80          CMP      r10,#0x80
000022  d01f              BEQ      |L4.100|
000024  f44f7080          MOV      r0,#0x100
000028  f1ba0fc0          CMP      r10,#0xc0
00002c  d027              BEQ      |L4.126|
00002e  4582              CMP      r10,r0
000030  d138              BNE      |L4.164|
;;;123      {
;;;124        case 128:
;;;125        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;126        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;127        keyaddr+=4;
;;;128        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;129        keyaddr+=4;
;;;130        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;131        keyaddr+=4;
;;;132        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;133        break;
;;;134        case 192:
;;;135        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;136        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;137        keyaddr+=4;
;;;138        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;139        keyaddr+=4;
;;;140        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;141        keyaddr+=4;
;;;142        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;143        keyaddr+=4;
;;;144        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;145        keyaddr+=4;
;;;146        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;147        break;
;;;148        case 256:
;;;149        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000032  0040              LSLS     r0,r0,#1
;;;150        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000034  900b              STR      r0,[sp,#0x2c]
000036  6820              LDR      r0,[r4,#0]
000038  ba00              REV      r0,r0
;;;151        keyaddr+=4;
;;;152        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00003a  9000              STR      r0,[sp,#0]
00003c  6860              LDR      r0,[r4,#4]
00003e  ba00              REV      r0,r0
;;;153        keyaddr+=4;
;;;154        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000040  9001              STR      r0,[sp,#4]
000042  68a0              LDR      r0,[r4,#8]
000044  ba00              REV      r0,r0
;;;155        keyaddr+=4;
;;;156        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000046  9002              STR      r0,[sp,#8]
000048  68e0              LDR      r0,[r4,#0xc]
00004a  ba00              REV      r0,r0
;;;157        keyaddr+=4;
;;;158        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00004c  9003              STR      r0,[sp,#0xc]
00004e  6920              LDR      r0,[r4,#0x10]
000050  ba00              REV      r0,r0
;;;159        keyaddr+=4;
;;;160        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000052  9004              STR      r0,[sp,#0x10]
000054  6960              LDR      r0,[r4,#0x14]
000056  ba00              REV      r0,r0
;;;161        keyaddr+=4;
;;;162        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000058  9005              STR      r0,[sp,#0x14]
00005a  69a0              LDR      r0,[r4,#0x18]
00005c  ba00              REV      r0,r0
;;;163        keyaddr+=4;
;;;164        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00005e  9006              STR      r0,[sp,#0x18]
;;;165        break;
000060  69e0              LDR      r0,[r4,#0x1c]
000062  e01d              B        |L4.160|
                  |L4.100|
000064  2000              MOVS     r0,#0                 ;125
000066  900b              STR      r0,[sp,#0x2c]         ;126
000068  6820              LDR      r0,[r4,#0]            ;126
00006a  ba00              REV      r0,r0                 ;126
00006c  9004              STR      r0,[sp,#0x10]         ;128
00006e  6860              LDR      r0,[r4,#4]            ;128
000070  ba00              REV      r0,r0                 ;128
000072  9005              STR      r0,[sp,#0x14]         ;130
000074  68a0              LDR      r0,[r4,#8]            ;130
000076  ba00              REV      r0,r0                 ;130
000078  9006              STR      r0,[sp,#0x18]         ;132
00007a  68e0              LDR      r0,[r4,#0xc]          ;133
00007c  e010              B        |L4.160|
                  |L4.126|
00007e  900b              STR      r0,[sp,#0x2c]         ;136
000080  6820              LDR      r0,[r4,#0]            ;136
000082  ba00              REV      r0,r0                 ;136
000084  9002              STR      r0,[sp,#8]            ;138
000086  6860              LDR      r0,[r4,#4]            ;138
000088  ba00              REV      r0,r0                 ;138
00008a  9003              STR      r0,[sp,#0xc]          ;140
00008c  68a0              LDR      r0,[r4,#8]            ;140
00008e  ba00              REV      r0,r0                 ;140
000090  9004              STR      r0,[sp,#0x10]         ;142
000092  68e0              LDR      r0,[r4,#0xc]          ;142
000094  ba00              REV      r0,r0                 ;142
000096  9005              STR      r0,[sp,#0x14]         ;144
000098  6920              LDR      r0,[r4,#0x10]         ;144
00009a  ba00              REV      r0,r0                 ;144
00009c  9006              STR      r0,[sp,#0x18]         ;146
00009e  6960              LDR      r0,[r4,#0x14]         ;146
                  |L4.160|
0000a0  ba00              REV      r0,r0                 ;132
0000a2  9007              STR      r0,[sp,#0x1c]         ;132
                  |L4.164|
;;;166        default:
;;;167        break;
;;;168      }
;;;169    
;;;170      /*------------------ AES Decryption ------------------*/
;;;171      if(Mode == MODE_DECRYPT) /* AES decryption */
;;;172      {
;;;173        /* Flush IN/OUT FIFOs */
;;;174        CRYP_FIFOFlush();
;;;175    
;;;176        /* Crypto Init for Key preparation for decryption process */
;;;177        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;178        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
;;;179        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
;;;180        CRYP_Init(&AES_CRYP_InitStructure);
;;;181    
;;;182        /* Key Initialisation */
;;;183        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;184    
;;;185        /* Enable Crypto processor */
;;;186        CRYP_Cmd(ENABLE);
;;;187    
;;;188        /* wait until the Busy flag is RESET */
;;;189        do
;;;190        {
;;;191          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;192          counter++;
;;;193        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
0000a4  f44f3a80          MOV      r10,#0x10000
0000a8  f1bb0f00          CMP      r11,#0                ;171
0000ac  d016              BEQ      |L4.220|
;;;194    
;;;195        if (busystatus != RESET)
;;;196       {
;;;197           status = ERROR;
;;;198        }
;;;199        else
;;;200        {
;;;201          /* Crypto Init for decryption process */  
;;;202          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
;;;203        }
;;;204      }
;;;205      /*------------------ AES Encryption ------------------*/
;;;206      else /* AES encryption */
;;;207      {
;;;208    
;;;209        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0000ae  4668              MOV      r0,sp
0000b0  f7fffffe          BL       CRYP_KeyInit
;;;210    
;;;211        /* Crypto Init for Encryption process */
;;;212        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
0000b4  2000              MOVS     r0,#0
0000b6  9008              STR      r0,[sp,#0x20]
                  |L4.184|
;;;213      }
;;;214    
;;;215      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
0000b8  2020              MOVS     r0,#0x20
;;;216      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0000ba  9009              STR      r0,[sp,#0x24]
0000bc  2080              MOVS     r0,#0x80
;;;217      CRYP_Init(&AES_CRYP_InitStructure);
0000be  900a              STR      r0,[sp,#0x28]
0000c0  a808              ADD      r0,sp,#0x20
0000c2  f7fffffe          BL       CRYP_Init
;;;218    
;;;219      /* Flush IN/OUT FIFOs */
;;;220      CRYP_FIFOFlush();
0000c6  f7fffffe          BL       CRYP_FIFOFlush
;;;221    
;;;222      /* Enable Crypto processor */
;;;223      CRYP_Cmd(ENABLE);
0000ca  2001              MOVS     r0,#1
0000cc  f7fffffe          BL       CRYP_Cmd
;;;224    
;;;225      if(CRYP_GetCmdStatus() == DISABLE)
0000d0  f7fffffe          BL       CRYP_GetCmdStatus
0000d4  2800              CMP      r0,#0
0000d6  d056              BEQ      |L4.390|
;;;226      {
;;;227        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;228           the CRYP peripheral (please check the device sales type. */
;;;229        return(ERROR);
;;;230      }
;;;231      
;;;232      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
0000d8  2700              MOVS     r7,#0
0000da  e04b              B        |L4.372|
                  |L4.220|
0000dc  f7fffffe          BL       CRYP_FIFOFlush
0000e0  2404              MOVS     r4,#4                 ;177
0000e2  2038              MOVS     r0,#0x38              ;178
0000e4  e9cd4008          STRD     r4,r0,[sp,#0x20]      ;178
0000e8  2000              MOVS     r0,#0                 ;179
0000ea  900a              STR      r0,[sp,#0x28]         ;180
0000ec  a808              ADD      r0,sp,#0x20           ;180
0000ee  f7fffffe          BL       CRYP_Init
0000f2  4668              MOV      r0,sp                 ;183
0000f4  f7fffffe          BL       CRYP_KeyInit
0000f8  2001              MOVS     r0,#1                 ;186
0000fa  f7fffffe          BL       CRYP_Cmd
                  |L4.254|
0000fe  2010              MOVS     r0,#0x10              ;191
000100  f7fffffe          BL       CRYP_GetFlagStatus
000104  1c7f              ADDS     r7,r7,#1              ;192
000106  4557              CMP      r7,r10                ;193
000108  d002              BEQ      |L4.272|
00010a  2800              CMP      r0,#0                 ;193
00010c  d1f7              BNE      |L4.254|
00010e  e003              B        |L4.280|
                  |L4.272|
000110  b110              CBZ      r0,|L4.280|
000112  f04f0800          MOV      r8,#0                 ;197
000116  e7cf              B        |L4.184|
                  |L4.280|
000118  9408              STR      r4,[sp,#0x20]         ;202
00011a  e7cd              B        |L4.184|
                  |L4.284|
;;;233      {
;;;234    
;;;235        /* Write the Input block in the IN FIFO */
;;;236        CRYP_DataIn(*(uint32_t*)(inputaddr));
00011c  6828              LDR      r0,[r5,#0]
00011e  f7fffffe          BL       CRYP_DataIn
;;;237        inputaddr+=4;
;;;238        CRYP_DataIn(*(uint32_t*)(inputaddr));
000122  f8550f04          LDR      r0,[r5,#4]!
000126  f7fffffe          BL       CRYP_DataIn
;;;239        inputaddr+=4;
;;;240        CRYP_DataIn(*(uint32_t*)(inputaddr));
00012a  f8550f04          LDR      r0,[r5,#4]!
00012e  f7fffffe          BL       CRYP_DataIn
;;;241        inputaddr+=4;
;;;242        CRYP_DataIn(*(uint32_t*)(inputaddr));
000132  f8550f04          LDR      r0,[r5,#4]!
000136  f7fffffe          BL       CRYP_DataIn
;;;243        inputaddr+=4;
00013a  1d2d              ADDS     r5,r5,#4
;;;244    
;;;245        /* Wait until the complete message has been processed */
;;;246        counter = 0;
00013c  2400              MOVS     r4,#0
                  |L4.318|
;;;247        do
;;;248        {
;;;249          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00013e  2010              MOVS     r0,#0x10
000140  f7fffffe          BL       CRYP_GetFlagStatus
;;;250          counter++;
000144  1c64              ADDS     r4,r4,#1
;;;251        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000146  4554              CMP      r4,r10
000148  d002              BEQ      |L4.336|
00014a  2800              CMP      r0,#0
00014c  d1f7              BNE      |L4.318|
00014e  e003              B        |L4.344|
                  |L4.336|
;;;252    
;;;253        if (busystatus != RESET)
000150  b110              CBZ      r0,|L4.344|
;;;254       {
;;;255           status = ERROR;
000152  f04f0800          MOV      r8,#0
000156  e00c              B        |L4.370|
                  |L4.344|
;;;256        }
;;;257        else
;;;258        {
;;;259    
;;;260          /* Read the Output block from the Output FIFO */
;;;261          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000158  f7fffffe          BL       CRYP_DataOut
;;;262          outputaddr+=4;
;;;263          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00015c  6030              STR      r0,[r6,#0]
00015e  f7fffffe          BL       CRYP_DataOut
;;;264          outputaddr+=4;
;;;265          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000162  6070              STR      r0,[r6,#4]
000164  f7fffffe          BL       CRYP_DataOut
;;;266          outputaddr+=4;
;;;267          *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
000168  60b0              STR      r0,[r6,#8]
00016a  f7fffffe          BL       CRYP_DataOut
00016e  60f0              STR      r0,[r6,#0xc]
000170  3610              ADDS     r6,r6,#0x10
                  |L4.370|
000172  3710              ADDS     r7,r7,#0x10           ;232
                  |L4.372|
000174  454f              CMP      r7,r9                 ;232
000176  d202              BCS      |L4.382|
000178  f1b80f00          CMP      r8,#0                 ;232
00017c  d1ce              BNE      |L4.284|
                  |L4.382|
;;;268          outputaddr+=4;
;;;269        }
;;;270      }
;;;271    
;;;272      /* Disable Crypto */
;;;273      CRYP_Cmd(DISABLE);
00017e  2000              MOVS     r0,#0
000180  f7fffffe          BL       CRYP_Cmd
;;;274    
;;;275      return status; 
000184  4640              MOV      r0,r8
                  |L4.390|
;;;276    }
000186  b00d              ADD      sp,sp,#0x34
000188  e8bd8ff0          POP      {r4-r11,pc}
;;;277    
                          ENDP


                          AREA ||i.CRYP_AES_GCM||, CODE, READONLY, ALIGN=1

                  CRYP_AES_GCM PROC
;;;669      */
;;;670    ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;671                             uint8_t *Key, uint16_t Keysize,
;;;672                             uint8_t *Input, uint32_t ILength,
;;;673                             uint8_t *Header, uint32_t HLength,
;;;674                             uint8_t *Output, uint8_t *AuthTAG)
;;;675    {
000004  b095              SUB      sp,sp,#0x54
;;;676      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;677      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;678      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;679      __IO uint32_t counter = 0;
;;;680      uint32_t busystatus = 0;
;;;681      ErrorStatus status = SUCCESS;
;;;682      uint32_t keyaddr    = (uint32_t)Key;
;;;683      uint32_t inputaddr  = (uint32_t)Input;
;;;684      uint32_t outputaddr = (uint32_t)Output;
;;;685      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;686      uint32_t headeraddr = (uint32_t)Header;
;;;687      uint32_t tagaddr = (uint32_t)AuthTAG;
;;;688      uint64_t headerlength = HLength * 8;/* header length in bits */
000006  f04f0c00          MOV      r12,#0
00000a  e9dd9525          LDRD     r9,r5,[sp,#0x94]      ;675
00000e  e9dd4a22          LDRD     r4,r10,[sp,#0x88]     ;675
000012  4690              MOV      r8,r2                 ;682
;;;689      uint64_t inputlength = ILength * 8;/* input length in bits */
000014  ea4f00ca          LSL      r0,r10,#3
000018  9e24              LDR      r6,[sp,#0x90]         ;685
00001a  ea4f02c9          LSL      r2,r9,#3              ;688
00001e  e9cd0c12          STRD     r0,r12,[sp,#0x48]
000022  e9cd2c10          STRD     r2,r12,[sp,#0x40]
000026  469b              MOV      r11,r3                ;675
000028  2701              MOVS     r7,#1                 ;681
00002a  9114              STR      r1,[sp,#0x50]
;;;690      uint32_t loopcounter = 0;
;;;691    
;;;692      /* Crypto structures initialisation*/
;;;693      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       CRYP_KeyStructInit
;;;694    
;;;695      switch(Keysize)
000032  f1bb0f80          CMP      r11,#0x80
000036  d026              BEQ      |L5.134|
000038  0239              LSLS     r1,r7,#8
00003a  f1bb0fc0          CMP      r11,#0xc0
00003e  d033              BEQ      |L5.168|
000040  458b              CMP      r11,r1
000042  d14a              BNE      |L5.218|
;;;696      {
;;;697        case 128:
;;;698        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
;;;699        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;700        keyaddr+=4;
;;;701        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;702        keyaddr+=4;
;;;703        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;704        keyaddr+=4;
;;;705        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;706        break;
;;;707        case 192:
;;;708        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
;;;709        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
;;;710        keyaddr+=4;
;;;711        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
;;;712        keyaddr+=4;
;;;713        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
;;;714        keyaddr+=4;
;;;715        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
;;;716        keyaddr+=4;
;;;717        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
;;;718        keyaddr+=4;
;;;719        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
;;;720        break;
;;;721        case 256:
;;;722        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000044  0048              LSLS     r0,r1,#1
;;;723        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
000046  900b              STR      r0,[sp,#0x2c]
000048  f8d80000          LDR      r0,[r8,#0]
00004c  ba00              REV      r0,r0
;;;724        keyaddr+=4;
;;;725        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
00004e  9000              STR      r0,[sp,#0]
000050  f8d82004          LDR      r2,[r8,#4]
000054  ba12              REV      r2,r2
;;;726        keyaddr+=4;
;;;727        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000056  9201              STR      r2,[sp,#4]
000058  f8d82008          LDR      r2,[r8,#8]
00005c  ba12              REV      r2,r2
;;;728        keyaddr+=4;
;;;729        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00005e  9202              STR      r2,[sp,#8]
000060  f8d8200c          LDR      r2,[r8,#0xc]
000064  ba12              REV      r2,r2
;;;730        keyaddr+=4;
;;;731        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000066  9203              STR      r2,[sp,#0xc]
000068  f8d82010          LDR      r2,[r8,#0x10]
00006c  ba12              REV      r2,r2
;;;732        keyaddr+=4;
;;;733        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00006e  9204              STR      r2,[sp,#0x10]
000070  f8d82014          LDR      r2,[r8,#0x14]
000074  ba12              REV      r2,r2
;;;734        keyaddr+=4;
;;;735        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000076  9205              STR      r2,[sp,#0x14]
000078  f8d82018          LDR      r2,[r8,#0x18]
00007c  ba12              REV      r2,r2
;;;736        keyaddr+=4;
;;;737        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00007e  9206              STR      r2,[sp,#0x18]
;;;738        break;
000080  f8d8201c          LDR      r2,[r8,#0x1c]
000084  e027              B        |L5.214|
                  |L5.134|
000086  2000              MOVS     r0,#0                 ;698
000088  900b              STR      r0,[sp,#0x2c]         ;699
00008a  f8d80000          LDR      r0,[r8,#0]            ;699
00008e  ba00              REV      r0,r0                 ;699
000090  9004              STR      r0,[sp,#0x10]         ;701
000092  f8d82004          LDR      r2,[r8,#4]            ;701
000096  ba12              REV      r2,r2                 ;701
000098  9205              STR      r2,[sp,#0x14]         ;703
00009a  f8d82008          LDR      r2,[r8,#8]            ;703
00009e  ba12              REV      r2,r2                 ;703
0000a0  9206              STR      r2,[sp,#0x18]         ;705
0000a2  f8d8200c          LDR      r2,[r8,#0xc]          ;706
0000a6  e016              B        |L5.214|
                  |L5.168|
0000a8  910b              STR      r1,[sp,#0x2c]         ;709
0000aa  f8d80000          LDR      r0,[r8,#0]            ;709
0000ae  ba00              REV      r0,r0                 ;709
0000b0  9002              STR      r0,[sp,#8]            ;711
0000b2  f8d82004          LDR      r2,[r8,#4]            ;711
0000b6  ba12              REV      r2,r2                 ;711
0000b8  9203              STR      r2,[sp,#0xc]          ;713
0000ba  f8d82008          LDR      r2,[r8,#8]            ;713
0000be  ba12              REV      r2,r2                 ;713
0000c0  9204              STR      r2,[sp,#0x10]         ;715
0000c2  f8d8200c          LDR      r2,[r8,#0xc]          ;715
0000c6  ba12              REV      r2,r2                 ;715
0000c8  9205              STR      r2,[sp,#0x14]         ;717
0000ca  f8d82010          LDR      r2,[r8,#0x10]         ;717
0000ce  ba12              REV      r2,r2                 ;717
0000d0  9206              STR      r2,[sp,#0x18]         ;719
0000d2  f8d82014          LDR      r2,[r8,#0x14]         ;719
                  |L5.214|
0000d6  ba12              REV      r2,r2                 ;705
0000d8  9207              STR      r2,[sp,#0x1c]         ;705
                  |L5.218|
;;;739        default:
;;;740        break;
;;;741      }
;;;742      
;;;743      /* CRYP Initialization Vectors */
;;;744      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000da  9914              LDR      r1,[sp,#0x50]
;;;745      ivaddr+=4;
;;;746      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
;;;747      ivaddr+=4;
;;;748      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
;;;749      ivaddr+=4;
;;;750      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
;;;751      
;;;752      /*------------------ AES Encryption ------------------*/
;;;753      if(Mode == MODE_ENCRYPT) /* AES encryption */
0000dc  9815              LDR      r0,[sp,#0x54]
;;;754      {
;;;755        /* Flush IN/OUT FIFOs */
;;;756        CRYP_FIFOFlush();
;;;757        
;;;758        /* Key Initialisation */
;;;759        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
;;;760        
;;;761        /* CRYP Initialization Vectors */
;;;762        CRYP_IVInit(&AES_CRYP_IVInitStructure);
;;;763        
;;;764        /* Crypto Init for Key preparation for decryption process */
;;;765        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;766        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
0000de  f44f2800          MOV      r8,#0x80000
0000e2  680a              LDR      r2,[r1,#0]            ;744
;;;767        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
;;;768        CRYP_Init(&AES_CRYP_InitStructure);
;;;769        
;;;770        /***************************** Init phase *********************************/
;;;771        /* Select init phase */
;;;772        CRYP_PhaseConfig(CRYP_Phase_Init);
;;;773        
;;;774        /* Enable Crypto processor */
;;;775        CRYP_Cmd(ENABLE);
;;;776        
;;;777        /* Wait for CRYPEN bit to be 0 */
;;;778        while(CRYP_GetCmdStatus() == ENABLE)
;;;779        {
;;;780        }
;;;781        
;;;782        /***************************** header phase *******************************/
;;;783        if(HLength != 0)
;;;784        {
;;;785          /* Select header phase */
;;;786          CRYP_PhaseConfig(CRYP_Phase_Header);
0000e4  f44f3b80          MOV      r11,#0x10000
0000e8  ba12              REV      r2,r2                 ;744
0000ea  920c              STR      r2,[sp,#0x30]         ;746
0000ec  684a              LDR      r2,[r1,#4]            ;746
0000ee  2801              CMP      r0,#1                 ;753
0000f0  ba12              REV      r2,r2                 ;746
0000f2  920d              STR      r2,[sp,#0x34]         ;748
0000f4  688a              LDR      r2,[r1,#8]            ;748
0000f6  ba12              REV      r2,r2                 ;748
0000f8  920e              STR      r2,[sp,#0x38]         ;750
0000fa  68c9              LDR      r1,[r1,#0xc]          ;750
0000fc  ba09              REV      r1,r1                 ;750
0000fe  910f              STR      r1,[sp,#0x3c]         ;753
000100  d029              BEQ      |L5.342|
;;;787          
;;;788          /* Enable Crypto processor */
;;;789          CRYP_Cmd(ENABLE);
;;;790          
;;;791          if(CRYP_GetCmdStatus() == DISABLE)
;;;792          {
;;;793             /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;794                the CRYP peripheral (please check the device sales type. */
;;;795             return(ERROR);
;;;796          }
;;;797          
;;;798          for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
;;;799          {
;;;800            /* Wait until the IFEM flag is reset */
;;;801            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;802            {
;;;803            }
;;;804            
;;;805            /* Write the Input block in the IN FIFO */
;;;806            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;807            headeraddr+=4;
;;;808            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;809            headeraddr+=4;
;;;810            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;811            headeraddr+=4;
;;;812            CRYP_DataIn(*(uint32_t*)(headeraddr));
;;;813            headeraddr+=4;
;;;814          }
;;;815          
;;;816          /* Wait until the complete message has been processed */
;;;817          counter = 0;
;;;818          do
;;;819          {
;;;820            busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;821            counter++;
;;;822          }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;823    
;;;824          if (busystatus != RESET)
;;;825          {
;;;826            status = ERROR;
;;;827          }
;;;828        }
;;;829        
;;;830        /**************************** payload phase *******************************/
;;;831        if(ILength != 0)
;;;832        {
;;;833          /* Select payload phase */
;;;834          CRYP_PhaseConfig(CRYP_Phase_Payload);
;;;835          
;;;836          /* Enable Crypto processor */
;;;837          CRYP_Cmd(ENABLE);
;;;838          
;;;839          if(CRYP_GetCmdStatus() == DISABLE)
;;;840          {
;;;841            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;842               the CRYP peripheral (please check the device sales type. */
;;;843            return(ERROR);
;;;844          }
;;;845          
;;;846          for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
;;;847          {
;;;848            /* Wait until the IFEM flag is reset */
;;;849            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
;;;850            {
;;;851            }
;;;852            /* Write the Input block in the IN FIFO */
;;;853            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;854            inputaddr+=4;
;;;855            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;856            inputaddr+=4;
;;;857            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;858            inputaddr+=4;
;;;859            CRYP_DataIn(*(uint32_t*)(inputaddr));
;;;860            inputaddr+=4;
;;;861            
;;;862            /* Wait until the complete message has been processed */
;;;863            counter = 0;
;;;864            do
;;;865            {
;;;866              busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;867              counter++;
;;;868            }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
;;;869    
;;;870            if (busystatus != RESET)
;;;871            {
;;;872              status = ERROR;
;;;873            }
;;;874            else
;;;875            {
;;;876              /* Wait until the OFNE flag is reset */
;;;877              while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;878              {
;;;879              }
;;;880              
;;;881              /* Read the Output block from the Output FIFO */
;;;882              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;883              outputaddr+=4;
;;;884              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;885              outputaddr+=4;
;;;886              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;887              outputaddr+=4;
;;;888              *(uint32_t*)(outputaddr) = CRYP_DataOut();
;;;889              outputaddr+=4;
;;;890            }
;;;891          }
;;;892        }
;;;893        
;;;894        /***************************** final phase ********************************/
;;;895        /* Select final phase */
;;;896        CRYP_PhaseConfig(CRYP_Phase_Final);
;;;897        
;;;898        /* Enable Crypto processor */
;;;899        CRYP_Cmd(ENABLE);
;;;900        
;;;901        if(CRYP_GetCmdStatus() == DISABLE)
;;;902        {
;;;903          /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;904             the CRYP peripheral (please check the device sales type. */
;;;905          return(ERROR);
;;;906        }
;;;907        
;;;908        /* Write number of bits concatenated with header in the IN FIFO */
;;;909        CRYP_DataIn(__REV(headerlength>>32));
;;;910        CRYP_DataIn(__REV(headerlength));
;;;911        CRYP_DataIn(__REV(inputlength>>32));
;;;912        CRYP_DataIn(__REV(inputlength));
;;;913        /* Wait until the OFNE flag is reset */
;;;914        while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
;;;915        {
;;;916        }
;;;917        
;;;918        tagaddr = (uint32_t)AuthTAG;
;;;919        /* Read the Auth TAG in the IN FIFO */
;;;920        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;921        tagaddr+=4;
;;;922        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;923        tagaddr+=4;
;;;924        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;925        tagaddr+=4;
;;;926        *(uint32_t*)(tagaddr) = CRYP_DataOut();
;;;927        tagaddr+=4;
;;;928      }
;;;929      /*------------------ AES Decryption ------------------*/
;;;930      else /* AES decryption */
;;;931      {
;;;932        /* Flush IN/OUT FIFOs */
;;;933        CRYP_FIFOFlush();
000102  f7fffffe          BL       CRYP_FIFOFlush
;;;934        
;;;935        /* Key Initialisation */
;;;936        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000106  4668              MOV      r0,sp
000108  f7fffffe          BL       CRYP_KeyInit
;;;937        
;;;938        /* CRYP Initialization Vectors */
;;;939        CRYP_IVInit(&AES_CRYP_IVInitStructure);
00010c  a80c              ADD      r0,sp,#0x30
00010e  f7fffffe          BL       CRYP_IVInit
;;;940        
;;;941        /* Crypto Init for Key preparation for decryption process */
;;;942        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000112  2004              MOVS     r0,#4
000114  e9cd0808          STRD     r0,r8,[sp,#0x20]
;;;943        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
;;;944        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000118  2080              MOVS     r0,#0x80
;;;945        CRYP_Init(&AES_CRYP_InitStructure);
00011a  900a              STR      r0,[sp,#0x28]
00011c  a808              ADD      r0,sp,#0x20
00011e  f7fffffe          BL       CRYP_Init
;;;946        
;;;947        /***************************** Init phase *********************************/
;;;948        /* Select init phase */
;;;949        CRYP_PhaseConfig(CRYP_Phase_Init);
000122  2000              MOVS     r0,#0
000124  f7fffffe          BL       CRYP_PhaseConfig
;;;950        
;;;951        /* Enable Crypto processor */
;;;952        CRYP_Cmd(ENABLE);
000128  2001              MOVS     r0,#1
00012a  f7fffffe          BL       CRYP_Cmd
                  |L5.302|
;;;953        
;;;954        /* Wait for CRYPEN bit to be 0 */
;;;955        while(CRYP_GetCmdStatus() == ENABLE)
00012e  f7fffffe          BL       CRYP_GetCmdStatus
000132  2801              CMP      r0,#1
000134  d0fb              BEQ      |L5.302|
;;;956        {
;;;957        }
;;;958        
;;;959        /***************************** header phase *******************************/
;;;960        if(HLength != 0)
000136  f1b90f00          CMP      r9,#0
00013a  d07c              BEQ      |L5.566|
;;;961        {
;;;962          /* Select header phase */
;;;963          CRYP_PhaseConfig(CRYP_Phase_Header);
00013c  4658              MOV      r0,r11
00013e  f7fffffe          BL       CRYP_PhaseConfig
;;;964          
;;;965          /* Enable Crypto processor */
;;;966          CRYP_Cmd(ENABLE);
000142  2001              MOVS     r0,#1
000144  f7fffffe          BL       CRYP_Cmd
;;;967          
;;;968          if(CRYP_GetCmdStatus() == DISABLE)
000148  f7fffffe          BL       CRYP_GetCmdStatus
00014c  2800              CMP      r0,#0
00014e  d073              BEQ      |L5.568|
;;;969          {
;;;970            /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;971               the CRYP peripheral (please check the device sales type. */
;;;972            return(ERROR);
;;;973          }
;;;974          
;;;975          for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
000150  f04f0800          MOV      r8,#0
000154  e0d5              B        |L5.770|
                  |L5.342|
000156  f7fffffe          BL       CRYP_FIFOFlush
00015a  4668              MOV      r0,sp                 ;759
00015c  f7fffffe          BL       CRYP_KeyInit
000160  a80c              ADD      r0,sp,#0x30           ;762
000162  f7fffffe          BL       CRYP_IVInit
000166  2000              MOVS     r0,#0                 ;765
000168  e9cd0808          STRD     r0,r8,[sp,#0x20]      ;765
00016c  2080              MOVS     r0,#0x80              ;767
00016e  900a              STR      r0,[sp,#0x28]         ;768
000170  a808              ADD      r0,sp,#0x20           ;768
000172  f7fffffe          BL       CRYP_Init
000176  2000              MOVS     r0,#0                 ;772
000178  f7fffffe          BL       CRYP_PhaseConfig
00017c  2001              MOVS     r0,#1                 ;775
00017e  f7fffffe          BL       CRYP_Cmd
                  |L5.386|
000182  f7fffffe          BL       CRYP_GetCmdStatus
000186  2801              CMP      r0,#1                 ;778
000188  d0fb              BEQ      |L5.386|
00018a  f1b90f00          CMP      r9,#0                 ;783
00018e  d032              BEQ      |L5.502|
000190  4658              MOV      r0,r11                ;786
000192  f7fffffe          BL       CRYP_PhaseConfig
000196  2001              MOVS     r0,#1                 ;789
000198  f7fffffe          BL       CRYP_Cmd
00019c  f7fffffe          BL       CRYP_GetCmdStatus
0001a0  2800              CMP      r0,#0                 ;791
0001a2  d049              BEQ      |L5.568|
0001a4  f04f0800          MOV      r8,#0                 ;798
0001a8  e016              B        |L5.472|
                  |L5.426|
0001aa  2001              MOVS     r0,#1                 ;801
0001ac  f7fffffe          BL       CRYP_GetFlagStatus
0001b0  2800              CMP      r0,#0                 ;801
0001b2  d0fa              BEQ      |L5.426|
0001b4  6830              LDR      r0,[r6,#0]            ;806
0001b6  f7fffffe          BL       CRYP_DataIn
0001ba  f8560f04          LDR      r0,[r6,#4]!           ;808
0001be  f7fffffe          BL       CRYP_DataIn
0001c2  f8560f04          LDR      r0,[r6,#4]!           ;810
0001c6  f7fffffe          BL       CRYP_DataIn
0001ca  f8560f04          LDR      r0,[r6,#4]!           ;812
0001ce  f7fffffe          BL       CRYP_DataIn
0001d2  1d36              ADDS     r6,r6,#4              ;813
0001d4  f1080810          ADD      r8,r8,#0x10           ;798
                  |L5.472|
0001d8  45c8              CMP      r8,r9                 ;798
0001da  d3e6              BCC      |L5.426|
0001dc  2600              MOVS     r6,#0                 ;817
0001de  46d8              MOV      r8,r11                ;786
                  |L5.480|
0001e0  2010              MOVS     r0,#0x10              ;820
0001e2  f7fffffe          BL       CRYP_GetFlagStatus
0001e6  1c76              ADDS     r6,r6,#1              ;821
0001e8  4546              CMP      r6,r8                 ;822
0001ea  d002              BEQ      |L5.498|
0001ec  2800              CMP      r0,#0                 ;822
0001ee  d1f7              BNE      |L5.480|
0001f0  e001              B        |L5.502|
                  |L5.498|
0001f2  b100              CBZ      r0,|L5.502|
0001f4  2700              MOVS     r7,#0                 ;826
                  |L5.502|
0001f6  f1ba0f00          CMP      r10,#0                ;831
0001fa  d04a              BEQ      |L5.658|
0001fc  f44f3000          MOV      r0,#0x20000           ;834
000200  f7fffffe          BL       CRYP_PhaseConfig
000204  2001              MOVS     r0,#1                 ;837
000206  f7fffffe          BL       CRYP_Cmd
00020a  f7fffffe          BL       CRYP_GetCmdStatus
00020e  2800              CMP      r0,#0                 ;839
000210  d012              BEQ      |L5.568|
000212  f04f0800          MOV      r8,#0                 ;846
000216  e038              B        |L5.650|
                  |L5.536|
000218  2001              MOVS     r0,#1                 ;849
00021a  f7fffffe          BL       CRYP_GetFlagStatus
00021e  2800              CMP      r0,#0                 ;849
000220  d0fa              BEQ      |L5.536|
000222  6820              LDR      r0,[r4,#0]            ;853
000224  f7fffffe          BL       CRYP_DataIn
000228  f8540f04          LDR      r0,[r4,#4]!           ;855
00022c  f7fffffe          BL       CRYP_DataIn
000230  f8540f04          LDR      r0,[r4,#4]!           ;857
000234  e001              B        |L5.570|
                  |L5.566|
000236  e073              B        |L5.800|
                  |L5.568|
000238  e0a5              B        |L5.902|
                  |L5.570|
00023a  f7fffffe          BL       CRYP_DataIn
00023e  f8540f04          LDR      r0,[r4,#4]!           ;859
000242  f7fffffe          BL       CRYP_DataIn
000246  1d24              ADDS     r4,r4,#4              ;860
000248  2600              MOVS     r6,#0                 ;863
                  |L5.586|
00024a  2010              MOVS     r0,#0x10              ;866
00024c  f7fffffe          BL       CRYP_GetFlagStatus
000250  1c76              ADDS     r6,r6,#1              ;867
000252  455e              CMP      r6,r11                ;868
000254  d002              BEQ      |L5.604|
000256  2800              CMP      r0,#0                 ;868
000258  d1f7              BNE      |L5.586|
00025a  e002              B        |L5.610|
                  |L5.604|
00025c  b108              CBZ      r0,|L5.610|
00025e  2700              MOVS     r7,#0                 ;872
000260  e011              B        |L5.646|
                  |L5.610|
000262  2004              MOVS     r0,#4                 ;877
000264  f7fffffe          BL       CRYP_GetFlagStatus
000268  2800              CMP      r0,#0                 ;877
00026a  d0fa              BEQ      |L5.610|
00026c  f7fffffe          BL       CRYP_DataOut
000270  6028              STR      r0,[r5,#0]            ;884
000272  f7fffffe          BL       CRYP_DataOut
000276  6068              STR      r0,[r5,#4]            ;886
000278  f7fffffe          BL       CRYP_DataOut
00027c  60a8              STR      r0,[r5,#8]            ;888
00027e  f7fffffe          BL       CRYP_DataOut
000282  60e8              STR      r0,[r5,#0xc]          ;888
000284  3510              ADDS     r5,r5,#0x10           ;888
                  |L5.646|
000286  f1080810          ADD      r8,r8,#0x10           ;846
                  |L5.650|
00028a  45d0              CMP      r8,r10                ;846
00028c  d201              BCS      |L5.658|
00028e  2f00              CMP      r7,#0                 ;846
000290  d1c2              BNE      |L5.536|
                  |L5.658|
000292  f44f3040          MOV      r0,#0x30000           ;896
000296  f7fffffe          BL       CRYP_PhaseConfig
00029a  2001              MOVS     r0,#1                 ;899
00029c  f7fffffe          BL       CRYP_Cmd
0002a0  f7fffffe          BL       CRYP_GetCmdStatus
0002a4  2800              CMP      r0,#0                 ;901
0002a6  d06e              BEQ      |L5.902|
0002a8  9811              LDR      r0,[sp,#0x44]         ;909
0002aa  ba00              REV      r0,r0                 ;909
0002ac  f7fffffe          BL       CRYP_DataIn
0002b0  9810              LDR      r0,[sp,#0x40]         ;910
0002b2  ba00              REV      r0,r0                 ;910
0002b4  f7fffffe          BL       CRYP_DataIn
0002b8  9813              LDR      r0,[sp,#0x4c]         ;911
0002ba  ba00              REV      r0,r0                 ;911
0002bc  f7fffffe          BL       CRYP_DataIn
0002c0  9812              LDR      r0,[sp,#0x48]         ;912
0002c2  ba00              REV      r0,r0                 ;912
0002c4  f7fffffe          BL       CRYP_DataIn
                  |L5.712|
0002c8  2004              MOVS     r0,#4                 ;914
0002ca  f7fffffe          BL       CRYP_GetFlagStatus
0002ce  2800              CMP      r0,#0                 ;914
0002d0  d0fa              BEQ      |L5.712|
0002d2  e091              B        |L5.1016|
                  |L5.724|
;;;976          {
;;;977            /* Wait until the IFEM flag is reset */
;;;978            while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
0002d4  2001              MOVS     r0,#1
0002d6  f7fffffe          BL       CRYP_GetFlagStatus
0002da  2800              CMP      r0,#0
0002dc  d0fa              BEQ      |L5.724|
;;;979            {
;;;980            }
;;;981            
;;;982            /* Write the Input block in the IN FIFO */
;;;983            CRYP_DataIn(*(uint32_t*)(headeraddr));
0002de  6830              LDR      r0,[r6,#0]
0002e0  f7fffffe          BL       CRYP_DataIn
;;;984            headeraddr+=4;
;;;985            CRYP_DataIn(*(uint32_t*)(headeraddr));
0002e4  f8560f04          LDR      r0,[r6,#4]!
0002e8  f7fffffe          BL       CRYP_DataIn
;;;986            headeraddr+=4;
;;;987            CRYP_DataIn(*(uint32_t*)(headeraddr));
0002ec  f8560f04          LDR      r0,[r6,#4]!
0002f0  f7fffffe          BL       CRYP_DataIn
;;;988            headeraddr+=4;
;;;989            CRYP_DataIn(*(uint32_t*)(headeraddr));
0002f4  f8560f04          LDR      r0,[r6,#4]!
0002f8  f7fffffe          BL       CRYP_DataIn
;;;990            headeraddr+=4;
0002fc  1d36              ADDS     r6,r6,#4
0002fe  f1080810          ADD      r8,r8,#0x10           ;975
                  |L5.770|
000302  45c8              CMP      r8,r9                 ;975
000304  d3e6              BCC      |L5.724|
;;;991          }
;;;992          
;;;993          /* Wait until the complete message has been processed */
;;;994          counter = 0;
000306  2600              MOVS     r6,#0
000308  46d8              MOV      r8,r11                ;786
                  |L5.778|
;;;995          do
;;;996          {
;;;997            busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00030a  2010              MOVS     r0,#0x10
00030c  f7fffffe          BL       CRYP_GetFlagStatus
;;;998            counter++;
000310  1c76              ADDS     r6,r6,#1
;;;999          }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000312  4546              CMP      r6,r8
000314  d002              BEQ      |L5.796|
000316  2800              CMP      r0,#0
000318  d1f7              BNE      |L5.778|
00031a  e001              B        |L5.800|
                  |L5.796|
;;;1000   
;;;1001         if (busystatus != RESET)
00031c  b100              CBZ      r0,|L5.800|
;;;1002         {
;;;1003           status = ERROR;
00031e  2700              MOVS     r7,#0
                  |L5.800|
;;;1004         }
;;;1005       }
;;;1006       
;;;1007       /**************************** payload phase *******************************/
;;;1008       if(ILength != 0)
000320  f1ba0f00          CMP      r10,#0
000324  d048              BEQ      |L5.952|
;;;1009       {
;;;1010         /* Select payload phase */
;;;1011         CRYP_PhaseConfig(CRYP_Phase_Payload);
000326  f44f3000          MOV      r0,#0x20000
00032a  f7fffffe          BL       CRYP_PhaseConfig
;;;1012   
;;;1013         /* Enable Crypto processor */
;;;1014         CRYP_Cmd(ENABLE);
00032e  2001              MOVS     r0,#1
000330  f7fffffe          BL       CRYP_Cmd
;;;1015         
;;;1016         if(CRYP_GetCmdStatus() == DISABLE)
000334  f7fffffe          BL       CRYP_GetCmdStatus
000338  2800              CMP      r0,#0
00033a  d06e              BEQ      |L5.1050|
;;;1017         {
;;;1018           /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1019              the CRYP peripheral (please check the device sales type. */
;;;1020           return(ERROR);
;;;1021         }
;;;1022         
;;;1023         for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
00033c  f04f0800          MOV      r8,#0
000340  e036              B        |L5.944|
                  |L5.834|
;;;1024         {
;;;1025           /* Wait until the IFEM flag is reset */
;;;1026           while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
000342  2001              MOVS     r0,#1
000344  f7fffffe          BL       CRYP_GetFlagStatus
000348  2800              CMP      r0,#0
00034a  d0fa              BEQ      |L5.834|
;;;1027           {
;;;1028           }
;;;1029           /* Write the Input block in the IN FIFO */
;;;1030           CRYP_DataIn(*(uint32_t*)(inputaddr));
00034c  6820              LDR      r0,[r4,#0]
00034e  f7fffffe          BL       CRYP_DataIn
;;;1031           inputaddr+=4;
;;;1032           CRYP_DataIn(*(uint32_t*)(inputaddr));
000352  f8540f04          LDR      r0,[r4,#4]!
000356  f7fffffe          BL       CRYP_DataIn
;;;1033           inputaddr+=4;
;;;1034           CRYP_DataIn(*(uint32_t*)(inputaddr));
00035a  f8540f04          LDR      r0,[r4,#4]!
00035e  f7fffffe          BL       CRYP_DataIn
;;;1035           inputaddr+=4;
;;;1036           CRYP_DataIn(*(uint32_t*)(inputaddr));
000362  f8540f04          LDR      r0,[r4,#4]!
000366  f7fffffe          BL       CRYP_DataIn
;;;1037           inputaddr+=4;
00036a  1d24              ADDS     r4,r4,#4
;;;1038           
;;;1039           /* Wait until the complete message has been processed */
;;;1040           counter = 0;
00036c  2600              MOVS     r6,#0
                  |L5.878|
;;;1041           do
;;;1042           {
;;;1043             busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00036e  2010              MOVS     r0,#0x10
000370  f7fffffe          BL       CRYP_GetFlagStatus
;;;1044             counter++;
000374  1c76              ADDS     r6,r6,#1
;;;1045           }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000376  455e              CMP      r6,r11
000378  d002              BEQ      |L5.896|
00037a  2800              CMP      r0,#0
00037c  d1f7              BNE      |L5.878|
00037e  e003              B        |L5.904|
                  |L5.896|
;;;1046   
;;;1047           if (busystatus != RESET)
000380  b110              CBZ      r0,|L5.904|
;;;1048           {
;;;1049             status = ERROR;
000382  2700              MOVS     r7,#0
000384  e012              B        |L5.940|
                  |L5.902|
000386  e048              B        |L5.1050|
                  |L5.904|
;;;1050           }
;;;1051           else
;;;1052           {
;;;1053             /* Wait until the OFNE flag is reset */
;;;1054             while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
000388  2004              MOVS     r0,#4
00038a  f7fffffe          BL       CRYP_GetFlagStatus
00038e  2800              CMP      r0,#0
000390  d0fa              BEQ      |L5.904|
;;;1055             {
;;;1056             }
;;;1057             
;;;1058             /* Read the Output block from the Output FIFO */
;;;1059             *(uint32_t*)(outputaddr) = CRYP_DataOut();
000392  f7fffffe          BL       CRYP_DataOut
;;;1060             outputaddr+=4;
;;;1061             *(uint32_t*)(outputaddr) = CRYP_DataOut();
000396  6028              STR      r0,[r5,#0]
000398  f7fffffe          BL       CRYP_DataOut
;;;1062             outputaddr+=4;
;;;1063             *(uint32_t*)(outputaddr) = CRYP_DataOut();
00039c  6068              STR      r0,[r5,#4]
00039e  f7fffffe          BL       CRYP_DataOut
;;;1064             outputaddr+=4;
;;;1065             *(uint32_t*)(outputaddr) = CRYP_DataOut();
0003a2  60a8              STR      r0,[r5,#8]
0003a4  f7fffffe          BL       CRYP_DataOut
0003a8  60e8              STR      r0,[r5,#0xc]
0003aa  3510              ADDS     r5,r5,#0x10
                  |L5.940|
0003ac  f1080810          ADD      r8,r8,#0x10           ;1023
                  |L5.944|
0003b0  45d0              CMP      r8,r10                ;1023
0003b2  d201              BCS      |L5.952|
0003b4  2f00              CMP      r7,#0                 ;1023
0003b6  d1c4              BNE      |L5.834|
                  |L5.952|
;;;1066             outputaddr+=4;
;;;1067           }
;;;1068         }
;;;1069       }
;;;1070       
;;;1071       /***************************** final phase ********************************/
;;;1072       /* Select final phase */
;;;1073       CRYP_PhaseConfig(CRYP_Phase_Final);
0003b8  f44f3040          MOV      r0,#0x30000
0003bc  f7fffffe          BL       CRYP_PhaseConfig
;;;1074   
;;;1075       /* Enable Crypto processor */
;;;1076       CRYP_Cmd(ENABLE);
0003c0  2001              MOVS     r0,#1
0003c2  f7fffffe          BL       CRYP_Cmd
;;;1077       
;;;1078       if(CRYP_GetCmdStatus() == DISABLE)
0003c6  f7fffffe          BL       CRYP_GetCmdStatus
0003ca  2800              CMP      r0,#0
0003cc  d025              BEQ      |L5.1050|
;;;1079       {
;;;1080         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;1081            the CRYP peripheral (please check the device sales type. */
;;;1082         return(ERROR);
;;;1083       }
;;;1084       
;;;1085       /* Write number of bits concatenated with header in the IN FIFO */
;;;1086       CRYP_DataIn(__REV(headerlength>>32));
0003ce  9811              LDR      r0,[sp,#0x44]
0003d0  ba00              REV      r0,r0
0003d2  f7fffffe          BL       CRYP_DataIn
;;;1087       CRYP_DataIn(__REV(headerlength));
0003d6  9810              LDR      r0,[sp,#0x40]
0003d8  ba00              REV      r0,r0
0003da  f7fffffe          BL       CRYP_DataIn
;;;1088       CRYP_DataIn(__REV(inputlength>>32));
0003de  9813              LDR      r0,[sp,#0x4c]
0003e0  ba00              REV      r0,r0
0003e2  f7fffffe          BL       CRYP_DataIn
;;;1089       CRYP_DataIn(__REV(inputlength));
0003e6  9812              LDR      r0,[sp,#0x48]
0003e8  ba00              REV      r0,r0
0003ea  f7fffffe          BL       CRYP_DataIn
                  |L5.1006|
;;;1090       /* Wait until the OFNE flag is reset */
;;;1091       while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
0003ee  2004              MOVS     r0,#4
0003f0  f7fffffe          BL       CRYP_GetFlagStatus
0003f4  2800              CMP      r0,#0
0003f6  d0fa              BEQ      |L5.1006|
                  |L5.1016|
;;;1092       {
;;;1093       }
;;;1094       
;;;1095       tagaddr = (uint32_t)AuthTAG;
;;;1096       /* Read the Auth TAG in the IN FIFO */
;;;1097       *(uint32_t*)(tagaddr) = CRYP_DataOut();
0003f8  9c27              LDR      r4,[sp,#0x9c]
0003fa  f7fffffe          BL       CRYP_DataOut
;;;1098       tagaddr+=4;
;;;1099       *(uint32_t*)(tagaddr) = CRYP_DataOut();
0003fe  6020              STR      r0,[r4,#0]
000400  f7fffffe          BL       CRYP_DataOut
;;;1100       tagaddr+=4;
;;;1101       *(uint32_t*)(tagaddr) = CRYP_DataOut();
000404  6060              STR      r0,[r4,#4]
000406  f7fffffe          BL       CRYP_DataOut
;;;1102       tagaddr+=4;
;;;1103       *(uint32_t*)(tagaddr) = CRYP_DataOut();
00040a  60a0              STR      r0,[r4,#8]
00040c  f7fffffe          BL       CRYP_DataOut
;;;1104       tagaddr+=4;
;;;1105     }
;;;1106     /* Disable Crypto */
;;;1107     CRYP_Cmd(DISABLE);
000410  60e0              STR      r0,[r4,#0xc]
000412  2000              MOVS     r0,#0
000414  f7fffffe          BL       CRYP_Cmd
;;;1108   
;;;1109     return status;
000418  4638              MOV      r0,r7
                  |L5.1050|
;;;1110   }
00041a  b019              ADD      sp,sp,#0x64
00041c  e8bd8ff0          POP      {r4-r11,pc}
;;;1111   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_cryp_aes.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REVSH|
#line 128
|__asm___20_stm32f4xx_cryp_aes_c_c34cf6b8____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
