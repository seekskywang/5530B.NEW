; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\ad7689.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\ad7689.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\ad7689.crf ..\drive\AD7689.c]
                          THUMB

                          AREA ||i.AD7689_Delay||, CODE, READONLY, ALIGN=1

                  AD7689_Delay PROC
;;;421    /************************************************************************/
;;;422    void AD7689_Delay(void)
000000  f44f707a          MOV      r0,#0x3e8
;;;423    {
;;;424    	vu16 count ;
;;;425      for(count = 1000; count != 0; count--);
000004  e001              B        |L1.10|
                  |L1.6|
000006  1e40              SUBS     r0,r0,#1
000008  b280              UXTH     r0,r0
                  |L1.10|
00000a  2800              CMP      r0,#0
00000c  d1fb              BNE      |L1.6|
;;;426    }
00000e  4770              BX       lr
;;;427    void AD7689_Delay1(void)
                          ENDP


                          AREA ||i.AD7689_Delay1||, CODE, READONLY, ALIGN=1

                  AD7689_Delay1 PROC
;;;426    }
;;;427    void AD7689_Delay1(void)
000000  f64030b8          MOV      r0,#0xbb8
;;;428    {
;;;429    	vu16 count ;
;;;430      for(count = 3000; count != 0; count--);
000004  e001              B        |L2.10|
                  |L2.6|
000006  1e40              SUBS     r0,r0,#1
000008  b280              UXTH     r0,r0
                  |L2.10|
00000a  2800              CMP      r0,#0
00000c  d1fb              BNE      |L2.6|
;;;431    }
00000e  4770              BX       lr
;;;432    void AD7689_Scan_CH(void)
                          ENDP


                          AREA ||i.AD7689_InitializeSPI2||, CODE, READONLY, ALIGN=2

                  AD7689_InitializeSPI2 PROC
;;;280    void Bubble_sort(vu16 *D_temp,vu8 num);
;;;281    void AD7689_InitializeSPI2(void)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;282    {
;;;283    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;284      //SPI_InitTypeDef  SPI_InitStructure;
;;;285      /*!< SD_SPI_CS_GPIO, SD_SPI_MOSI_GPIO, SD_SPI_MISO_GPIO, SD_SPI_DETECT_GPIO 
;;;286           and SD_SPI_SCK_GPIO Periph clock enable 
;;;287    	// 	 RCC_AHBPeriphClockCmd(FLASH_CS_PIN_SCK|FLASH_SCK_PIN_SCK|FLASH_MISO_PIN_SCK | FLASH_MOSI_PIN_SCK, ENABLE);
;;;288      !< SD_SPI Periph clock enable */
;;;289    	/*RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
;;;290    	
;;;291    	GPIO_InitStructure.GPIO_Speed =GPIO_Speed_50MHz;
;;;292    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;293    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;294    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;//inv
;;;295    	GPIO_Init(GPIOA, &GPIO_InitStructure);//
;;;296      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_3;//PC2~3复用功能输出	
;;;297      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
;;;298      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
;;;299      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
;;;300      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
;;;301      GPIO_Init(GPIOC, &GPIO_InitStructure);//初始化
;;;302    	
;;;303    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;//PB10复用功能输出	
;;;304      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
;;;305      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
;;;306      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
;;;307      GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
;;;308      GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化
;;;309    	
;;;310      GPIO_PinAFConfig(GPIOC,GPIO_PinSource2,GPIO_AF_SPI2); //PC2复用为 SPI2
;;;311    	GPIO_PinAFConfig(GPIOC,GPIO_PinSource3,GPIO_AF_SPI2); //PBC3复用为 SPI2
;;;312    	GPIO_PinAFConfig(GPIOB,GPIO_PinSource10,GPIO_AF_SPI2); //PB13复用为 SPI2
;;;313    	AD7689_CNV_1;
;;;314    	AD7689_Delay();
;;;315    	AD7689_CNV_0;
;;;316    	//这里只针对SPI口初始化
;;;317      SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  //设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工
;;;318    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		//设置SPI工作模式:设置为主SPI
;;;319    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;		//设置SPI的数据大小:SPI发送接收16位帧结构
;;;320    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;		//串行同步时钟的空闲状态为高电平
;;;321    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;	//串行同步时钟的第二个跳变沿（上升或下降）数据被采样
;;;322    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;		//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制
;;;323    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;		//定义波特率预分频的值:波特率预分频值为256
;;;324    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始
;;;325    	SPI_InitStructure.SPI_CRCPolynomial = 7;	//CRC值计算的多项式
;;;326    	SPI_Init(SPI2, &SPI_InitStructure);  //根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器
;;;327    	
;;;328    	SPI_Cmd(SPI2, ENABLE);*/ //使能SPI外设*/
;;;329    	GPIO_InitStructure.GPIO_Speed =GPIO_Speed_50MHz;
000004  2602              MOVS     r6,#2
000006  f88d6005          STRB     r6,[sp,#5]
;;;330    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00000a  2401              MOVS     r4,#1
00000c  f88d4004          STRB     r4,[sp,#4]
;;;331    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000010  2500              MOVS     r5,#0
000012  f88d5006          STRB     r5,[sp,#6]
;;;332    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;//inv
000016  2040              MOVS     r0,#0x40
000018  9000              STR      r0,[sp,#0]
;;;333    	GPIO_Init(GPIOB, &GPIO_InitStructure);//
00001a  4f1a              LDR      r7,|L3.132|
00001c  4669              MOV      r1,sp
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       GPIO_Init
;;;334    
;;;335    	GPIO_InitStructure.GPIO_Speed =GPIO_Speed_50MHz;
000024  f88d6005          STRB     r6,[sp,#5]
;;;336    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000028  f88d4004          STRB     r4,[sp,#4]
;;;337    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002c  f88d5006          STRB     r5,[sp,#6]
;;;338    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;//sck,
000030  2008              MOVS     r0,#8
000032  9000              STR      r0,[sp,#0]
;;;339    	GPIO_Init(GPIOB, &GPIO_InitStructure);//
000034  4669              MOV      r1,sp
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       GPIO_Init
;;;340    	
;;;341    	GPIO_InitStructure.GPIO_Speed =GPIO_Speed_50MHz;
00003c  f88d6005          STRB     r6,[sp,#5]
;;;342    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000040  f88d4004          STRB     r4,[sp,#4]
;;;343    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000044  f88d5006          STRB     r5,[sp,#6]
;;;344    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;//MOSI
000048  2020              MOVS     r0,#0x20
00004a  9000              STR      r0,[sp,#0]
;;;345    	GPIO_Init(GPIOB, &GPIO_InitStructure);//
00004c  4669              MOV      r1,sp
00004e  4638              MOV      r0,r7
000050  f7fffffe          BL       GPIO_Init
;;;346    	
;;;347    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;;
000054  f88d5004          STRB     r5,[sp,#4]
;;;348    	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;;
000058  f88d4007          STRB     r4,[sp,#7]
;;;349    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;//MISO
00005c  2010              MOVS     r0,#0x10
00005e  9000              STR      r0,[sp,#0]
;;;350    	GPIO_Init(GPIOB, &GPIO_InitStructure);//
000060  4669              MOV      r1,sp
000062  4638              MOV      r0,r7
000064  f7fffffe          BL       GPIO_Init
;;;351    	
;;;352    	AD7689_CNV_1;
000068  2140              MOVS     r1,#0x40
00006a  4638              MOV      r0,r7
00006c  f7fffffe          BL       GPIO_SetBits
;;;353    	GPIO_SetBits(GPIOB,GPIO_Pin_5);//MOSI=0
000070  2120              MOVS     r1,#0x20
000072  4638              MOV      r0,r7
000074  f7fffffe          BL       GPIO_SetBits
;;;354    	GPIO_SetBits(GPIOB,GPIO_Pin_3);//SCK=0
000078  2108              MOVS     r1,#8
00007a  4638              MOV      r0,r7
00007c  f7fffffe          BL       GPIO_SetBits
;;;355    }
000080  e8bd81fc          POP      {r2-r8,pc}
;;;356    
                          ENDP

                  |L3.132|
                          DCD      0x40020400

                          AREA ||i.AD7689_Scan_CH||, CODE, READONLY, ALIGN=2

                  AD7689_Scan_CH PROC
;;;431    }
;;;432    void AD7689_Scan_CH(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;433    {
;;;434    	static vu8 I_cont,I1_cont,V_cont;
;;;435    	vu8 i,f;
;;;436    	vu32 sum1;
;;;437    	vu16 var_chI,var_chV,var_chV1;
;;;438    	for(i=0;i<8;i++)
000004  2400              MOVS     r4,#0
;;;439    		{
;;;440    			AD7689_Buffer[i]=SPI_AD7689_Read(1, i);
000006  4d37              LDR      r5,|L4.228|
000008  e00c              B        |L4.36|
                  |L4.10|
00000a  4621              MOV      r1,r4
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       SPI_AD7689_Read
000012  f8250014          STRH     r0,[r5,r4,LSL #1]
;;;441    			AD7689_Delay1();
000016  f7fffffe          BL       AD7689_Delay1
;;;442    			var_chI=AD7689_Buffer[3];
00001a  88e8              LDRH     r0,[r5,#6]  ; AD7689_Buffer
;;;443    			var_chV=AD7689_Buffer[2];
00001c  88af              LDRH     r7,[r5,#4]  ; AD7689_Buffer
;;;444    			var_chV1=AD7689_Buffer[4];
00001e  892e              LDRH     r6,[r5,#8]  ; AD7689_Buffer
000020  1c64              ADDS     r4,r4,#1              ;438
000022  b2e4              UXTB     r4,r4                 ;438
                  |L4.36|
000024  2c08              CMP      r4,#8                 ;438
000026  d3f0              BCC      |L4.10|
;;;445    		}
;;;446    	/***************电源电流滤波**********************/
;;;447    	Ad7689_Fit_Imon1[I1_cont++]=var_chI;
000028  4c2f              LDR      r4,|L4.232|
00002a  7861              LDRB     r1,[r4,#1]  ; I1_cont
00002c  1c4a              ADDS     r2,r1,#1
00002e  7062              STRB     r2,[r4,#1]
000030  f8df80b0          LDR      r8,|L4.228|
000034  f10808d8          ADD      r8,r8,#0xd8
000038  f8280011          STRH     r0,[r8,r1,LSL #1]
;;;448    	if(I1_cont==20)
00003c  7860              LDRB     r0,[r4,#1]  ; I1_cont
00003e  2500              MOVS     r5,#0                 ;438
000040  2814              CMP      r0,#0x14
000042  d100              BNE      |L4.70|
;;;449    	{
;;;450    		I1_cont=0;
000044  7065              STRB     r5,[r4,#1]
                  |L4.70|
;;;451    	}
;;;452    	Bubble_sort( Ad7689_Fit_Imon1,20);//排序从大到小
000046  4827              LDR      r0,|L4.228|
000048  2114              MOVS     r1,#0x14
00004a  30d8              ADDS     r0,r0,#0xd8
00004c  f7fffffe          BL       Bubble_sort
;;;453    	sum1=0;
000050  2100              MOVS     r1,#0
;;;454    	for(f=2;f<16;f++)
000052  2002              MOVS     r0,#2
000054  e004              B        |L4.96|
                  |L4.86|
;;;455    	{
;;;456    		sum1 +=Ad7689_Fit_Imon1[f];
000056  f8382010          LDRH     r2,[r8,r0,LSL #1]
00005a  4411              ADD      r1,r1,r2
00005c  1c40              ADDS     r0,r0,#1              ;454
00005e  b2c0              UXTB     r0,r0                 ;454
                  |L4.96|
000060  2810              CMP      r0,#0x10              ;454
000062  d3f8              BCC      |L4.86|
;;;457    	}
;;;458    	Imon_value=sum1/14;
000064  f04f080e          MOV      r8,#0xe
000068  fbb1f0f8          UDIV     r0,r1,r8
00006c  491f              LDR      r1,|L4.236|
00006e  8008              STRH     r0,[r1,#0]
;;;459    	/***************负载电压滤波**********************/
;;;460    	Ad7689_Fit_Vmon[V_cont++]=var_chV;
000070  78a0              LDRB     r0,[r4,#2]  ; V_cont
000072  1c41              ADDS     r1,r0,#1
000074  70a1              STRB     r1,[r4,#2]
000076  f8df9078          LDR      r9,|L4.240|
00007a  f8297010          STRH     r7,[r9,r0,LSL #1]
;;;461    	if(V_cont==20)
00007e  78a0              LDRB     r0,[r4,#2]  ; V_cont
000080  2814              CMP      r0,#0x14
000082  d100              BNE      |L4.134|
;;;462    	{
;;;463    		V_cont=0;
000084  70a5              STRB     r5,[r4,#2]
                  |L4.134|
;;;464    	}
;;;465    	Bubble_sort( Ad7689_Fit_Vmon,20);//排序从大到小
000086  2114              MOVS     r1,#0x14
000088  4819              LDR      r0,|L4.240|
00008a  f7fffffe          BL       Bubble_sort
;;;466    	sum1=0;
00008e  2100              MOVS     r1,#0
;;;467    	for(f=2;f<16;f++)
000090  2002              MOVS     r0,#2
000092  e004              B        |L4.158|
                  |L4.148|
;;;468    	{
;;;469    		sum1 +=Ad7689_Fit_Vmon[f];
000094  f8392010          LDRH     r2,[r9,r0,LSL #1]
000098  4411              ADD      r1,r1,r2
00009a  1c40              ADDS     r0,r0,#1              ;467
00009c  b2c0              UXTB     r0,r0                 ;467
                  |L4.158|
00009e  2810              CMP      r0,#0x10              ;467
0000a0  d3f8              BCC      |L4.148|
;;;470    	}
;;;471    	Vmon1_value=sum1/14;
0000a2  fbb1f0f8          UDIV     r0,r1,r8
0000a6  4913              LDR      r1,|L4.244|
0000a8  6008              STR      r0,[r1,#0]  ; Vmon1_value
;;;472    /***************负载电流滤波**********************/
;;;473    	Ad7689_Fit_Imon[I_cont++]=var_chV1;
0000aa  7820              LDRB     r0,[r4,#0]  ; I_cont
0000ac  1c41              ADDS     r1,r0,#1
0000ae  7021              STRB     r1,[r4,#0]
0000b0  4a0c              LDR      r2,|L4.228|
0000b2  3210              ADDS     r2,r2,#0x10
0000b4  f8226010          STRH     r6,[r2,r0,LSL #1]
;;;474    	if(I_cont==30)
0000b8  7820              LDRB     r0,[r4,#0]  ; I_cont
0000ba  281e              CMP      r0,#0x1e
0000bc  d100              BNE      |L4.192|
;;;475    	{
;;;476    		I_cont=0;
0000be  7025              STRB     r5,[r4,#0]
                  |L4.192|
;;;477    	}
;;;478    //	Bubble_sort( Ad7689_Fit_Imon,20);//排序从大到小
;;;479    	sum1=0;
0000c0  2100              MOVS     r1,#0
;;;480    	for(f=0;f<30;f++)
0000c2  2000              MOVS     r0,#0
0000c4  e004              B        |L4.208|
                  |L4.198|
;;;481    	{
;;;482    		sum1 +=Ad7689_Fit_Imon[f];
0000c6  f8323010          LDRH     r3,[r2,r0,LSL #1]
0000ca  4419              ADD      r1,r1,r3
0000cc  1c40              ADDS     r0,r0,#1              ;480
0000ce  b2c0              UXTB     r0,r0                 ;480
                  |L4.208|
0000d0  281e              CMP      r0,#0x1e              ;480
0000d2  d3f8              BCC      |L4.198|
;;;483    	}
;;;484    	Imon1_value=sum1/30;
0000d4  201e              MOVS     r0,#0x1e
0000d6  fbb1f0f0          UDIV     r0,r1,r0
0000da  4907              LDR      r1,|L4.248|
0000dc  6008              STR      r0,[r1,#0]  ; Imon1_value
;;;485    }
0000de  e8bd87f0          POP      {r4-r10,pc}
;;;486    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L4.228|
                          DCD      ||.bss||
                  |L4.232|
                          DCD      ||.data||
                  |L4.236|
                          DCD      Imon_value
                  |L4.240|
                          DCD      ||.bss||+0x100
                  |L4.244|
                          DCD      Vmon1_value
                  |L4.248|
                          DCD      Imon1_value

                          AREA ||i.AD7689_TransferByte||, CODE, READONLY, ALIGN=2

                  AD7689_TransferByte PROC
;;;404    /************************************************************************/
;;;405    vu16 AD7689_TransferByte(vu16 uiTxData)
000000  b570              PUSH     {r4-r6,lr}
;;;406    {
;;;407    	vu8 uiRxData;
;;;408    	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
000002  4d0c              LDR      r5,|L5.52|
000004  4604              MOV      r4,r0                 ;406
                  |L5.6|
000006  2102              MOVS     r1,#2
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L5.6|
;;;409    	SPI_I2S_SendData(SPI2,uiTxData);
000012  4621              MOV      r1,r4
000014  462c              MOV      r4,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       SPI_I2S_SendData
                  |L5.28|
;;;410    	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
00001c  2101              MOVS     r1,#1
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L5.28|
;;;411    	uiRxData = SPI_I2S_ReceiveData(SPI2);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
00002e  b2c0              UXTB     r0,r0
;;;412    	return uiRxData;
;;;413    }
000030  bd70              POP      {r4-r6,pc}
;;;414    /************************************************************************/
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      0x40003800

                          AREA ||i.Bubble_sort||, CODE, READONLY, ALIGN=1

                  Bubble_sort PROC
;;;489     */
;;;490    void Bubble_sort(vu16 *D_temp,vu8 num)
000000  b530              PUSH     {r4,r5,lr}
;;;491    {
;;;492    	unsigned int _temp;
;;;493    	unsigned char m,n;
;;;494    	for(m=0;m<num;m++)
000002  2300              MOVS     r3,#0
000004  e015              B        |L6.50|
                  |L6.6|
;;;495    	{
;;;496    		for(n=m;n<num;n++)
000006  461a              MOV      r2,r3
000008  e00f              B        |L6.42|
                  |L6.10|
;;;497    		{
;;;498    			if(D_temp[n]>D_temp[m])//最大的值放在第一位
00000a  f8304012          LDRH     r4,[r0,r2,LSL #1]
00000e  f8305013          LDRH     r5,[r0,r3,LSL #1]
000012  42ac              CMP      r4,r5
000014  d907              BLS      |L6.38|
;;;499    			{
;;;500    				_temp = D_temp[m];
000016  f830c013          LDRH     r12,[r0,r3,LSL #1]
;;;501    				D_temp[m] =D_temp[n];
00001a  f8304012          LDRH     r4,[r0,r2,LSL #1]
00001e  f8204013          STRH     r4,[r0,r3,LSL #1]
;;;502    				D_temp[n]=_temp;		
000022  f820c012          STRH     r12,[r0,r2,LSL #1]
                  |L6.38|
000026  1c52              ADDS     r2,r2,#1              ;496
000028  b2d2              UXTB     r2,r2                 ;496
                  |L6.42|
00002a  428a              CMP      r2,r1                 ;496
00002c  d3ed              BCC      |L6.10|
00002e  1c5b              ADDS     r3,r3,#1              ;494
000030  b2db              UXTB     r3,r3                 ;494
                  |L6.50|
000032  428b              CMP      r3,r1                 ;494
000034  d3e7              BCC      |L6.6|
;;;503    			}
;;;504    		}	
;;;505    	}
;;;506    }
000036  bd30              POP      {r4,r5,pc}
                          ENDP


                          AREA ||i.SPI_AD7689_Read||, CODE, READONLY, ALIGN=2

                  SPI_AD7689_Read PROC
;;;356    
;;;357    vu16 SPI_AD7689_Read(vu16 AD7689_CFG, vu16 AD7689_INx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;358    {
;;;359    	vu16 AD7689_Config=0;
;;;360    	vu16 AD7689_Data;
;;;361    	vu8 i;
;;;362    	AD7689_Config = AD7689_CFG<<13|AD7689_INCC<<10|AD7689_INx<<7|AD7689_BW<<6|AD7689_REF<<3|AD7689_SEQ<<1|AD7689_RB;//写入配置参数
000004  0340              LSLS     r0,r0,#13
000006  ea4010c1          ORR      r0,r0,r1,LSL #7
00000a  f6414159          MOV      r1,#0x1c59
00000e  4308              ORRS     r0,r0,r1
;;;363    	AD7689_Config <<=2;
000010  0480              LSLS     r0,r0,#18
000012  0c05              LSRS     r5,r0,#16
;;;364    	AD7689_CNV_0;
000014  4f20              LDR      r7,|L7.152|
000016  2140              MOVS     r1,#0x40
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       GPIO_ResetBits
;;;365    	AD7689_Delay();
00001e  f7fffffe          BL       AD7689_Delay
;;;366    	for(i=0;i<16;i++)
000022  2600              MOVS     r6,#0
000024  e025              B        |L7.114|
                  |L7.38|
;;;367    	{
;;;368    		if(AD7689_Config&0x8000)
000026  0428              LSLS     r0,r5,#16
000028  d504              BPL      |L7.52|
;;;369    		{
;;;370    			GPIO_SetBits(GPIOB,GPIO_Pin_5);//MOSI=1
00002a  2120              MOVS     r1,#0x20
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       GPIO_SetBits
000032  e003              B        |L7.60|
                  |L7.52|
;;;371    		}
;;;372    		else
;;;373    		{
;;;374    			GPIO_ResetBits(GPIOB,GPIO_Pin_5);//MOSI=0
000034  2120              MOVS     r1,#0x20
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       GPIO_ResetBits
                  |L7.60|
;;;375    		}
;;;376    		AD7689_Delay();
00003c  f7fffffe          BL       AD7689_Delay
;;;377    		GPIO_ResetBits(GPIOB,GPIO_Pin_3);//SCK=0
000040  2108              MOVS     r1,#8
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       GPIO_ResetBits
;;;378    		AD7689_Delay();
000048  f7fffffe          BL       AD7689_Delay
;;;379    		AD7689_Config <<= 1;
00004c  0468              LSLS     r0,r5,#17
00004e  0c05              LSRS     r5,r0,#16
;;;380    		GPIO_SetBits(GPIOB,GPIO_Pin_3);//SCK=1
000050  2108              MOVS     r1,#8
000052  4638              MOV      r0,r7
000054  f7fffffe          BL       GPIO_SetBits
;;;381    		AD7689_Delay();
000058  f7fffffe          BL       AD7689_Delay
;;;382    		AD7689_Data <<=1;
00005c  0460              LSLS     r0,r4,#17
00005e  0c04              LSRS     r4,r0,#16
;;;383    		if(GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_4))
000060  2110              MOVS     r1,#0x10
000062  4638              MOV      r0,r7
000064  f7fffffe          BL       GPIO_ReadInputDataBit
000068  b108              CBZ      r0,|L7.110|
;;;384    		{
;;;385    			AD7689_Data |=1;
00006a  f0440401          ORR      r4,r4,#1
                  |L7.110|
00006e  1c76              ADDS     r6,r6,#1              ;366
000070  b2f6              UXTB     r6,r6                 ;366
                  |L7.114|
000072  2e10              CMP      r6,#0x10              ;366
000074  d3d7              BCC      |L7.38|
;;;386    		}
;;;387    	}
;;;388    	AD7689_Delay(); 
000076  f7fffffe          BL       AD7689_Delay
;;;389    	GPIO_ResetBits(GPIOB,GPIO_Pin_3);//SCK=0
00007a  2108              MOVS     r1,#8
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       GPIO_ResetBits
;;;390    	AD7689_Delay(); 
000082  f7fffffe          BL       AD7689_Delay
;;;391    	AD7689_CNV_1;
000086  2140              MOVS     r1,#0x40
000088  4638              MOV      r0,r7
00008a  f7fffffe          BL       GPIO_SetBits
;;;392    	AD7689_Delay(); 
00008e  f7fffffe          BL       AD7689_Delay
;;;393    	return AD7689_Data;
000092  4620              MOV      r0,r4
;;;394    }
000094  e8bd81f0          POP      {r4-r8,pc}
;;;395    
                          ENDP

                  |L7.152|
                          DCD      0x40020400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  AD7689_Buffer
                          %        16
                  Ad7689_Fit_Imon
                          %        200
                  Ad7689_Fit_Imon1
                          %        40
                  Ad7689_Fit_Vmon
                          %        40

                          AREA ||.data||, DATA, ALIGN=0

                  I_cont
000000  00                DCB      0x00
                  I1_cont
000001  00                DCB      0x00
                  V_cont
000002  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\drive\\AD7689.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_AD7689_c_c2a2045a____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_AD7689_c_c2a2045a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_AD7689_c_c2a2045a____REVSH|
#line 128
|__asm___8_AD7689_c_c2a2045a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
