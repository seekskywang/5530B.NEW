; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\modbus.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\output\modbus.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\output\modbus.crf ..\drive\modbus.c]
                          THUMB

                          AREA ||i.Hardware_CRC||, CODE, READONLY, ALIGN=1

                  Hardware_CRC PROC
;;;840    //-----------------------------CRC检测--------------------------------------------//
;;;841    vu16 Hardware_CRC(vu8 *p_buffer,vu8 count)    //CRC16
000000  b503              PUSH     {r0,r1,lr}
;;;842    {
000002  b082              SUB      sp,sp,#8
;;;843    	vu16 CRC_Result=0xffff;
000004  f64f71ff          MOV      r1,#0xffff
000008  9101              STR      r1,[sp,#4]
;;;844    	vu8 i;
;;;845    	if(count==0)
00000a  f89d100c          LDRB     r1,[sp,#0xc]
00000e  2900              CMP      r1,#0
000010  d126              BNE      |L1.96|
;;;846    	{
;;;847    		count=1;
000012  2101              MOVS     r1,#1
000014  9103              STR      r1,[sp,#0xc]
000016  e023              B        |L1.96|
                  |L1.24|
;;;848    	}
;;;849    	while(count--)
;;;850    	{
;;;851    		CRC_Result^=*p_buffer;
000018  7801              LDRB     r1,[r0,#0]
00001a  f8bd2004          LDRH     r2,[sp,#4]
00001e  4051              EORS     r1,r1,r2
000020  9101              STR      r1,[sp,#4]
;;;852    		for(i=0;i<8;i++)
000022  2100              MOVS     r1,#0
000024  9100              STR      r1,[sp,#0]
;;;853    		{
;;;854    			if(CRC_Result&1)
;;;855    			{
;;;856    				CRC_Result>>=1;
;;;857    				CRC_Result^=0xA001;
000026  f24a0201          MOV      r2,#0xa001
00002a  e014              B        |L1.86|
                  |L1.44|
00002c  f8bd1004          LDRH     r1,[sp,#4]            ;854
000030  07c9              LSLS     r1,r1,#31             ;854
000032  d008              BEQ      |L1.70|
000034  f8bd1004          LDRH     r1,[sp,#4]            ;856
000038  0849              LSRS     r1,r1,#1              ;856
00003a  9101              STR      r1,[sp,#4]            ;856
00003c  f8bd1004          LDRH     r1,[sp,#4]
000040  4051              EORS     r1,r1,r2
000042  9101              STR      r1,[sp,#4]
000044  e003              B        |L1.78|
                  |L1.70|
;;;858    			}
;;;859    			else 
;;;860    			{
;;;861    				CRC_Result>>=1;
000046  f8bd1004          LDRH     r1,[sp,#4]
00004a  0849              LSRS     r1,r1,#1
00004c  9101              STR      r1,[sp,#4]
                  |L1.78|
00004e  f89d1000          LDRB     r1,[sp,#0]            ;852
000052  1c49              ADDS     r1,r1,#1              ;852
000054  9100              STR      r1,[sp,#0]            ;852
                  |L1.86|
000056  f89d1000          LDRB     r1,[sp,#0]            ;852
00005a  2908              CMP      r1,#8                 ;852
00005c  d3e6              BCC      |L1.44|
;;;862    			}
;;;863    		}
;;;864    		p_buffer++;
00005e  1c40              ADDS     r0,r0,#1
                  |L1.96|
000060  f89d100c          LDRB     r1,[sp,#0xc]          ;849
000064  1e4a              SUBS     r2,r1,#1              ;849
000066  9203              STR      r2,[sp,#0xc]          ;849
000068  2900              CMP      r1,#0                 ;849
00006a  d1d5              BNE      |L1.24|
;;;865    	}
;;;866    	return CRC_Result;
00006c  f8bd0004          LDRH     r0,[sp,#4]
;;;867    }
000070  b004              ADD      sp,sp,#0x10
000072  bd00              POP      {pc}
                          ENDP


                          AREA ||i.Transformation_ADC||, CODE, READONLY, ALIGN=2

                  Transformation_ADC PROC
;;;639    //===============================AD值转换成测量值============================================//
;;;640    void Transformation_ADC(void)  
000000  b5f8              PUSH     {r3-r7,lr}
;;;641    {
;;;642    	vu32 var32;
;;;643    	vu32 var32a;
;;;644    /*****************************内阻测量电压转换*******************************************/
;;;645    	var32 = Vmon1_value;
000002  48d4              LDR      r0,|L2.852|
000004  6800              LDR      r0,[r0,#0]  ; Vmon1_value
000006  9000              STR      r0,[sp,#0]
;;;646    	var32 = var32 * REG_CorrectionV;  
000008  4dd3              LDR      r5,|L2.856|
00000a  6828              LDR      r0,[r5,#0]  ; Correct_Parametet
00000c  9900              LDR      r1,[sp,#0]
00000e  4348              MULS     r0,r1,r0
000010  9000              STR      r0,[sp,#0]
;;;647    	if ((Polar & 0x01) == 0x01)		  
000012  4cd2              LDR      r4,|L2.860|
000014  7820              LDRB     r0,[r4,#0]  ; correct_por
;;;648    	{
;;;649    		if (var32 < REG_ReadV_Offset) 
000016  f04f0100          MOV      r1,#0
00001a  07c2              LSLS     r2,r0,#31             ;647
00001c  f1050030          ADD      r0,r5,#0x30
000020  d00a              BEQ      |L2.56|
000022  6802              LDR      r2,[r0,#0]  ; Correct_Strong
000024  9b00              LDR      r3,[sp,#0]
000026  429a              CMP      r2,r3
000028  d901              BLS      |L2.46|
;;;650    		{
;;;651    			var32 = 0;
00002a  9100              STR      r1,[sp,#0]
00002c  e008              B        |L2.64|
                  |L2.46|
;;;652    		}
;;;653    		else var32 = var32 - REG_ReadV_Offset;
00002e  6802              LDR      r2,[r0,#0]  ; Correct_Strong
000030  9b00              LDR      r3,[sp,#0]
000032  1a9a              SUBS     r2,r3,r2
000034  9200              STR      r2,[sp,#0]
000036  e003              B        |L2.64|
                  |L2.56|
;;;654    	}
;;;655    	else var32 = var32 + REG_ReadV_Offset;
000038  6802              LDR      r2,[r0,#0]  ; Correct_Strong
00003a  9b00              LDR      r3,[sp,#0]
00003c  441a              ADD      r2,r2,r3
00003e  9200              STR      r2,[sp,#0]
                  |L2.64|
;;;656    	var32 = var32 >> 12;
000040  9a00              LDR      r2,[sp,#0]
000042  0b12              LSRS     r2,r2,#12
000044  9200              STR      r2,[sp,#0]
;;;657    	if (var32 < 30) var32 = 0;				  //40mV以下清零
000046  9a00              LDR      r2,[sp,#0]
000048  2a1e              CMP      r2,#0x1e
00004a  d200              BCS      |L2.78|
00004c  9100              STR      r1,[sp,#0]
                  |L2.78|
;;;658    	Voltage = var32;
00004e  4bc2              LDR      r3,|L2.856|
000050  9a00              LDR      r2,[sp,#0]
000052  3360              ADDS     r3,r3,#0x60
000054  629a              STR      r2,[r3,#0x28]  ; Run_Control
;;;659    	DISS_Voltage=Voltage;
000056  6a9a              LDR      r2,[r3,#0x28]  ; Run_Control
000058  ee002a10          VMOV     s0,r2
00005c  4ac0              LDR      r2,|L2.864|
00005e  eef80a40          VCVT.F32.U32 s1,s0
;;;660    	DISS_Voltage=DISS_Voltage/1000;//计算显示电压
000062  ed9f0ac0          VLDR     s0,|L2.868|
000066  ee801a80          VDIV.F32 s2,s1,s0
00006a  ed821a00          VSTR     s2,[r2,#0]
;;;661    	var32 = 0;
;;;662    	/*******************负载测量电流转换**************************************/
;;;663    	var32 = Imon1_value;
00006e  4abe              LDR      r2,|L2.872|
000070  6812              LDR      r2,[r2,#0]  ; Imon1_value
000072  9200              STR      r2,[sp,#0]
;;;664    	var32 = var32 * REG_Load_A;  
000074  686a              LDR      r2,[r5,#4]  ; Correct_Parametet
000076  9e00              LDR      r6,[sp,#0]
000078  4372              MULS     r2,r6,r2
00007a  9200              STR      r2,[sp,#0]
;;;665    	if ((Polar1 & 0x01) == 0x01)		  
00007c  7862              LDRB     r2,[r4,#1]  ; correct_por
00007e  07d2              LSLS     r2,r2,#31
000080  d00a              BEQ      |L2.152|
;;;666    	{
;;;667    		if (var32 < REG_LoadA_Offset) 
000082  6842              LDR      r2,[r0,#4]  ; Correct_Strong
000084  9e00              LDR      r6,[sp,#0]
000086  42b2              CMP      r2,r6
000088  d901              BLS      |L2.142|
;;;668    		{
;;;669    			var32 = 0;
00008a  9100              STR      r1,[sp,#0]
00008c  e008              B        |L2.160|
                  |L2.142|
;;;670    		}
;;;671    		else var32 = var32 - REG_LoadA_Offset;
00008e  6842              LDR      r2,[r0,#4]  ; Correct_Strong
000090  9e00              LDR      r6,[sp,#0]
000092  1ab2              SUBS     r2,r6,r2
000094  9200              STR      r2,[sp,#0]
000096  e003              B        |L2.160|
                  |L2.152|
;;;672    	}
;;;673    	else var32 = var32 + REG_LoadA_Offset;
000098  6842              LDR      r2,[r0,#4]  ; Correct_Strong
00009a  9e00              LDR      r6,[sp,#0]
00009c  4432              ADD      r2,r2,r6
00009e  9200              STR      r2,[sp,#0]
                  |L2.160|
;;;674    	var32 = var32 >> 12;
0000a0  9a00              LDR      r2,[sp,#0]
0000a2  0b12              LSRS     r2,r2,#12
0000a4  9200              STR      r2,[sp,#0]
;;;675    	Laod_Current = var32;
0000a6  9a00              LDR      r2,[sp,#0]
0000a8  631a              STR      r2,[r3,#0x30]  ; Run_Control
;;;676    	DISS_Current=Laod_Current;
0000aa  6b1a              LDR      r2,[r3,#0x30]  ; Run_Control
0000ac  ee002a90          VMOV     s1,r2
0000b0  4aae              LDR      r2,|L2.876|
0000b2  eef80a60          VCVT.F32.U32 s1,s1
;;;677    	DISS_Current=DISS_Current/1000;//计算显示电流
0000b6  ee801a80          VDIV.F32 s2,s1,s0
0000ba  ed821a00          VSTR     s2,[r2,#0]
;;;678    	var32 = 0;	
0000be  9100              STR      r1,[sp,#0]
;;;679    	/*************************负载电压和电流控制转换**************************************/
;;;680    	if(flag_Load_CC==1)
0000c0  4aab              LDR      r2,|L2.880|
;;;681    	{
;;;682    		var32 = SET_Current_Laod;
;;;683    		var32=var32<<12;   
;;;684    		if ((Polar1 & 0x04) == 0)			   
;;;685    		{
;;;686    			if (var32 < SET_LoadA_Offset) var32 = 0;
;;;687    			else var32 = var32 - SET_LoadA_Offset;
;;;688    		}
;;;689    		else var32 = var32 + SET_LoadA_Offset;
;;;690    		var32 = var32/SET_LoadA;
;;;691    		var32=var32>>1;
;;;692    		if(Flag_DAC_OFF==0)
;;;693    		{
;;;694    			Contr_Laod = var32;
0000c2  4ead              LDR      r6,|L2.888|
0000c4  7812              LDRB     r2,[r2,#0]            ;680  ; flagD
0000c6  0617              LSLS     r7,r2,#24             ;680
0000c8  4aaa              LDR      r2,|L2.884|
0000ca  6812              LDR      r2,[r2,#0]            ;692
0000cc  d52c              BPL      |L2.296|
0000ce  691f              LDR      r7,[r3,#0x10]         ;682  ; Run_Control
0000d0  9700              STR      r7,[sp,#0]            ;682
0000d2  9f00              LDR      r7,[sp,#0]            ;683
0000d4  033f              LSLS     r7,r7,#12             ;683
0000d6  9700              STR      r7,[sp,#0]            ;683
0000d8  7867              LDRB     r7,[r4,#1]            ;684  ; correct_por
0000da  077f              LSLS     r7,r7,#29             ;684
0000dc  d40d              BMI      |L2.250|
0000de  6887              LDR      r7,[r0,#8]            ;686  ; Correct_Strong
0000e0  f8ddc000          LDR      r12,[sp,#0]           ;686
0000e4  4567              CMP      r7,r12                ;686
0000e6  d901              BLS      |L2.236|
0000e8  9100              STR      r1,[sp,#0]            ;686
0000ea  e00b              B        |L2.260|
                  |L2.236|
0000ec  6887              LDR      r7,[r0,#8]            ;687  ; Correct_Strong
0000ee  f8ddc000          LDR      r12,[sp,#0]           ;687
0000f2  ebac0707          SUB      r7,r12,r7             ;687
0000f6  9700              STR      r7,[sp,#0]            ;687
0000f8  e004              B        |L2.260|
                  |L2.250|
0000fa  6887              LDR      r7,[r0,#8]            ;689  ; Correct_Strong
0000fc  f8ddc000          LDR      r12,[sp,#0]           ;689
000100  4467              ADD      r7,r7,r12             ;689
000102  9700              STR      r7,[sp,#0]            ;689
                  |L2.260|
000104  68af              LDR      r7,[r5,#8]            ;690  ; Correct_Parametet
000106  f8ddc000          LDR      r12,[sp,#0]           ;690
00010a  fbbcf7f7          UDIV     r7,r12,r7             ;690
00010e  9700              STR      r7,[sp,#0]            ;690
000110  9f00              LDR      r7,[sp,#0]            ;691
000112  087f              LSRS     r7,r7,#1              ;691
000114  9700              STR      r7,[sp,#0]            ;691
000116  0712              LSLS     r2,r2,#28             ;692
000118  d401              BMI      |L2.286|
00011a  9a00              LDR      r2,[sp,#0]
00011c  8032              STRH     r2,[r6,#0]
                  |L2.286|
;;;695    		}
;;;696    		if(SET_Current_Laod==0)
00011e  691a              LDR      r2,[r3,#0x10]  ; Run_Control
000120  b902              CBNZ     r2,|L2.292|
;;;697    		{
;;;698    			Contr_Laod=0;
000122  8031              STRH     r1,[r6,#0]
                  |L2.292|
;;;699    		}
;;;700    		var32 = 0;
000124  9100              STR      r1,[sp,#0]
000126  e02b              B        |L2.384|
                  |L2.296|
;;;701    	}
;;;702    	else
;;;703    	{
;;;704    		var32 = SET_Voltage_Laod;
000128  68df              LDR      r7,[r3,#0xc]  ; Run_Control
00012a  9700              STR      r7,[sp,#0]
;;;705    		var32=var32<<12;   
00012c  9f00              LDR      r7,[sp,#0]
00012e  033f              LSLS     r7,r7,#12
000130  9700              STR      r7,[sp,#0]
;;;706    		if ((Polar2 & 0x04) == 0)			   
000132  78a7              LDRB     r7,[r4,#2]  ; correct_por
000134  077f              LSLS     r7,r7,#29
000136  d40d              BMI      |L2.340|
;;;707    		{
;;;708    			if (var32 < SET_LoadA_Offset) var32 = 0;
000138  6887              LDR      r7,[r0,#8]  ; Correct_Strong
00013a  f8ddc000          LDR      r12,[sp,#0]
00013e  4567              CMP      r7,r12
000140  d901              BLS      |L2.326|
000142  9100              STR      r1,[sp,#0]
000144  e00b              B        |L2.350|
                  |L2.326|
;;;709    			else var32 = var32 - SET_LoadV_Offset;
000146  6907              LDR      r7,[r0,#0x10]  ; Correct_Strong
000148  f8ddc000          LDR      r12,[sp,#0]
00014c  ebac0707          SUB      r7,r12,r7
000150  9700              STR      r7,[sp,#0]
000152  e004              B        |L2.350|
                  |L2.340|
;;;710    		}
;;;711    		else var32 = var32 + SET_LoadV_Offset;
000154  6907              LDR      r7,[r0,#0x10]  ; Correct_Strong
000156  f8ddc000          LDR      r12,[sp,#0]
00015a  4467              ADD      r7,r7,r12
00015c  9700              STR      r7,[sp,#0]
                  |L2.350|
;;;712    		var32 = var32/SET_LoadV;
00015e  692f              LDR      r7,[r5,#0x10]  ; Correct_Parametet
000160  f8ddc000          LDR      r12,[sp,#0]
000164  fbbcf7f7          UDIV     r7,r12,r7
000168  9700              STR      r7,[sp,#0]
;;;713    		var32=var32>>1;
00016a  9f00              LDR      r7,[sp,#0]
00016c  087f              LSRS     r7,r7,#1
00016e  9700              STR      r7,[sp,#0]
;;;714    		if(Flag_DAC_OFF==0)
000170  0712              LSLS     r2,r2,#28
000172  d401              BMI      |L2.376|
;;;715    		{
;;;716    			Contr_Laod = var32;
000174  9a00              LDR      r2,[sp,#0]
000176  8032              STRH     r2,[r6,#0]
                  |L2.376|
;;;717    		}
;;;718    		if(SET_Voltage_Laod==0)
000178  68da              LDR      r2,[r3,#0xc]  ; Run_Control
00017a  b902              CBNZ     r2,|L2.382|
;;;719    		{
;;;720    			Contr_Laod=0;
00017c  8031              STRH     r1,[r6,#0]
                  |L2.382|
;;;721    		}
;;;722    		var32 = 0;
00017e  9100              STR      r1,[sp,#0]
                  |L2.384|
;;;723    	}
;;;724    /*****************************内阻值转换*******************************************/
;;;725    	var32 = Rmon_value;
000180  4a7e              LDR      r2,|L2.892|
000182  8812              LDRH     r2,[r2,#0]  ; Rmon_value
000184  9200              STR      r2,[sp,#0]
;;;726    	var32 = var32 * REG_CorrectionR;  
000186  696a              LDR      r2,[r5,#0x14]  ; Correct_Parametet
000188  9e00              LDR      r6,[sp,#0]
00018a  4372              MULS     r2,r6,r2
00018c  9200              STR      r2,[sp,#0]
;;;727    	if ((Polar3 & 0x01) == 0x01)		  
00018e  78e2              LDRB     r2,[r4,#3]  ; correct_por
000190  07d2              LSLS     r2,r2,#31
000192  d00a              BEQ      |L2.426|
;;;728    	{
;;;729    		if (var32 < REG_ReadR_Offset) 
000194  6942              LDR      r2,[r0,#0x14]  ; Correct_Strong
000196  9e00              LDR      r6,[sp,#0]
000198  42b2              CMP      r2,r6
00019a  d901              BLS      |L2.416|
;;;730    		{
;;;731    			var32 = 0;
00019c  9100              STR      r1,[sp,#0]
00019e  e008              B        |L2.434|
                  |L2.416|
;;;732    		}
;;;733    		else var32 = var32 - REG_ReadR_Offset;
0001a0  6942              LDR      r2,[r0,#0x14]  ; Correct_Strong
0001a2  9e00              LDR      r6,[sp,#0]
0001a4  1ab2              SUBS     r2,r6,r2
0001a6  9200              STR      r2,[sp,#0]
0001a8  e003              B        |L2.434|
                  |L2.426|
;;;734    	}
;;;735    	else var32 = var32 + REG_ReadR_Offset;
0001aa  6942              LDR      r2,[r0,#0x14]  ; Correct_Strong
0001ac  9e00              LDR      r6,[sp,#0]
0001ae  4432              ADD      r2,r2,r6
0001b0  9200              STR      r2,[sp,#0]
                  |L2.434|
;;;736    	var32 = var32 >> 12;
0001b2  9a00              LDR      r2,[sp,#0]
0001b4  0b12              LSRS     r2,r2,#12
0001b6  9200              STR      r2,[sp,#0]
;;;737    	if (var32 < 1)
;;;738    	{
;;;739    		var32 = 0;				  //清零
;;;740    	}
;;;741    	R_VLUE = var32;
0001b8  9a00              LDR      r2,[sp,#0]
0001ba  635a              STR      r2,[r3,#0x34]  ; Run_Control
;;;742    	var32 = 0;	
;;;743    	/*****************************稳压电源测量电压转换*******************************************/
;;;744    	var32 = Vmon_value;
0001bc  4a70              LDR      r2,|L2.896|
0001be  8812              LDRH     r2,[r2,#0]  ; Vmon_value
0001c0  9200              STR      r2,[sp,#0]
;;;745    	var32 = var32 * REG_POWERV;  
0001c2  6a2a              LDR      r2,[r5,#0x20]  ; Correct_Parametet
0001c4  9e00              LDR      r6,[sp,#0]
0001c6  4372              MULS     r2,r6,r2
0001c8  9200              STR      r2,[sp,#0]
;;;746    	if ((Polar5 & 0x01) == 0x01)		  
0001ca  7962              LDRB     r2,[r4,#5]  ; correct_por
0001cc  07d2              LSLS     r2,r2,#31
0001ce  d00a              BEQ      |L2.486|
;;;747    	{
;;;748    		if (var32 < REG_POWERV_Offset) 
0001d0  6a02              LDR      r2,[r0,#0x20]  ; Correct_Strong
0001d2  9e00              LDR      r6,[sp,#0]
0001d4  42b2              CMP      r2,r6
0001d6  d901              BLS      |L2.476|
;;;749    		{
;;;750    			var32 = 0;
0001d8  9100              STR      r1,[sp,#0]
0001da  e008              B        |L2.494|
                  |L2.476|
;;;751    		}
;;;752    		else var32 = var32 - REG_POWERV_Offset;
0001dc  6a02              LDR      r2,[r0,#0x20]  ; Correct_Strong
0001de  9e00              LDR      r6,[sp,#0]
0001e0  1ab2              SUBS     r2,r6,r2
0001e2  9200              STR      r2,[sp,#0]
0001e4  e003              B        |L2.494|
                  |L2.486|
;;;753    	}
;;;754    	else var32 = var32 + REG_POWERV_Offset;
0001e6  6a02              LDR      r2,[r0,#0x20]  ; Correct_Strong
0001e8  9e00              LDR      r6,[sp,#0]
0001ea  4432              ADD      r2,r2,r6
0001ec  9200              STR      r2,[sp,#0]
                  |L2.494|
;;;755    	var32 = var32 >> 14;
0001ee  9a00              LDR      r2,[sp,#0]
0001f0  0b92              LSRS     r2,r2,#14
0001f2  9200              STR      r2,[sp,#0]
;;;756    	if (var32 < 40) var32 = 0;				  //40mV以下清零
0001f4  9a00              LDR      r2,[sp,#0]
0001f6  2a28              CMP      r2,#0x28
0001f8  d200              BCS      |L2.508|
0001fa  9100              STR      r1,[sp,#0]
                  |L2.508|
;;;757    	POW_Voltage = var32;
0001fc  9a00              LDR      r2,[sp,#0]
0001fe  625a              STR      r2,[r3,#0x24]  ; Run_Control
;;;758    	DISS_POW_Voltage=POW_Voltage;
000200  6a5a              LDR      r2,[r3,#0x24]  ; Run_Control
000202  ee002a90          VMOV     s1,r2
000206  4a5f              LDR      r2,|L2.900|
000208  eef80a60          VCVT.F32.U32 s1,s1
;;;759    	DISS_POW_Voltage=DISS_POW_Voltage/100;//计算显示电压
00020c  ed9f1a5e          VLDR     s2,|L2.904|
000210  eec01a81          VDIV.F32 s3,s1,s2
000214  edc21a00          VSTR     s3,[r2,#0]
;;;760    	var32 = 0;
;;;761    /*****************************稳压电源测量电流转换*******************************************/
;;;762    	var32 = Imon_value;
000218  4a5c              LDR      r2,|L2.908|
00021a  8812              LDRH     r2,[r2,#0]  ; Imon_value
00021c  9200              STR      r2,[sp,#0]
;;;763    	if(flag_CC_MODE==1)
00021e  4a5c              LDR      r2,|L2.912|
;;;764    	{
;;;765    		var32 = var32 * REG_POWERA;	   
;;;766    		if ((Polar4 & 0x01) == 0x01)			   
;;;767    		{
;;;768    			if (var32 < REG_POWERA_Offset) var32 = 0;
;;;769    			else var32 = var32 - REG_POWERA_Offset;
;;;770    		}
;;;771    		else
;;;772    		{
;;;773    			var32 = var32 + REG_POWERA_Offset;
;;;774    		}	
;;;775    		var32 = var32 >> 14;
;;;776    		Current = var32;;
;;;777    		DISS_POW_Current=Current;
000220  4e5c              LDR      r6,|L2.916|
000222  7812              LDRB     r2,[r2,#0]            ;763  ; flagE
000224  0612              LSLS     r2,r2,#24             ;763
000226  d524              BPL      |L2.626|
000228  69aa              LDR      r2,[r5,#0x18]         ;765  ; Correct_Parametet
00022a  9f00              LDR      r7,[sp,#0]            ;765
00022c  437a              MULS     r2,r7,r2              ;765
00022e  9200              STR      r2,[sp,#0]            ;765
000230  7922              LDRB     r2,[r4,#4]            ;766  ; correct_por
000232  07d2              LSLS     r2,r2,#31             ;766
000234  d00a              BEQ      |L2.588|
000236  6982              LDR      r2,[r0,#0x18]         ;768  ; Correct_Strong
000238  9f00              LDR      r7,[sp,#0]            ;768
00023a  42ba              CMP      r2,r7                 ;768
00023c  d901              BLS      |L2.578|
00023e  9100              STR      r1,[sp,#0]            ;768
000240  e008              B        |L2.596|
                  |L2.578|
000242  6982              LDR      r2,[r0,#0x18]         ;769  ; Correct_Strong
000244  9f00              LDR      r7,[sp,#0]            ;769
000246  1aba              SUBS     r2,r7,r2              ;769
000248  9200              STR      r2,[sp,#0]            ;769
00024a  e003              B        |L2.596|
                  |L2.588|
00024c  6982              LDR      r2,[r0,#0x18]         ;773  ; Correct_Strong
00024e  9f00              LDR      r7,[sp,#0]            ;773
000250  443a              ADD      r2,r2,r7              ;773
000252  9200              STR      r2,[sp,#0]            ;773
                  |L2.596|
000254  9a00              LDR      r2,[sp,#0]            ;775
000256  0b92              LSRS     r2,r2,#14             ;775
000258  9200              STR      r2,[sp,#0]            ;775
00025a  9a00              LDR      r2,[sp,#0]            ;776
00025c  62da              STR      r2,[r3,#0x2c]         ;776  ; Run_Control
00025e  6ada              LDR      r2,[r3,#0x2c]  ; Run_Control
000260  ee002a90          VMOV     s1,r2
000264  eef80a60          VCVT.F32.U32 s1,s1
;;;778    		DISS_POW_Current=DISS_POW_Current/1000;//计算显示电流
000268  ee801a80          VDIV.F32 s2,s1,s0
00026c  ed861a00          VSTR     s2,[r6,#0]
000270  e023              B        |L2.698|
                  |L2.626|
;;;779    	}
;;;780    	else
;;;781    	{
;;;782    		var32 = var32 * CON_POWERA;	   
000272  6aaa              LDR      r2,[r5,#0x28]  ; Correct_Parametet
000274  9f00              LDR      r7,[sp,#0]
000276  437a              MULS     r2,r7,r2
000278  9200              STR      r2,[sp,#0]
;;;783    		if ((Polar3 & 0x04) == 0x04)			   
00027a  78e2              LDRB     r2,[r4,#3]  ; correct_por
00027c  0752              LSLS     r2,r2,#29
00027e  d50a              BPL      |L2.662|
;;;784    		{
;;;785    			if (var32 < CON_POWERA_Offset) var32 = 0;
000280  6a82              LDR      r2,[r0,#0x28]  ; Correct_Strong
000282  9f00              LDR      r7,[sp,#0]
000284  42ba              CMP      r2,r7
000286  d901              BLS      |L2.652|
000288  9100              STR      r1,[sp,#0]
00028a  e008              B        |L2.670|
                  |L2.652|
;;;786    			else var32 = var32 - CON_POWERA_Offset;
00028c  6a82              LDR      r2,[r0,#0x28]  ; Correct_Strong
00028e  9f00              LDR      r7,[sp,#0]
000290  1aba              SUBS     r2,r7,r2
000292  9200              STR      r2,[sp,#0]
000294  e003              B        |L2.670|
                  |L2.662|
;;;787    		}
;;;788    		else
;;;789    		{
;;;790    			var32 = var32 + CON_POWERA_Offset;
000296  6a82              LDR      r2,[r0,#0x28]  ; Correct_Strong
000298  9f00              LDR      r7,[sp,#0]
00029a  443a              ADD      r2,r2,r7
00029c  9200              STR      r2,[sp,#0]
                  |L2.670|
;;;791    		}	
;;;792    		var32 = var32 >> 14;
00029e  9a00              LDR      r2,[sp,#0]
0002a0  0b92              LSRS     r2,r2,#14
0002a2  9200              STR      r2,[sp,#0]
;;;793    		Current = var32;;
0002a4  9a00              LDR      r2,[sp,#0]
0002a6  62da              STR      r2,[r3,#0x2c]  ; Run_Control
;;;794    		DISS_POW_Current=Current;
0002a8  6ada              LDR      r2,[r3,#0x2c]  ; Run_Control
0002aa  ee002a90          VMOV     s1,r2
0002ae  eef80a60          VCVT.F32.U32 s1,s1
;;;795    		DISS_POW_Current=DISS_POW_Current/1000;//计算显示电流
0002b2  ee801a80          VDIV.F32 s2,s1,s0
0002b6  ed861a00          VSTR     s2,[r6,#0]
                  |L2.698|
;;;796    	}
;;;797    /**************************稳压电源设置电压转换******************************************/
;;;798    	var32 = SET_Voltage;
0002ba  685a              LDR      r2,[r3,#4]  ; Run_Control
0002bc  9200              STR      r2,[sp,#0]
;;;799    	var32=var32<<14;   
0002be  9a00              LDR      r2,[sp,#0]
0002c0  0392              LSLS     r2,r2,#14
0002c2  9200              STR      r2,[sp,#0]
;;;800    	if ((Polar5 & 0x04) == 0)			   
0002c4  7962              LDRB     r2,[r4,#5]  ; correct_por
0002c6  0752              LSLS     r2,r2,#29
0002c8  d40a              BMI      |L2.736|
;;;801    	{
;;;802    		if (var32 < SET_POWERV_Offset) var32 = 0;
0002ca  6a42              LDR      r2,[r0,#0x24]  ; Correct_Strong
0002cc  9e00              LDR      r6,[sp,#0]
0002ce  42b2              CMP      r2,r6
0002d0  d901              BLS      |L2.726|
0002d2  9100              STR      r1,[sp,#0]
0002d4  e008              B        |L2.744|
                  |L2.726|
;;;803    		else var32 = var32 - SET_POWERV_Offset;
0002d6  6a42              LDR      r2,[r0,#0x24]  ; Correct_Strong
0002d8  9e00              LDR      r6,[sp,#0]
0002da  1ab2              SUBS     r2,r6,r2
0002dc  9200              STR      r2,[sp,#0]
0002de  e003              B        |L2.744|
                  |L2.736|
;;;804    	}
;;;805    	else var32 = var32 + SET_POWERV_Offset;
0002e0  6a42              LDR      r2,[r0,#0x24]  ; Correct_Strong
0002e2  9e00              LDR      r6,[sp,#0]
0002e4  4432              ADD      r2,r2,r6
0002e6  9200              STR      r2,[sp,#0]
                  |L2.744|
;;;806    	var32 = var32/SET_POWERV;
0002e8  6a6a              LDR      r2,[r5,#0x24]  ; Correct_Parametet
0002ea  9e00              LDR      r6,[sp,#0]
0002ec  fbb6f2f2          UDIV     r2,r6,r2
0002f0  9200              STR      r2,[sp,#0]
;;;807    	var32=var32>>1;
0002f2  9a00              LDR      r2,[sp,#0]
0002f4  0852              LSRS     r2,r2,#1
0002f6  9200              STR      r2,[sp,#0]
;;;808    	Contr_Voltage = var32;
0002f8  4a27              LDR      r2,|L2.920|
0002fa  9e00              LDR      r6,[sp,#0]
0002fc  8016              STRH     r6,[r2,#0]
;;;809    	if(SET_Voltage==0)
0002fe  685e              LDR      r6,[r3,#4]  ; Run_Control
000300  b906              CBNZ     r6,|L2.772|
;;;810    	{
;;;811    		Contr_Voltage=0;
000302  8011              STRH     r1,[r2,#0]
                  |L2.772|
;;;812    	}
;;;813    	var32 = 0;
;;;814    /**************************稳压电源设置电流转换**************************************/
;;;815    	var32 = SET_Current;
000304  689a              LDR      r2,[r3,#8]  ; Run_Control
000306  9200              STR      r2,[sp,#0]
;;;816    	var32=var32<<14;   
000308  9a00              LDR      r2,[sp,#0]
00030a  0392              LSLS     r2,r2,#14
00030c  9200              STR      r2,[sp,#0]
;;;817    	if ((Polar4 & 0x04) == 0)			   
00030e  7922              LDRB     r2,[r4,#4]  ; correct_por
000310  0752              LSLS     r2,r2,#29
000312  d40a              BMI      |L2.810|
;;;818    	{
;;;819    		if (var32 < SET_POWERA_Offset) var32 = 0;
000314  69c2              LDR      r2,[r0,#0x1c]  ; Correct_Strong
000316  9c00              LDR      r4,[sp,#0]
000318  42a2              CMP      r2,r4
00031a  d901              BLS      |L2.800|
00031c  9100              STR      r1,[sp,#0]
00031e  e008              B        |L2.818|
                  |L2.800|
;;;820    		else var32 = var32 - SET_POWERA_Offset;
000320  69c0              LDR      r0,[r0,#0x1c]  ; Correct_Strong
000322  9a00              LDR      r2,[sp,#0]
000324  1a10              SUBS     r0,r2,r0
000326  9000              STR      r0,[sp,#0]
000328  e003              B        |L2.818|
                  |L2.810|
;;;821    	}
;;;822    	else var32 = var32 + SET_POWERA_Offset;
00032a  69c0              LDR      r0,[r0,#0x1c]  ; Correct_Strong
00032c  9a00              LDR      r2,[sp,#0]
00032e  4410              ADD      r0,r0,r2
000330  9000              STR      r0,[sp,#0]
                  |L2.818|
;;;823    	var32 = var32/SET_POWERA;
000332  69e8              LDR      r0,[r5,#0x1c]  ; Correct_Parametet
000334  9a00              LDR      r2,[sp,#0]
000336  fbb2f0f0          UDIV     r0,r2,r0
00033a  9000              STR      r0,[sp,#0]
;;;824    	var32=var32>>1;
00033c  9800              LDR      r0,[sp,#0]
00033e  0840              LSRS     r0,r0,#1
000340  9000              STR      r0,[sp,#0]
;;;825    	Contr_Current = var32;
000342  4816              LDR      r0,|L2.924|
000344  9a00              LDR      r2,[sp,#0]
000346  8002              STRH     r2,[r0,#0]
;;;826    	if(SET_Current==0)
000348  689a              LDR      r2,[r3,#8]  ; Run_Control
00034a  b902              CBNZ     r2,|L2.846|
;;;827    	{
;;;828    		Contr_Current=0;
00034c  8001              STRH     r1,[r0,#0]
                  |L2.846|
;;;829    	}
;;;830    	
;;;831    	var32 = 0;
00034e  9100              STR      r1,[sp,#0]
;;;832    }
000350  bdf8              POP      {r3-r7,pc}
;;;833    /********************************************************************************
                          ENDP

000352  0000              DCW      0x0000
                  |L2.852|
                          DCD      Vmon1_value
                  |L2.856|
                          DCD      ||.bss||
                  |L2.860|
                          DCD      ||area_number.8||+0x1c
                  |L2.864|
                          DCD      DISS_Voltage
                  |L2.868|
000364  447a0000          DCFS     0x447a0000 ; 1000
                  |L2.872|
                          DCD      Imon1_value
                  |L2.876|
                          DCD      DISS_Current
                  |L2.880|
                          DCD      flagD
                  |L2.884|
                          DCD      flagB
                  |L2.888|
                          DCD      Contr_Laod
                  |L2.892|
                          DCD      Rmon_value
                  |L2.896|
                          DCD      Vmon_value
                  |L2.900|
                          DCD      DISS_POW_Voltage
                  |L2.904|
000388  42c80000          DCFS     0x42c80000 ; 100
                  |L2.908|
                          DCD      Imon_value
                  |L2.912|
                          DCD      flagE
                  |L2.916|
                          DCD      DISS_POW_Current
                  |L2.920|
                          DCD      Contr_Voltage
                  |L2.924|
                          DCD      Contr_Current

                          AREA ||i.UART_Action||, CODE, READONLY, ALIGN=2

                  UART_Action PROC
;;;44     //===========================MODBUS协议=============================//
;;;45     void UART_Action(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;46     {//RUT格式：
000004  b087              SUB      sp,sp,#0x1c
;;;47     	//ADDR  命令码  读寄存器的起始地址高   读寄存器的起始地址低  读数据字个数高字节   读数据个数低字节  CRC高 CRC低
;;;48     	//返回格式：ADDR 命令码 返回数据字节数  数据高  数据低 ..... CRC高  CRC低
;;;49     	if (UART_Buffer_Rece[0] == ADDR)
000006  f8dfa3f8          LDR      r10,|L3.1024|
00000a  f89a0000          LDRB     r0,[r10,#0]  ; UART_Buffer_Rece
00000e  4efd              LDR      r6,|L3.1028|
000010  7871              LDRB     r1,[r6,#1]  ; ADDR
;;;50     	{
;;;51     		if (UART_Buffer_Rece[1] == (0x03))	//命令3 读数据   
;;;52     		{																		 
;;;53     			vu8 i;
;;;54     			vu16 crc_result;
;;;55     			crc_result = (UART_Buffer_Rece[6] << 8) + UART_Buffer_Rece[7];
;;;56     			if ((crc_result == Hardware_CRC(UART_Buffer_Rece,6)) ||(crc_result == 0) )
;;;57     			{
;;;58     				if (UART_Buffer_Rece[3] < 0x07)    								//如果寄存器在可读范围内
;;;59     				{
;;;60     					if ((UART_Buffer_Rece[3] + UART_Buffer_Rece[5]) < 0x0F)		//如果最后一个读取的寄存器地址在可读范围内
;;;61     					{							
;;;62     						UART_Buffer_Send[0] = ADDR;
000012  4bfd              LDR      r3,|L3.1032|
;;;63     						UART_Buffer_Send[1] = 0x03;
;;;64     						UART_Buffer_Send[2] = UART_Buffer_Rece[5]*2;
;;;65     						for (i=0;i<UART_Buffer_Send[2];i++)
;;;66     						{
;;;67     							if ((i % 2) == 0) UART_Buffer_Send[3 + i] = Run_Control[UART_Buffer_Rece[3] + i / 2] >> 8;
;;;68     							else UART_Buffer_Send[3 + i] = Run_Control[UART_Buffer_Rece[3] + i / 2];														
;;;69     						}
;;;70     						crc_result = Hardware_CRC(UART_Buffer_Send,UART_Buffer_Send[2] + 3);
;;;71     						UART_Buffer_Send[3 + UART_Buffer_Send[2]] = crc_result >> 8;
;;;72     						UART_Buffer_Send[4 + UART_Buffer_Send[2]] = crc_result;
;;;73     						Transmit_BUFFERsize = UART_Buffer_Send[2] + 5;
000014  4ffd              LDR      r7,|L3.1036|
;;;74     						UART_SEND_flag=1;
000016  4cfe              LDR      r4,|L3.1040|
000018  4dfe              LDR      r5,|L3.1044|
00001a  4288              CMP      r0,r1                 ;49
00001c  d160              BNE      |L3.224|
00001e  f89a0001          LDRB     r0,[r10,#1]           ;51  ; UART_Buffer_Rece
000022  2803              CMP      r0,#3                 ;51
000024  d15c              BNE      |L3.224|
000026  f89a0007          LDRB     r0,[r10,#7]           ;55  ; UART_Buffer_Rece
00002a  f89a1006          LDRB     r1,[r10,#6]           ;55  ; UART_Buffer_Rece
00002e  eb002001          ADD      r0,r0,r1,LSL #8       ;55
000032  9005              STR      r0,[sp,#0x14]         ;55
000034  2106              MOVS     r1,#6                 ;56
000036  4650              MOV      r0,r10                ;56
000038  f7fffffe          BL       Hardware_CRC
00003c  f8bd1014          LDRH     r1,[sp,#0x14]         ;56
000040  4288              CMP      r0,r1                 ;56
000042  d002              BEQ      |L3.74|
000044  f8bd0014          LDRH     r0,[sp,#0x14]         ;56
000048  bbe8              CBNZ     r0,|L3.198|
                  |L3.74|
00004a  f89a0003          LDRB     r0,[r10,#3]           ;58  ; UART_Buffer_Rece
00004e  2807              CMP      r0,#7                 ;58
000050  d246              BCS      |L3.224|
000052  f89a0003          LDRB     r0,[r10,#3]           ;60  ; UART_Buffer_Rece
000056  f89a1005          LDRB     r1,[r10,#5]           ;60  ; UART_Buffer_Rece
00005a  4408              ADD      r0,r0,r1              ;60
00005c  280f              CMP      r0,#0xf               ;60
00005e  d23f              BCS      |L3.224|
000060  7870              LDRB     r0,[r6,#1]            ;62  ; ADDR
000062  7018              STRB     r0,[r3,#0]            ;62
000064  2003              MOVS     r0,#3                 ;63
000066  7058              STRB     r0,[r3,#1]            ;63
000068  f89a0005          LDRB     r0,[r10,#5]           ;64  ; UART_Buffer_Rece
00006c  0040              LSLS     r0,r0,#1              ;64
00006e  7098              STRB     r0,[r3,#2]            ;64
000070  2000              MOVS     r0,#0                 ;65
000072  9006              STR      r0,[sp,#0x18]         ;65
000074  e013              B        |L3.158|
                  |L3.118|
000076  f89d0018          LDRB     r0,[sp,#0x18]         ;67
00007a  07c0              LSLS     r0,r0,#31             ;67
00007c  d04f              BEQ      |L3.286|
00007e  f89a0003          LDRB     r0,[r10,#3]           ;68  ; UART_Buffer_Rece
000082  f89d1018          LDRB     r1,[sp,#0x18]         ;68
000086  eb000051          ADD      r0,r0,r1,LSR #1       ;68
00008a  f8550020          LDR      r0,[r5,r0,LSL #2]     ;68
00008e  f89d1018          LDRB     r1,[sp,#0x18]         ;68
000092  4419              ADD      r1,r1,r3              ;68
000094  70c8              STRB     r0,[r1,#3]            ;68
                  |L3.150|
000096  f89d0018          LDRB     r0,[sp,#0x18]         ;65
00009a  1c40              ADDS     r0,r0,#1              ;65
00009c  9006              STR      r0,[sp,#0x18]         ;65
                  |L3.158|
00009e  7898              LDRB     r0,[r3,#2]            ;65  ; UART_Buffer_Send
0000a0  f89d1018          LDRB     r1,[sp,#0x18]         ;65
0000a4  4288              CMP      r0,r1                 ;65
0000a6  d8e6              BHI      |L3.118|
0000a8  7898              LDRB     r0,[r3,#2]            ;70  ; UART_Buffer_Send
0000aa  1cc0              ADDS     r0,r0,#3              ;70
0000ac  b2c1              UXTB     r1,r0                 ;70
0000ae  48d6              LDR      r0,|L3.1032|
0000b0  f7fffffe          BL       Hardware_CRC
0000b4  9005              STR      r0,[sp,#0x14]         ;70
0000b6  f8bd0014          LDRH     r0,[sp,#0x14]         ;71
0000ba  789a              LDRB     r2,[r3,#2]            ;71  ; UART_Buffer_Send
0000bc  0a01              LSRS     r1,r0,#8              ;71
0000be  48d2              LDR      r0,|L3.1032|
0000c0  1cc0              ADDS     r0,r0,#3              ;71
0000c2  5411              STRB     r1,[r2,r0]            ;71
0000c4  e000              B        |L3.200|
                  |L3.198|
0000c6  e00b              B        |L3.224|
                  |L3.200|
0000c8  f8bd1014          LDRH     r1,[sp,#0x14]         ;72
0000cc  789a              LDRB     r2,[r3,#2]            ;72  ; UART_Buffer_Send
0000ce  1c40              ADDS     r0,r0,#1              ;72
0000d0  5411              STRB     r1,[r2,r0]            ;72
0000d2  7898              LDRB     r0,[r3,#2]            ;73  ; UART_Buffer_Send
0000d4  1d40              ADDS     r0,r0,#5              ;73
0000d6  7038              STRB     r0,[r7,#0]            ;73
0000d8  6820              LDR      r0,[r4,#0]  ; flagA
0000da  f0400010          ORR      r0,r0,#0x10
0000de  6020              STR      r0,[r4,#0]  ; flagA
                  |L3.224|
;;;75     					}
;;;76     				}
;;;77     			}	
;;;78     		}
;;;79     	} 
;;;80     //===============================写寄存器=================================
;;;81     	if ((UART_Buffer_Rece[0] == 0) || (UART_Buffer_Rece[0] == ADDR) || (UART_Buffer_Rece[0] == ((ADDR-1)/4+100)))	 
0000e0  f89a0000          LDRB     r0,[r10,#0]  ; UART_Buffer_Rece
0000e4  b180              CBZ      r0,|L3.264|
0000e6  f89a0000          LDRB     r0,[r10,#0]  ; UART_Buffer_Rece
0000ea  7871              LDRB     r1,[r6,#1]  ; ADDR
0000ec  4288              CMP      r0,r1
0000ee  d00b              BEQ      |L3.264|
0000f0  7870              LDRB     r0,[r6,#1]  ; ADDR
0000f2  1e40              SUBS     r0,r0,#1
0000f4  17c1              ASRS     r1,r0,#31
0000f6  eb007091          ADD      r0,r0,r1,LSR #30
0000fa  2164              MOVS     r1,#0x64
0000fc  eb0100a0          ADD      r0,r1,r0,ASR #2
000100  f89a1000          LDRB     r1,[r10,#0]  ; UART_Buffer_Rece
000104  4288              CMP      r0,r1
000106  d17b              BNE      |L3.512|
                  |L3.264|
;;;82     	{
;;;83     		vu8 var8;
;;;84     		vu8 a=0;
000108  f04f0900          MOV      r9,#0
00010c  f8cd9014          STR      r9,[sp,#0x14]
;;;85     		vu16 var16;
;;;86     		vu16 crc_result;
;;;87     //=========================以下命令6 写单个寄存器===========================
;;;88     		if (UART_Buffer_Rece[1] == 6)                                 //判断第二个字节是否为命令6
000110  f89a0001          LDRB     r0,[r10,#1]  ; UART_Buffer_Rece
;;;89     		{
;;;90     			if (UART_Buffer_Rece[3] < 0x05)							  //判断需要写的地址是否在可写范围内
;;;91     			{
;;;92     				crc_result = (UART_Buffer_Rece[6] << 8) + UART_Buffer_Rece[7];
;;;93     				if ((crc_result == Hardware_CRC(UART_Buffer_Rece,6)) ||(crc_result == 0) )		  //检查CRC
;;;94     				{
;;;95     					var16 = (UART_Buffer_Rece[4] << 8) + UART_Buffer_Rece[5];	//第5 6个字节为要写入的数据
;;;96     					var8 = UART_Buffer_Rece[3];	        						//第3 4个字节为要写入的地址
;;;97     					Run_Control[var8] = var16;			    //将数据写入指定的地址
;;;98     
;;;99     					if (UART_Buffer_Rece[0] == ADDR)							//广播模式下不返回数据
;;;100    					{
;;;101    						for (a=0;a<8;a++)
;;;102    						{UART_Buffer_Send[a] = UART_Buffer_Rece[a];}
;;;103    						Transmit_BUFFERsize = 8;						//原样数据返回，不计算CRC
000114  f04f0808          MOV      r8,#8
000118  2806              CMP      r0,#6                 ;88
00011a  d00e              BEQ      |L3.314|
00011c  e050              B        |L3.448|
                  |L3.286|
00011e  f89a0003          LDRB     r0,[r10,#3]           ;67  ; UART_Buffer_Rece
000122  f89d1018          LDRB     r1,[sp,#0x18]         ;67
000126  eb000051          ADD      r0,r0,r1,LSR #1       ;67
00012a  f8550020          LDR      r0,[r5,r0,LSL #2]     ;67
00012e  f89d1018          LDRB     r1,[sp,#0x18]         ;67
000132  0a00              LSRS     r0,r0,#8              ;67
000134  4419              ADD      r1,r1,r3              ;67
000136  70c8              STRB     r0,[r1,#3]            ;67
000138  e7ad              B        |L3.150|
                  |L3.314|
00013a  f89a0003          LDRB     r0,[r10,#3]           ;90  ; UART_Buffer_Rece
00013e  2805              CMP      r0,#5                 ;90
000140  d23e              BCS      |L3.448|
000142  f89a0007          LDRB     r0,[r10,#7]           ;92  ; UART_Buffer_Rece
000146  f89a1006          LDRB     r1,[r10,#6]           ;92  ; UART_Buffer_Rece
00014a  eb002001          ADD      r0,r0,r1,LSL #8       ;92
00014e  9003              STR      r0,[sp,#0xc]          ;92
000150  2106              MOVS     r1,#6                 ;93
000152  48ab              LDR      r0,|L3.1024|
000154  f7fffffe          BL       Hardware_CRC
000158  f8bd100c          LDRH     r1,[sp,#0xc]          ;93
00015c  4288              CMP      r0,r1                 ;93
00015e  d002              BEQ      |L3.358|
000160  f8bd000c          LDRH     r0,[sp,#0xc]          ;93
000164  bb60              CBNZ     r0,|L3.448|
                  |L3.358|
000166  f89a0005          LDRB     r0,[r10,#5]           ;95  ; UART_Buffer_Rece
00016a  f89a1004          LDRB     r1,[r10,#4]           ;95  ; UART_Buffer_Rece
00016e  eb002001          ADD      r0,r0,r1,LSL #8       ;95
000172  9004              STR      r0,[sp,#0x10]         ;95
000174  f89a0003          LDRB     r0,[r10,#3]           ;96  ; UART_Buffer_Rece
000178  9006              STR      r0,[sp,#0x18]         ;96
00017a  f8bd0010          LDRH     r0,[sp,#0x10]         ;97
00017e  f89d1018          LDRB     r1,[sp,#0x18]         ;97
000182  f8450021          STR      r0,[r5,r1,LSL #2]     ;97
000186  f89a1000          LDRB     r1,[r10,#0]           ;99  ; UART_Buffer_Rece
00018a  7870              LDRB     r0,[r6,#1]            ;99  ; ADDR
00018c  4281              CMP      r1,r0                 ;99
00018e  d117              BNE      |L3.448|
000190  f8cd9014          STR      r9,[sp,#0x14]         ;101
000194  e00a              B        |L3.428|
                  |L3.406|
000196  f89d0014          LDRB     r0,[sp,#0x14]         ;102
00019a  f81a0000          LDRB     r0,[r10,r0]           ;102
00019e  f89d1014          LDRB     r1,[sp,#0x14]         ;102
0001a2  5458              STRB     r0,[r3,r1]            ;102
0001a4  f89d0014          LDRB     r0,[sp,#0x14]         ;101
0001a8  1c40              ADDS     r0,r0,#1              ;101
0001aa  9005              STR      r0,[sp,#0x14]         ;101
                  |L3.428|
0001ac  f89d0014          LDRB     r0,[sp,#0x14]         ;101
0001b0  2808              CMP      r0,#8                 ;101
0001b2  d3f0              BCC      |L3.406|
0001b4  f8878000          STRB     r8,[r7,#0]
;;;104    						UART_SEND_flag=1;
0001b8  6820              LDR      r0,[r4,#0]  ; flagA
0001ba  f0400010          ORR      r0,r0,#0x10
0001be  6020              STR      r0,[r4,#0]  ; flagA
                  |L3.448|
;;;105    					}
;;;106    				}
;;;107    			}
;;;108    		}
;;;109    //=======================================以下是命令16，连写寄存器===========================================
;;;110    //功能码16格式:
;;;111    //     地址 命令 写入起始地址高  写入起始地址低 写入字数高  写入字数低 写入字节数  数据高 数据低 ......CRC高 CRC低
;;;112    //返回数据格式:
;;;113    //     地址 命令 写入起始地址高  写入起始地址低  写入字节数高 写入字节数低  CRC高  CRC低 
;;;114    		if (UART_Buffer_Rece[1] == 16)										  
0001c0  f89a0001          LDRB     r0,[r10,#1]  ; UART_Buffer_Rece
0001c4  2810              CMP      r0,#0x10
0001c6  d15b              BNE      |L3.640|
;;;115    		{	
;;;116    			if ((UART_Buffer_Rece[6] == 6) && (UART_Buffer_Rece[3] == 0x00))	//规定连写寄存器的个数
0001c8  f89a0006          LDRB     r0,[r10,#6]  ; UART_Buffer_Rece
0001cc  2806              CMP      r0,#6
0001ce  d157              BNE      |L3.640|
0001d0  f89a0003          LDRB     r0,[r10,#3]  ; UART_Buffer_Rece
0001d4  b9a0              CBNZ     r0,|L3.512|
;;;117    			{
;;;118    				crc_result = (UART_Buffer_Rece[13] << 8) + UART_Buffer_Rece[14];
0001d6  f89a000e          LDRB     r0,[r10,#0xe]  ; UART_Buffer_Rece
0001da  f89a100d          LDRB     r1,[r10,#0xd]  ; UART_Buffer_Rece
0001de  eb002001          ADD      r0,r0,r1,LSL #8
0001e2  9003              STR      r0,[sp,#0xc]
;;;119    				if ((crc_result == Hardware_CRC(UART_Buffer_Rece,13)) ||(crc_result == 0) )	   //检查CRC
0001e4  210d              MOVS     r1,#0xd
0001e6  4886              LDR      r0,|L3.1024|
0001e8  f7fffffe          BL       Hardware_CRC
0001ec  f8bd100c          LDRH     r1,[sp,#0xc]
0001f0  4288              CMP      r0,r1
0001f2  d002              BEQ      |L3.506|
0001f4  f8bd000c          LDRH     r0,[sp,#0xc]
0001f8  b910              CBNZ     r0,|L3.512|
                  |L3.506|
;;;120    				{												
;;;121    					for (var8=0;var8<3;var8++) Run_Control[var8] = (UART_Buffer_Rece[var8*2+7] << 8) + UART_Buffer_Rece[var8*2+8];
0001fa  f8cd9018          STR      r9,[sp,#0x18]
0001fe  e014              B        |L3.554|
                  |L3.512|
000200  e03e              B        |L3.640|
                  |L3.514|
000202  f89d0018          LDRB     r0,[sp,#0x18]
000206  eb0a0040          ADD      r0,r10,r0,LSL #1
00020a  7a00              LDRB     r0,[r0,#8]
00020c  f89d1018          LDRB     r1,[sp,#0x18]
000210  eb0a0141          ADD      r1,r10,r1,LSL #1
000214  79c9              LDRB     r1,[r1,#7]
000216  eb002001          ADD      r0,r0,r1,LSL #8
00021a  f89d1018          LDRB     r1,[sp,#0x18]
00021e  f8450021          STR      r0,[r5,r1,LSL #2]
000222  f89d0018          LDRB     r0,[sp,#0x18]
000226  1c40              ADDS     r0,r0,#1
000228  9006              STR      r0,[sp,#0x18]
                  |L3.554|
00022a  f89d0018          LDRB     r0,[sp,#0x18]
00022e  2803              CMP      r0,#3
000230  d3e7              BCC      |L3.514|
;;;122    
;;;123    					if (UART_Buffer_Rece[0] == ADDR)					  //广播模式不返回数据
000232  f89a0000          LDRB     r0,[r10,#0]  ; UART_Buffer_Rece
000236  7871              LDRB     r1,[r6,#1]  ; ADDR
000238  4288              CMP      r0,r1
00023a  d121              BNE      |L3.640|
;;;124    					{
;;;125    						UART_Buffer_Send[0] = ADDR;
00023c  7870              LDRB     r0,[r6,#1]  ; ADDR
00023e  7018              STRB     r0,[r3,#0]
;;;126    						UART_Buffer_Send[1] = 16;
000240  2010              MOVS     r0,#0x10
000242  7058              STRB     r0,[r3,#1]
;;;127    						UART_Buffer_Send[2] = UART_Buffer_Rece[2];
000244  f89a0002          LDRB     r0,[r10,#2]  ; UART_Buffer_Rece
000248  7098              STRB     r0,[r3,#2]
;;;128    						UART_Buffer_Send[3] = UART_Buffer_Rece[3];
00024a  f89a0003          LDRB     r0,[r10,#3]  ; UART_Buffer_Rece
00024e  70d8              STRB     r0,[r3,#3]
;;;129    						UART_Buffer_Send[4] = UART_Buffer_Rece[4];
000250  f89a0004          LDRB     r0,[r10,#4]  ; UART_Buffer_Rece
000254  7118              STRB     r0,[r3,#4]
;;;130    						UART_Buffer_Send[5] = UART_Buffer_Rece[5];
000256  f89a0005          LDRB     r0,[r10,#5]  ; UART_Buffer_Rece
00025a  7158              STRB     r0,[r3,#5]
;;;131    						crc_result = Hardware_CRC(UART_Buffer_Send,6);	 //计算CRC码
00025c  2106              MOVS     r1,#6
00025e  486a              LDR      r0,|L3.1032|
000260  f7fffffe          BL       Hardware_CRC
000264  9003              STR      r0,[sp,#0xc]
;;;132    						UART_Buffer_Send[6] = crc_result>>8;
000266  f8bd000c          LDRH     r0,[sp,#0xc]
00026a  0a00              LSRS     r0,r0,#8
00026c  7198              STRB     r0,[r3,#6]
;;;133    						UART_Buffer_Send[7] = crc_result;				 
00026e  f8bd000c          LDRH     r0,[sp,#0xc]
000272  71d8              STRB     r0,[r3,#7]
;;;134    						Transmit_BUFFERsize = 8;					     //设置发送字节数长度
000274  f8878000          STRB     r8,[r7,#0]
;;;135    						UART_SEND_flag=1;
000278  6820              LDR      r0,[r4,#0]  ; flagA
00027a  f0400010          ORR      r0,r0,#0x10
00027e  6020              STR      r0,[r4,#0]  ; flagA
                  |L3.640|
;;;136    					}
;;;137    				}
;;;138    			}			 
;;;139    		}
;;;140    	}
;;;141    /*************************************以下为校准部分**************************************************************************/
;;;142    	if (((UART_Buffer_Rece[0] == 0x01)&&(UART_Buffer_Rece[2] == 0xA5))||(flag_ADJ_ON==1))			   //电压校准
000280  f89a0000          LDRB     r0,[r10,#0]  ; UART_Buffer_Rece
000284  f8df8190          LDR      r8,|L3.1048|
000288  2801              CMP      r0,#1
00028a  d103              BNE      |L3.660|
00028c  f89a0002          LDRB     r0,[r10,#2]  ; UART_Buffer_Rece
000290  28a5              CMP      r0,#0xa5
000292  d003              BEQ      |L3.668|
                  |L3.660|
000294  f8980000          LDRB     r0,[r8,#0]  ; flagF
000298  0780              LSLS     r0,r0,#30
00029a  d57d              BPL      |L3.920|
                  |L3.668|
;;;143    	{ 
;;;144    		vu16 crc_result;
;;;145    		crc_result = (UART_Buffer_Rece[6] << 8) + UART_Buffer_Rece[7];
00029c  f89a0007          LDRB     r0,[r10,#7]  ; UART_Buffer_Rece
0002a0  f89a1006          LDRB     r1,[r10,#6]  ; UART_Buffer_Rece
0002a4  eb002001          ADD      r0,r0,r1,LSL #8
0002a8  9006              STR      r0,[sp,#0x18]
;;;146    		if (crc_result == Hardware_CRC(UART_Buffer_Rece,6) )
0002aa  2106              MOVS     r1,#6
0002ac  4854              LDR      r0,|L3.1024|
0002ae  f7fffffe          BL       Hardware_CRC
0002b2  f8bd1018          LDRH     r1,[sp,#0x18]
0002b6  4288              CMP      r0,r1
0002b8  d16e              BNE      |L3.920|
;;;147    		{
;;;148    			if(UART_Buffer_Rece[1] == 0x01)
0002ba  f89a0001          LDRB     r0,[r10,#1]  ; UART_Buffer_Rece
;;;149    			{
;;;150    				flag_ADJ_VL=0;
;;;151    				Modify_A_READ = Vmon1_value;//测量电压值
0002be  f8dfb15c          LDR      r11,|L3.1052|
0002c2  2801              CMP      r0,#1                 ;148
0002c4  d10f              BNE      |L3.742|
0002c6  f8d80000          LDR      r0,[r8,#0]            ;150  ; flagF
0002ca  f0200004          BIC      r0,r0,#4              ;150
0002ce  f8c80000          STR      r0,[r8,#0]            ;150  ; flagF
0002d2  f8db0000          LDR      r0,[r11,#0]  ; Vmon1_value
0002d6  6070              STR      r0,[r6,#4]  ; Modify_A_READ
;;;152    				Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//读取低段
0002d8  f89a0004          LDRB     r0,[r10,#4]  ; UART_Buffer_Rece
0002dc  f89a1003          LDRB     r1,[r10,#3]  ; UART_Buffer_Rece
0002e0  eb002001          ADD      r0,r0,r1,LSL #8
0002e4  60f0              STR      r0,[r6,#0xc]  ; Modify_A_ACT
                  |L3.742|
;;;153    			}
;;;154    			if (UART_Buffer_Rece[1] == 0x02)			   //电压测量校准完成
0002e6  f89a0001          LDRB     r0,[r10,#1]  ; UART_Buffer_Rece
;;;155    			{
;;;156    				vu32 var16;
;;;157    				vu32 var32a;
;;;158    				vu32 var32b;
;;;159    				
;;;160    				vu32 var16a;
;;;161    				vu32 var32c;
;;;162    				vu32 var32d;
;;;163    				Modify_B_READ =Vmon1_value;//测量电压值
;;;164    				Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//读取高段
;;;165    				var32a = Modify_B_ACT;
;;;166    				var32a = var32a - Modify_A_ACT;
;;;167    				var32a = var32a << 12;
;;;168    				var16 = Modify_B_READ - Modify_A_READ;
;;;169    				var32a = var32a / var16;
;;;170    				REG_CorrectionV = var32a;
0002ea  f8df9128          LDR      r9,|L3.1044|
;;;171    				var32a=0;
;;;172    				var32a = Modify_B_ACT;
;;;173    				var32a = var32a << 12;
;;;174    				var32b = Modify_B_READ;
;;;175    				var32b = var32b * REG_CorrectionV;
;;;176    				if (var32a < var32b)
;;;177    				{
;;;178    					var32b = var32b - var32a;
;;;179    					REG_ReadV_Offset = var32b;
;;;180    					Polar |= 0x01;
0002ee  4c45              LDR      r4,|L3.1028|
0002f0  f1a90960          SUB      r9,r9,#0x60           ;170
0002f4  341c              ADDS     r4,r4,#0x1c
;;;181    				}
;;;182    				else 
;;;183    				{
;;;184    					var32a = var32a - var32b;
;;;185    					REG_ReadV_Offset = var32a;
;;;186    					Polar &= ~0x01;
;;;187    				}			
;;;188    				Flash_Write_all();	//参数写进FLASH
;;;189    				Flag_DAC_OFF=0;
0002f6  4f4a              LDR      r7,|L3.1056|
0002f8  f1090530          ADD      r5,r9,#0x30           ;179
0002fc  2802              CMP      r0,#2                 ;154
0002fe  d149              BNE      |L3.916|
000300  f8db0000          LDR      r0,[r11,#0]           ;163  ; Vmon1_value
000304  6130              STR      r0,[r6,#0x10]         ;163  ; Modify_B_READ
000306  f89a0004          LDRB     r0,[r10,#4]           ;164  ; UART_Buffer_Rece
00030a  f89a1003          LDRB     r1,[r10,#3]           ;164  ; UART_Buffer_Rece
00030e  eb002001          ADD      r0,r0,r1,LSL #8       ;164
000312  61b0              STR      r0,[r6,#0x18]         ;164  ; Modify_B_ACT
000314  69b0              LDR      r0,[r6,#0x18]         ;165  ; Modify_B_ACT
000316  9004              STR      r0,[sp,#0x10]         ;165
000318  9804              LDR      r0,[sp,#0x10]         ;166
00031a  68f1              LDR      r1,[r6,#0xc]          ;166  ; Modify_A_ACT
00031c  1a40              SUBS     r0,r0,r1              ;166
00031e  9004              STR      r0,[sp,#0x10]         ;166
000320  9804              LDR      r0,[sp,#0x10]         ;167
000322  0300              LSLS     r0,r0,#12             ;167
000324  9004              STR      r0,[sp,#0x10]         ;167
000326  6930              LDR      r0,[r6,#0x10]         ;168  ; Modify_B_READ
000328  6871              LDR      r1,[r6,#4]            ;168  ; Modify_A_READ
00032a  1a40              SUBS     r0,r0,r1              ;168
00032c  9005              STR      r0,[sp,#0x14]         ;168
00032e  e9dd0104          LDRD     r0,r1,[sp,#0x10]      ;169
000332  fbb0f0f1          UDIV     r0,r0,r1              ;169
000336  9004              STR      r0,[sp,#0x10]         ;169
000338  9804              LDR      r0,[sp,#0x10]         ;170
00033a  f8c90000          STR      r0,[r9,#0]            ;170  ; Correct_Parametet
00033e  69b0              LDR      r0,[r6,#0x18]         ;172  ; Modify_B_ACT
000340  9004              STR      r0,[sp,#0x10]         ;172
000342  9804              LDR      r0,[sp,#0x10]         ;173
000344  0300              LSLS     r0,r0,#12             ;173
000346  9004              STR      r0,[sp,#0x10]         ;173
000348  6930              LDR      r0,[r6,#0x10]         ;174  ; Modify_B_READ
00034a  9003              STR      r0,[sp,#0xc]          ;174
00034c  f8d90000          LDR      r0,[r9,#0]            ;175  ; Correct_Parametet
000350  9903              LDR      r1,[sp,#0xc]          ;175
000352  4348              MULS     r0,r1,r0              ;175
000354  9003              STR      r0,[sp,#0xc]          ;175
000356  e9dd1003          LDRD     r1,r0,[sp,#0xc]       ;176
00035a  4288              CMP      r0,r1                 ;176
00035c  d20a              BCS      |L3.884|
00035e  e9dd1003          LDRD     r1,r0,[sp,#0xc]       ;178
000362  1a08              SUBS     r0,r1,r0              ;178
000364  9003              STR      r0,[sp,#0xc]          ;178
000366  9803              LDR      r0,[sp,#0xc]          ;179
000368  6028              STR      r0,[r5,#0]            ;179  ; Correct_Strong
00036a  7820              LDRB     r0,[r4,#0]            ;180  ; correct_por
00036c  f0400001          ORR      r0,r0,#1              ;180
000370  7020              STRB     r0,[r4,#0]            ;180
000372  e009              B        |L3.904|
                  |L3.884|
000374  e9dd1003          LDRD     r1,r0,[sp,#0xc]       ;184
000378  1a40              SUBS     r0,r0,r1              ;184
00037a  9004              STR      r0,[sp,#0x10]         ;184
00037c  9804              LDR      r0,[sp,#0x10]         ;185
00037e  6028              STR      r0,[r5,#0]            ;185  ; Correct_Strong
000380  7820              LDRB     r0,[r4,#0]            ;186  ; correct_por
000382  f0200001          BIC      r0,r0,#1              ;186
000386  7020              STRB     r0,[r4,#0]            ;186
                  |L3.904|
000388  f7fffffe          BL       Flash_Write_all
00038c  6838              LDR      r0,[r7,#0]  ; flagB
00038e  f0200008          BIC      r0,r0,#8
000392  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.916|
;;;190    			}
;;;191    			
;;;192    			
;;;193    	/************************************负载电流测量和控制校准*****************************************************************/
;;;194    			if (UART_Buffer_Rece[1] == 0x03)			   //CC模式校准
000394  4650              MOV      r0,r10
000396  e000              B        |L3.922|
                  |L3.920|
000398  e3fe              B        |L3.2968|
                  |L3.922|
00039a  f89a2001          LDRB     r2,[r10,#1]  ; UART_Buffer_Rece
;;;195    			{
;;;196    				Modify_A_READ = Imon1_value;//
00039e  4921              LDR      r1,|L3.1060|
;;;197    				Modify_C_READ = Contr_Laod;//
0003a0  f8dfa084          LDR      r10,|L3.1064|
0003a4  2a03              CMP      r2,#3                 ;194
0003a6  d10d              BNE      |L3.964|
0003a8  680a              LDR      r2,[r1,#0]            ;196  ; Imon1_value
0003aa  6072              STR      r2,[r6,#4]            ;196  ; Modify_A_READ
0003ac  f8ba2000          LDRH     r2,[r10,#0]  ; Contr_Laod
0003b0  60b2              STR      r2,[r6,#8]  ; Modify_C_READ
;;;198    				Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0003b2  7902              LDRB     r2,[r0,#4]  ; UART_Buffer_Rece
0003b4  78c3              LDRB     r3,[r0,#3]  ; UART_Buffer_Rece
0003b6  eb022203          ADD      r2,r2,r3,LSL #8
0003ba  60f2              STR      r2,[r6,#0xc]  ; Modify_A_ACT
;;;199    				Flag_DAC_OFF=1;//
0003bc  683a              LDR      r2,[r7,#0]  ; flagB
0003be  f0420208          ORR      r2,r2,#8
0003c2  603a              STR      r2,[r7,#0]  ; flagB
                  |L3.964|
;;;200    			}
;;;201    
;;;202    			if (UART_Buffer_Rece[1] == 0x04)			   //
0003c4  480e              LDR      r0,|L3.1024|
0003c6  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
0003c8  2804              CMP      r0,#4
0003ca  d17d              BNE      |L3.1224|
;;;203    			{
;;;204    				vu32 var16;
;;;205    				vu32 var32a;
;;;206    				vu32 var32b;
;;;207    				
;;;208    				vu32 var16a;
;;;209    				vu32 var32c;
;;;210    				vu32 var32d;
;;;211    				
;;;212    				Modify_B_READ = Imon1_value;
0003cc  6808              LDR      r0,[r1,#0]  ; Imon1_value
0003ce  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;213    				Modify_D_READ = Contr_Laod;
0003d0  f8ba0000          LDRH     r0,[r10,#0]  ; Contr_Laod
0003d4  6170              STR      r0,[r6,#0x14]  ; Modify_D_READ
;;;214    				Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0003d6  480a              LDR      r0,|L3.1024|
0003d8  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
0003da  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
0003dc  eb012000          ADD      r0,r1,r0,LSL #8
0003e0  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;215    				
;;;216    				var32a = Modify_B_ACT;
0003e2  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
0003e4  9004              STR      r0,[sp,#0x10]
;;;217    				var32a = var32a - Modify_A_ACT;
0003e6  9804              LDR      r0,[sp,#0x10]
0003e8  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
0003ea  1a40              SUBS     r0,r0,r1
0003ec  9004              STR      r0,[sp,#0x10]
;;;218    				var32a = var32a << 12;
0003ee  9804              LDR      r0,[sp,#0x10]
0003f0  0300              LSLS     r0,r0,#12
0003f2  9004              STR      r0,[sp,#0x10]
;;;219    				var16 = Modify_B_READ - Modify_A_READ;
0003f4  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
0003f6  6871              LDR      r1,[r6,#4]  ; Modify_A_READ
0003f8  1a40              SUBS     r0,r0,r1
0003fa  9005              STR      r0,[sp,#0x14]
;;;220    				var32a = var32a / var16;
0003fc  e016              B        |L3.1068|
0003fe  0000              DCW      0x0000
                  |L3.1024|
                          DCD      UART_Buffer_Rece
                  |L3.1028|
                          DCD      ||area_number.8||
                  |L3.1032|
                          DCD      UART_Buffer_Send
                  |L3.1036|
                          DCD      Transmit_BUFFERsize
                  |L3.1040|
                          DCD      flagA
                  |L3.1044|
                          DCD      ||.bss||+0x60
                  |L3.1048|
                          DCD      flagF
                  |L3.1052|
                          DCD      Vmon1_value
                  |L3.1056|
                          DCD      flagB
                  |L3.1060|
                          DCD      Imon1_value
                  |L3.1064|
                          DCD      Contr_Laod
                  |L3.1068|
00042c  e9dd0104          LDRD     r0,r1,[sp,#0x10]
000430  fbb0f0f1          UDIV     r0,r0,r1
000434  9004              STR      r0,[sp,#0x10]
;;;221    				REG_Load_A = var32a;
000436  9804              LDR      r0,[sp,#0x10]
000438  f8c90004          STR      r0,[r9,#4]  ; Correct_Parametet
;;;222    				var32a = Modify_B_ACT;
00043c  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
00043e  9004              STR      r0,[sp,#0x10]
;;;223    				var32a = var32a << 12;
000440  9804              LDR      r0,[sp,#0x10]
000442  0300              LSLS     r0,r0,#12
000444  9004              STR      r0,[sp,#0x10]
;;;224    				var32b = Modify_B_READ;
000446  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
000448  9003              STR      r0,[sp,#0xc]
;;;225    				var32b = var32b * REG_Load_A;
00044a  f8d90004          LDR      r0,[r9,#4]  ; Correct_Parametet
00044e  9903              LDR      r1,[sp,#0xc]
000450  4348              MULS     r0,r1,r0
000452  9003              STR      r0,[sp,#0xc]
;;;226    				if (var32a < var32b)
000454  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000458  4288              CMP      r0,r1
00045a  d20a              BCS      |L3.1138|
;;;227    				{
;;;228    					var32b = var32b - var32a;
00045c  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000460  1a08              SUBS     r0,r1,r0
000462  9003              STR      r0,[sp,#0xc]
;;;229    					REG_LoadA_Offset = var32b;
000464  9803              LDR      r0,[sp,#0xc]
000466  6068              STR      r0,[r5,#4]  ; Correct_Strong
;;;230    					Polar1 |= 0x01;
000468  7860              LDRB     r0,[r4,#1]  ; correct_por
00046a  f0400001          ORR      r0,r0,#1
00046e  7060              STRB     r0,[r4,#1]
000470  e009              B        |L3.1158|
                  |L3.1138|
;;;231    				}
;;;232    				else 
;;;233    				{
;;;234    					var32a = var32a - var32b;
000472  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000476  1a40              SUBS     r0,r0,r1
000478  9004              STR      r0,[sp,#0x10]
;;;235    					REG_LoadA_Offset = var32a;
00047a  9804              LDR      r0,[sp,#0x10]
00047c  6068              STR      r0,[r5,#4]  ; Correct_Strong
;;;236    					Polar1 &= ~0x01;					
00047e  7860              LDRB     r0,[r4,#1]  ; correct_por
000480  f0200001          BIC      r0,r0,#1
000484  7060              STRB     r0,[r4,#1]
                  |L3.1158|
;;;237    				}
;;;238    	//---------------------------------------------------------------------------------//
;;;239    				var32c = Modify_B_ACT; 
000486  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
000488  9001              STR      r0,[sp,#4]
;;;240    				var32c = var32c - Modify_A_ACT;
00048a  9801              LDR      r0,[sp,#4]
00048c  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
00048e  1a40              SUBS     r0,r0,r1
000490  9001              STR      r0,[sp,#4]
;;;241    				var32c = var32c << 12;
000492  9801              LDR      r0,[sp,#4]
000494  0300              LSLS     r0,r0,#12
000496  9001              STR      r0,[sp,#4]
;;;242    				var16a=Modify_D_READ-Modify_C_READ;
000498  6970              LDR      r0,[r6,#0x14]  ; Modify_D_READ
00049a  68b1              LDR      r1,[r6,#8]  ; Modify_C_READ
00049c  1a40              SUBS     r0,r0,r1
00049e  9002              STR      r0,[sp,#8]
;;;243    				var16a=var16a*2;
0004a0  9802              LDR      r0,[sp,#8]
0004a2  0040              LSLS     r0,r0,#1
0004a4  9002              STR      r0,[sp,#8]
;;;244    				var32c=var32c/var16a;
0004a6  e9dd0101          LDRD     r0,r1,[sp,#4]
0004aa  fbb0f0f1          UDIV     r0,r0,r1
0004ae  9001              STR      r0,[sp,#4]
;;;245    				SET_LoadA = var32c;
0004b0  9801              LDR      r0,[sp,#4]
0004b2  f8c90008          STR      r0,[r9,#8]  ; Correct_Parametet
;;;246    				var32c = Modify_B_ACT;
0004b6  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
0004b8  9001              STR      r0,[sp,#4]
;;;247    				var32c = var32c << 12;
0004ba  9801              LDR      r0,[sp,#4]
0004bc  0300              LSLS     r0,r0,#12
0004be  9001              STR      r0,[sp,#4]
;;;248    				var32d = SET_LoadA;
0004c0  f8d90008          LDR      r0,[r9,#8]  ; Correct_Parametet
0004c4  9000              STR      r0,[sp,#0]
;;;249    				var32d = var32d * (Modify_D_READ*2);
0004c6  e000              B        |L3.1226|
                  |L3.1224|
0004c8  e023              B        |L3.1298|
                  |L3.1226|
0004ca  9800              LDR      r0,[sp,#0]
0004cc  6971              LDR      r1,[r6,#0x14]  ; Modify_D_READ
0004ce  4348              MULS     r0,r1,r0
0004d0  0040              LSLS     r0,r0,#1
0004d2  9000              STR      r0,[sp,#0]
;;;250    				if (var32c < var32d)
0004d4  e9dd1000          LDRD     r1,r0,[sp,#0]
0004d8  4288              CMP      r0,r1
0004da  d20a              BCS      |L3.1266|
;;;251    				{
;;;252    					var32d = var32d - var32c;
0004dc  e9dd0100          LDRD     r0,r1,[sp,#0]
0004e0  1a40              SUBS     r0,r0,r1
0004e2  9000              STR      r0,[sp,#0]
;;;253    					SET_LoadA_Offset = var32d;
0004e4  9800              LDR      r0,[sp,#0]
0004e6  60a8              STR      r0,[r5,#8]  ; Correct_Strong
;;;254    					Polar1 |= 0x04;
0004e8  7860              LDRB     r0,[r4,#1]  ; correct_por
0004ea  f0400004          ORR      r0,r0,#4
0004ee  7060              STRB     r0,[r4,#1]
0004f0  e009              B        |L3.1286|
                  |L3.1266|
;;;255    				}
;;;256    				else 
;;;257    				{
;;;258    					var32c = var32c - var32d;
0004f2  e9dd1000          LDRD     r1,r0,[sp,#0]
0004f6  1a40              SUBS     r0,r0,r1
0004f8  9001              STR      r0,[sp,#4]
;;;259    					SET_LoadA_Offset = var32c;
0004fa  9801              LDR      r0,[sp,#4]
0004fc  60a8              STR      r0,[r5,#8]  ; Correct_Strong
;;;260    					Polar1 &= ~0x04;
0004fe  7860              LDRB     r0,[r4,#1]  ; correct_por
000500  f0200004          BIC      r0,r0,#4
000504  7060              STRB     r0,[r4,#1]
                  |L3.1286|
;;;261    				}
;;;262    				Flash_Write_all ();	
000506  f7fffffe          BL       Flash_Write_all
;;;263    				Flag_DAC_OFF =0;
00050a  6838              LDR      r0,[r7,#0]  ; flagB
00050c  f0200008          BIC      r0,r0,#8
000510  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1298|
;;;264    			}
;;;265    	/*************************************负载CV模式电压控制校准**************************************************************/
;;;266    			if(UART_Buffer_Rece[1] == 0x05)
000512  48fe              LDR      r0,|L3.2316|
000514  7841              LDRB     r1,[r0,#1]  ; UART_Buffer_Rece
000516  2905              CMP      r1,#5
000518  d10a              BNE      |L3.1328|
;;;267    			{
;;;268    				Modify_A_READ = Vmon1_value;//测量电压值
00051a  f8db1000          LDR      r1,[r11,#0]  ; Vmon1_value
00051e  6071              STR      r1,[r6,#4]  ; Modify_A_READ
;;;269    				Modify_C_READ = Contr_Laod;//设置电压值
000520  f8ba1000          LDRH     r1,[r10,#0]  ; Contr_Laod
000524  60b1              STR      r1,[r6,#8]  ; Modify_C_READ
;;;270    				Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//读取低段
000526  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000528  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
00052a  eb012102          ADD      r1,r1,r2,LSL #8
00052e  60f1              STR      r1,[r6,#0xc]  ; Modify_A_ACT
                  |L3.1328|
;;;271    			}
;;;272    			if (UART_Buffer_Rece[1] == 0x06)			   //电压测量校准完成
000530  48f6              LDR      r0,|L3.2316|
000532  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
000534  2806              CMP      r0,#6
000536  d17b              BNE      |L3.1584|
;;;273    			{
;;;274    				vu32 var16;
;;;275    				vu32 var32a;
;;;276    				vu32 var32b;
;;;277    				
;;;278    				vu32 var16a;
;;;279    				vu32 var32c;
;;;280    				vu32 var32d;
;;;281    				
;;;282    				Modify_B_READ =Vmon1_value;//测量电压值
000538  f8db0000          LDR      r0,[r11,#0]  ; Vmon1_value
00053c  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;283    				Modify_D_READ =Contr_Laod;//设置电压值
00053e  f8ba0000          LDRH     r0,[r10,#0]  ; Contr_Laod
000542  6170              STR      r0,[r6,#0x14]  ; Modify_D_READ
;;;284    				Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//读取高段
000544  48f1              LDR      r0,|L3.2316|
000546  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000548  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
00054a  eb012000          ADD      r0,r1,r0,LSL #8
00054e  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;285    				var32a = Modify_B_ACT;
000550  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
000552  9004              STR      r0,[sp,#0x10]
;;;286    				var32a = var32a - Modify_A_ACT;
000554  9804              LDR      r0,[sp,#0x10]
000556  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
000558  1a40              SUBS     r0,r0,r1
00055a  9004              STR      r0,[sp,#0x10]
;;;287    				var32a = var32a << 12;
00055c  9804              LDR      r0,[sp,#0x10]
00055e  0300              LSLS     r0,r0,#12
000560  9004              STR      r0,[sp,#0x10]
;;;288    				var16 = Modify_B_READ - Modify_A_READ;
000562  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
000564  6871              LDR      r1,[r6,#4]  ; Modify_A_READ
000566  1a40              SUBS     r0,r0,r1
000568  9005              STR      r0,[sp,#0x14]
;;;289    				var32a = var32a / var16;
00056a  e9dd0104          LDRD     r0,r1,[sp,#0x10]
00056e  fbb0f0f1          UDIV     r0,r0,r1
000572  9004              STR      r0,[sp,#0x10]
;;;290    				REG_LoadV = var32a;
000574  9804              LDR      r0,[sp,#0x10]
000576  f8c9000c          STR      r0,[r9,#0xc]  ; Correct_Parametet
;;;291    				var32a=0;
00057a  f04f0b00          MOV      r11,#0
;;;292    				var32a = Modify_B_ACT;
00057e  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
000580  9004              STR      r0,[sp,#0x10]
;;;293    				var32a = var32a << 12;
000582  9804              LDR      r0,[sp,#0x10]
000584  0300              LSLS     r0,r0,#12
000586  9004              STR      r0,[sp,#0x10]
;;;294    				var32b = Modify_B_READ;
000588  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
00058a  9003              STR      r0,[sp,#0xc]
;;;295    				var32b = var32b * REG_LoadV;
00058c  f8d9000c          LDR      r0,[r9,#0xc]  ; Correct_Parametet
000590  9903              LDR      r1,[sp,#0xc]
000592  4348              MULS     r0,r1,r0
000594  9003              STR      r0,[sp,#0xc]
;;;296    				if (var32a < var32b)
000596  e9dd1003          LDRD     r1,r0,[sp,#0xc]
00059a  4288              CMP      r0,r1
00059c  d20a              BCS      |L3.1460|
;;;297    				{
;;;298    					var32b = var32b - var32a;
00059e  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0005a2  1a40              SUBS     r0,r0,r1
0005a4  9003              STR      r0,[sp,#0xc]
;;;299    					REG_LoadV_Offset = var32b;
0005a6  9803              LDR      r0,[sp,#0xc]
0005a8  60e8              STR      r0,[r5,#0xc]  ; Correct_Strong
;;;300    					Polar2 |= 0x01;
0005aa  78a0              LDRB     r0,[r4,#2]  ; correct_por
0005ac  f0400001          ORR      r0,r0,#1
0005b0  70a0              STRB     r0,[r4,#2]
0005b2  e009              B        |L3.1480|
                  |L3.1460|
;;;301    				}
;;;302    				else 
;;;303    				{
;;;304    					var32a = var32a - var32b;
0005b4  e9dd1003          LDRD     r1,r0,[sp,#0xc]
0005b8  1a40              SUBS     r0,r0,r1
0005ba  9004              STR      r0,[sp,#0x10]
;;;305    					REG_LoadV_Offset = var32a;
0005bc  9804              LDR      r0,[sp,#0x10]
0005be  60e8              STR      r0,[r5,#0xc]  ; Correct_Strong
;;;306    					Polar2 &= ~0x01;
0005c0  78a0              LDRB     r0,[r4,#2]  ; correct_por
0005c2  f0200001          BIC      r0,r0,#1
0005c6  70a0              STRB     r0,[r4,#2]
                  |L3.1480|
;;;307    				}
;;;308    	//---------------------------------------------------------------------------------------//			
;;;309    				var32c = Modify_B_ACT; //CV模式电压控制校准
0005c8  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
0005ca  9001              STR      r0,[sp,#4]
;;;310    				var32c = var32c - Modify_A_ACT;
0005cc  9801              LDR      r0,[sp,#4]
0005ce  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
0005d0  1a40              SUBS     r0,r0,r1
0005d2  9001              STR      r0,[sp,#4]
;;;311    				var32c = var32c << 12;
0005d4  9801              LDR      r0,[sp,#4]
0005d6  0300              LSLS     r0,r0,#12
0005d8  9001              STR      r0,[sp,#4]
;;;312    				var16a=Modify_D_READ-Modify_C_READ;
0005da  6970              LDR      r0,[r6,#0x14]  ; Modify_D_READ
0005dc  68b1              LDR      r1,[r6,#8]  ; Modify_C_READ
0005de  1a40              SUBS     r0,r0,r1
0005e0  9002              STR      r0,[sp,#8]
;;;313    				var16a=(var16a*2);
0005e2  9802              LDR      r0,[sp,#8]
0005e4  0040              LSLS     r0,r0,#1
0005e6  9002              STR      r0,[sp,#8]
;;;314    				var32c=var32c/var16a;
0005e8  e9dd0101          LDRD     r0,r1,[sp,#4]
0005ec  fbb0f0f1          UDIV     r0,r0,r1
0005f0  9001              STR      r0,[sp,#4]
;;;315    				SET_LoadV = var32c;
0005f2  9801              LDR      r0,[sp,#4]
0005f4  f8c90010          STR      r0,[r9,#0x10]  ; Correct_Parametet
;;;316    				var32c = Modify_B_ACT;
0005f8  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
0005fa  9001              STR      r0,[sp,#4]
;;;317    				var32c = var32c << 12;
0005fc  9801              LDR      r0,[sp,#4]
0005fe  0300              LSLS     r0,r0,#12
000600  9001              STR      r0,[sp,#4]
;;;318    				var32d = SET_LoadV;
000602  f8d90010          LDR      r0,[r9,#0x10]  ; Correct_Parametet
000606  9000              STR      r0,[sp,#0]
;;;319    				var32d = var32d * (Modify_D_READ*2);
000608  9800              LDR      r0,[sp,#0]
00060a  6971              LDR      r1,[r6,#0x14]  ; Modify_D_READ
00060c  4348              MULS     r0,r1,r0
00060e  0040              LSLS     r0,r0,#1
000610  9000              STR      r0,[sp,#0]
;;;320    				if (var32c < var32d)
000612  e9dd1000          LDRD     r1,r0,[sp,#0]
000616  4288              CMP      r0,r1
000618  d20b              BCS      |L3.1586|
;;;321    				{
;;;322    					var32d = var32d - var32c;
00061a  e9dd0100          LDRD     r0,r1,[sp,#0]
00061e  1a40              SUBS     r0,r0,r1
000620  9000              STR      r0,[sp,#0]
;;;323    					SET_LoadV_Offset = var32d;
000622  9800              LDR      r0,[sp,#0]
000624  6128              STR      r0,[r5,#0x10]  ; Correct_Strong
;;;324    					Polar2 |= 0x04;
000626  78a0              LDRB     r0,[r4,#2]  ; correct_por
000628  f0400004          ORR      r0,r0,#4
00062c  70a0              STRB     r0,[r4,#2]
00062e  e00a              B        |L3.1606|
                  |L3.1584|
000630  e00d              B        |L3.1614|
                  |L3.1586|
;;;325    				}
;;;326    				else 
;;;327    				{
;;;328    					var32c = var32c - var32d;
000632  e9dd1000          LDRD     r1,r0,[sp,#0]
000636  1a40              SUBS     r0,r0,r1
000638  9001              STR      r0,[sp,#4]
;;;329    					SET_LoadV_Offset = var32c;
00063a  9801              LDR      r0,[sp,#4]
00063c  6128              STR      r0,[r5,#0x10]  ; Correct_Strong
;;;330    					Polar2 &= ~0x04;
00063e  78a0              LDRB     r0,[r4,#2]  ; correct_por
000640  f0200004          BIC      r0,r0,#4
000644  70a0              STRB     r0,[r4,#2]
                  |L3.1606|
;;;331    				}
;;;332    	//---------------------------------------------------------------------------------------//
;;;333    				Flash_Write_all();	//参数写进FLASH
000646  f7fffffe          BL       Flash_Write_all
;;;334    				DAC_Flag=0;
00064a  f886b000          STRB     r11,[r6,#0]
                  |L3.1614|
;;;335    			}
;;;336    	/*************************************内阻校准**************************************************************************/
;;;337    			if(UART_Buffer_Rece[1] == 0x07||flag_ADJ_VL==1)
00064e  f8dfb2bc          LDR      r11,|L3.2316|
000652  f89b0001          LDRB     r0,[r11,#1]  ; UART_Buffer_Rece
000656  2807              CMP      r0,#7
000658  d003              BEQ      |L3.1634|
00065a  f8980000          LDRB     r0,[r8,#0]  ; flagF
00065e  0740              LSLS     r0,r0,#29
000660  d509              BPL      |L3.1654|
                  |L3.1634|
;;;338    			{
;;;339    				Modify_A_READ = Rmon_value;//测量电压值
000662  48ab              LDR      r0,|L3.2320|
000664  8800              LDRH     r0,[r0,#0]  ; Rmon_value
000666  6070              STR      r0,[r6,#4]  ; Modify_A_READ
;;;340    				Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//读取低段
000668  f89b0004          LDRB     r0,[r11,#4]  ; UART_Buffer_Rece
00066c  f89b1003          LDRB     r1,[r11,#3]  ; UART_Buffer_Rece
000670  eb002001          ADD      r0,r0,r1,LSL #8
000674  60f0              STR      r0,[r6,#0xc]  ; Modify_A_ACT
                  |L3.1654|
;;;341    			}
;;;342    			if (UART_Buffer_Rece[1] == 0x08||flag_ADJ_VH==1)			   //电压测量校准完成
000676  f89b0001          LDRB     r0,[r11,#1]  ; UART_Buffer_Rece
00067a  2808              CMP      r0,#8
00067c  d003              BEQ      |L3.1670|
00067e  f8980000          LDRB     r0,[r8,#0]  ; flagF
000682  0700              LSLS     r0,r0,#28
000684  d55c              BPL      |L3.1856|
                  |L3.1670|
;;;343    			{
;;;344    				vu16 var16;
;;;345    				vu32 var32a;
;;;346    				vu32 var32b;		
;;;347    				vu16 var16a;
;;;348    				vu32 var32c;
;;;349    				vu32 var32d;
;;;350    				Modify_B_READ =Rmon_value;//测量电压值
000686  48a2              LDR      r0,|L3.2320|
000688  8800              LDRH     r0,[r0,#0]  ; Rmon_value
00068a  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;351    				flag_OverV=1;
00068c  49a1              LDR      r1,|L3.2324|
00068e  6808              LDR      r0,[r1,#0]  ; flagG
000690  f0400002          ORR      r0,r0,#2
000694  6008              STR      r0,[r1,#0]  ; flagG
;;;352    				Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//读取高段
000696  f89b1004          LDRB     r1,[r11,#4]  ; UART_Buffer_Rece
00069a  f89b2003          LDRB     r2,[r11,#3]  ; UART_Buffer_Rece
00069e  eb012102          ADD      r1,r1,r2,LSL #8
0006a2  61b1              STR      r1,[r6,#0x18]  ; Modify_B_ACT
;;;353    				if(flag_OverV==1)//只有当有数据写入时才能将校准数据写入FLASH
0006a4  0780              LSLS     r0,r0,#30
0006a6  d545              BPL      |L3.1844|
;;;354    				{
;;;355    					var32a = Modify_B_ACT;
0006a8  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
0006aa  9004              STR      r0,[sp,#0x10]
;;;356    					var32a = var32a - Modify_A_ACT;
0006ac  9804              LDR      r0,[sp,#0x10]
0006ae  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
0006b0  1a40              SUBS     r0,r0,r1
0006b2  9004              STR      r0,[sp,#0x10]
;;;357    					var32a = var32a << 12;
0006b4  9804              LDR      r0,[sp,#0x10]
0006b6  0300              LSLS     r0,r0,#12
0006b8  9004              STR      r0,[sp,#0x10]
;;;358    					var16 = Modify_B_READ - Modify_A_READ;
0006ba  6931              LDR      r1,[r6,#0x10]  ; Modify_B_READ
0006bc  6870              LDR      r0,[r6,#4]  ; Modify_A_READ
0006be  1a08              SUBS     r0,r1,r0
0006c0  9005              STR      r0,[sp,#0x14]
;;;359    					var32a = var32a / var16;
0006c2  f8bd1014          LDRH     r1,[sp,#0x14]
0006c6  9804              LDR      r0,[sp,#0x10]
0006c8  fbb0f0f1          UDIV     r0,r0,r1
0006cc  9004              STR      r0,[sp,#0x10]
;;;360    					REG_CorrectionR = var32a;
0006ce  9804              LDR      r0,[sp,#0x10]
0006d0  f8c90014          STR      r0,[r9,#0x14]  ; Correct_Parametet
;;;361    					var32a=0;
;;;362    					var32a = Modify_B_ACT;
0006d4  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
0006d6  9004              STR      r0,[sp,#0x10]
;;;363    					var32a = var32a << 12;
0006d8  9804              LDR      r0,[sp,#0x10]
0006da  0300              LSLS     r0,r0,#12
0006dc  9004              STR      r0,[sp,#0x10]
;;;364    					var32b = Modify_B_READ;
0006de  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
0006e0  9003              STR      r0,[sp,#0xc]
;;;365    					var32b = var32b * REG_CorrectionR;
0006e2  f8d90014          LDR      r0,[r9,#0x14]  ; Correct_Parametet
0006e6  9903              LDR      r1,[sp,#0xc]
0006e8  4348              MULS     r0,r1,r0
0006ea  9003              STR      r0,[sp,#0xc]
;;;366    					if (var32a < var32b)
0006ec  e9dd1003          LDRD     r1,r0,[sp,#0xc]
0006f0  4288              CMP      r0,r1
0006f2  d20a              BCS      |L3.1802|
;;;367    					{
;;;368    						var32b = var32b - var32a;
0006f4  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0006f8  1a40              SUBS     r0,r0,r1
0006fa  9003              STR      r0,[sp,#0xc]
;;;369    						REG_ReadR_Offset = var32b;
0006fc  9803              LDR      r0,[sp,#0xc]
0006fe  6168              STR      r0,[r5,#0x14]  ; Correct_Strong
;;;370    						Polar3 |= 0x01;
000700  78e0              LDRB     r0,[r4,#3]  ; correct_por
000702  f0400001          ORR      r0,r0,#1
000706  70e0              STRB     r0,[r4,#3]
000708  e009              B        |L3.1822|
                  |L3.1802|
;;;371    					}
;;;372    					else 
;;;373    					{
;;;374    						var32a = var32a - var32b;
00070a  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00070e  1a08              SUBS     r0,r1,r0
000710  9004              STR      r0,[sp,#0x10]
;;;375    						REG_ReadR_Offset = var32a;
000712  9804              LDR      r0,[sp,#0x10]
000714  6168              STR      r0,[r5,#0x14]  ; Correct_Strong
;;;376    						Polar3 &= ~0x01;
000716  78e0              LDRB     r0,[r4,#3]  ; correct_por
000718  f0200001          BIC      r0,r0,#1
00071c  70e0              STRB     r0,[r4,#3]
                  |L3.1822|
;;;377    					}
;;;378    		//---------------------------------------------------------------------------------------//
;;;379    					Flash_Write_all();	//参数写进FLASH
00071e  f7fffffe          BL       Flash_Write_all
;;;380    					flag_OverV=0;
000722  487c              LDR      r0,|L3.2324|
000724  6801              LDR      r1,[r0,#0]  ; flagG
000726  f0210102          BIC      r1,r1,#2
00072a  6001              STR      r1,[r0,#0]  ; flagG
;;;381    					Flag_DAC_OFF=0;
00072c  6838              LDR      r0,[r7,#0]  ; flagB
00072e  f0200008          BIC      r0,r0,#8
000732  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1844|
;;;382    				}
;;;383    				flag_ADJ_VH=0;//清掉标志位防止一直进入
000734  f8d80000          LDR      r0,[r8,#0]  ; flagF
000738  f0200008          BIC      r0,r0,#8
00073c  f8c80000          STR      r0,[r8,#0]  ; flagF
                  |L3.1856|
;;;384    			}		
;;;385    	/*******************************电源CC模式电流测量和控制校准******************************************/	
;;;386    			if (UART_Buffer_Rece[1] == 0x09||flag_ADJ_ALCC==1)			   //电流测量校准
000740  f89b1001          LDRB     r1,[r11,#1]  ; UART_Buffer_Rece
000744  4658              MOV      r0,r11
;;;387    			{
;;;388    				Modify_A_READ = Imon_value;//测量电流
000746  f8dfb1d0          LDR      r11,|L3.2328|
00074a  2909              CMP      r1,#9                 ;386
00074c  d003              BEQ      |L3.1878|
00074e  f8981000          LDRB     r1,[r8,#0]            ;386  ; flagF
000752  06c9              LSLS     r1,r1,#27             ;386
000754  d50a              BPL      |L3.1900|
                  |L3.1878|
000756  f8bb1000          LDRH     r1,[r11,#0]  ; Imon_value
00075a  6071              STR      r1,[r6,#4]  ; Modify_A_READ
;;;389    				Modify_C_READ = Contr_Current;//设置电流
00075c  496f              LDR      r1,|L3.2332|
00075e  8809              LDRH     r1,[r1,#0]  ; Contr_Current
000760  60b1              STR      r1,[r6,#8]  ; Modify_C_READ
;;;390    				Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000762  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000764  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
000766  eb012102          ADD      r1,r1,r2,LSL #8
00076a  60f1              STR      r1,[r6,#0xc]  ; Modify_A_ACT
                  |L3.1900|
;;;391    			}
;;;392    
;;;393    			if (UART_Buffer_Rece[1] == 0x0A||flag_ADJ_AHCC==1)			   //电流测量校准完成
00076c  4867              LDR      r0,|L3.2316|
00076e  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
000770  280a              CMP      r0,#0xa
000772  d003              BEQ      |L3.1916|
000774  f8980000          LDRB     r0,[r8,#0]  ; flagF
000778  0680              LSLS     r0,r0,#26
00077a  d57c              BPL      |L3.2166|
                  |L3.1916|
;;;394    			{
;;;395    				vu16 var16;
;;;396    				vu32 var32a;
;;;397    				vu32 var32b;
;;;398    				
;;;399    				vu16 var16a;
;;;400    				vu32 var32c;
;;;401    				vu32 var32d;
;;;402    				
;;;403    				Modify_D_READ = Contr_Current;
00077c  4867              LDR      r0,|L3.2332|
00077e  8800              LDRH     r0,[r0,#0]  ; Contr_Current
000780  6170              STR      r0,[r6,#0x14]  ; Modify_D_READ
;;;404    				Modify_B_READ = Imon_value;
000782  f8bb0000          LDRH     r0,[r11,#0]  ; Imon_value
000786  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;405    				Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000788  4860              LDR      r0,|L3.2316|
00078a  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
00078c  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
00078e  eb012000          ADD      r0,r1,r0,LSL #8
000792  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;406    				var32a = Modify_B_ACT;
000794  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
000796  9004              STR      r0,[sp,#0x10]
;;;407    				var32a = var32a - Modify_A_ACT;
000798  9804              LDR      r0,[sp,#0x10]
00079a  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
00079c  1a40              SUBS     r0,r0,r1
00079e  9004              STR      r0,[sp,#0x10]
;;;408    				var32a = var32a << 14;
0007a0  9804              LDR      r0,[sp,#0x10]
0007a2  0380              LSLS     r0,r0,#14
0007a4  9004              STR      r0,[sp,#0x10]
;;;409    				var16 = Modify_B_READ - Modify_A_READ;
0007a6  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
0007a8  6871              LDR      r1,[r6,#4]  ; Modify_A_READ
0007aa  1a40              SUBS     r0,r0,r1
0007ac  9005              STR      r0,[sp,#0x14]
;;;410    				var32a = var32a / var16;
0007ae  f8bd0014          LDRH     r0,[sp,#0x14]
0007b2  9904              LDR      r1,[sp,#0x10]
0007b4  fbb1f0f0          UDIV     r0,r1,r0
0007b8  9004              STR      r0,[sp,#0x10]
;;;411    				REG_POWERA = var32a;
0007ba  9804              LDR      r0,[sp,#0x10]
0007bc  f8c90018          STR      r0,[r9,#0x18]  ; Correct_Parametet
;;;412    				var32a = Modify_B_ACT;
0007c0  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
0007c2  9004              STR      r0,[sp,#0x10]
;;;413    				var32a = var32a << 14;
0007c4  9804              LDR      r0,[sp,#0x10]
0007c6  0380              LSLS     r0,r0,#14
0007c8  9004              STR      r0,[sp,#0x10]
;;;414    				var32b = Modify_B_READ;
0007ca  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
0007cc  9003              STR      r0,[sp,#0xc]
;;;415    				var32b = var32b * REG_POWERA;
0007ce  f8d90018          LDR      r0,[r9,#0x18]  ; Correct_Parametet
0007d2  9903              LDR      r1,[sp,#0xc]
0007d4  4348              MULS     r0,r1,r0
0007d6  9003              STR      r0,[sp,#0xc]
;;;416    				if (var32a < var32b)
0007d8  e9dd1003          LDRD     r1,r0,[sp,#0xc]
0007dc  4288              CMP      r0,r1
0007de  d20a              BCS      |L3.2038|
;;;417    				{
;;;418    					var32b = var32b - var32a;
0007e0  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0007e4  1a40              SUBS     r0,r0,r1
0007e6  9003              STR      r0,[sp,#0xc]
;;;419    					REG_POWERA_Offset = var32b;
0007e8  9803              LDR      r0,[sp,#0xc]
0007ea  61a8              STR      r0,[r5,#0x18]  ; Correct_Strong
;;;420    					Polar4 |= 0x01;
0007ec  7920              LDRB     r0,[r4,#4]  ; correct_por
0007ee  f0400001          ORR      r0,r0,#1
0007f2  7120              STRB     r0,[r4,#4]
0007f4  e009              B        |L3.2058|
                  |L3.2038|
;;;421    				}
;;;422    				else 
;;;423    				{
;;;424    					var32a = var32a - var32b;
0007f6  e9dd1003          LDRD     r1,r0,[sp,#0xc]
0007fa  1a40              SUBS     r0,r0,r1
0007fc  9004              STR      r0,[sp,#0x10]
;;;425    					REG_POWERA_Offset = var32a;
0007fe  9804              LDR      r0,[sp,#0x10]
000800  61a8              STR      r0,[r5,#0x18]  ; Correct_Strong
;;;426    					Polar4 &= ~0x01;					//电流测量系数和零点校准完成
000802  7920              LDRB     r0,[r4,#4]  ; correct_por
000804  f0200001          BIC      r0,r0,#1
000808  7120              STRB     r0,[r4,#4]
                  |L3.2058|
;;;427    				}
;;;428    		//---------------------------------------------------------------------------------//
;;;429    				var32c = Modify_B_ACT; //设置电流校准
00080a  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
00080c  9001              STR      r0,[sp,#4]
;;;430    				var32c = var32c - Modify_A_ACT;
00080e  9801              LDR      r0,[sp,#4]
000810  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
000812  1a40              SUBS     r0,r0,r1
000814  9001              STR      r0,[sp,#4]
;;;431    				var32c = var32c << 14;
000816  9801              LDR      r0,[sp,#4]
000818  0380              LSLS     r0,r0,#14
00081a  9001              STR      r0,[sp,#4]
;;;432    				var16a=Modify_D_READ-Modify_C_READ;
00081c  6970              LDR      r0,[r6,#0x14]  ; Modify_D_READ
00081e  68b1              LDR      r1,[r6,#8]  ; Modify_C_READ
000820  1a40              SUBS     r0,r0,r1
000822  9002              STR      r0,[sp,#8]
;;;433    				var16a=var16a*2;
000824  f8bd1008          LDRH     r1,[sp,#8]
000828  f64f70ff          MOV      r0,#0xffff
00082c  ea000041          AND      r0,r0,r1,LSL #1
000830  9002              STR      r0,[sp,#8]
;;;434    				var32c=var32c/var16a;
000832  f8bd1008          LDRH     r1,[sp,#8]
000836  9801              LDR      r0,[sp,#4]
000838  fbb0f0f1          UDIV     r0,r0,r1
00083c  9001              STR      r0,[sp,#4]
;;;435    				SET_POWERA = var32c;
00083e  9801              LDR      r0,[sp,#4]
000840  f8c9001c          STR      r0,[r9,#0x1c]  ; Correct_Parametet
;;;436    				var32c = Modify_B_ACT;
000844  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
000846  9001              STR      r0,[sp,#4]
;;;437    				var32c = var32c << 14;
000848  9801              LDR      r0,[sp,#4]
00084a  0380              LSLS     r0,r0,#14
00084c  9001              STR      r0,[sp,#4]
;;;438    				var32d = SET_POWERA;
00084e  f8d9001c          LDR      r0,[r9,#0x1c]  ; Correct_Parametet
000852  9000              STR      r0,[sp,#0]
;;;439    				var32d = var32d * (Modify_D_READ*2);
000854  9800              LDR      r0,[sp,#0]
000856  6971              LDR      r1,[r6,#0x14]  ; Modify_D_READ
000858  4348              MULS     r0,r1,r0
00085a  0040              LSLS     r0,r0,#1
00085c  9000              STR      r0,[sp,#0]
;;;440    				if (var32c < var32d)
00085e  e9dd1000          LDRD     r1,r0,[sp,#0]
000862  4288              CMP      r0,r1
000864  d20c              BCS      |L3.2176|
;;;441    				{
;;;442    					var32d = var32d - var32c;
000866  e9dd0100          LDRD     r0,r1,[sp,#0]
00086a  1a40              SUBS     r0,r0,r1
00086c  9000              STR      r0,[sp,#0]
;;;443    					SET_POWERA_Offset = var32d;
00086e  9800              LDR      r0,[sp,#0]
000870  61e8              STR      r0,[r5,#0x1c]  ; Correct_Strong
;;;444    					Polar4 |= 0x04;
000872  7920              LDRB     r0,[r4,#4]  ; correct_por
000874  e000              B        |L3.2168|
                  |L3.2166|
000876  e013              B        |L3.2208|
                  |L3.2168|
000878  f0400004          ORR      r0,r0,#4
00087c  7120              STRB     r0,[r4,#4]
00087e  e009              B        |L3.2196|
                  |L3.2176|
;;;445    				}
;;;446    				else 
;;;447    				{
;;;448    					var32c = var32c - var32d;
000880  e9dd1000          LDRD     r1,r0,[sp,#0]
000884  1a40              SUBS     r0,r0,r1
000886  9001              STR      r0,[sp,#4]
;;;449    					SET_POWERA_Offset = var32c;
000888  9801              LDR      r0,[sp,#4]
00088a  61e8              STR      r0,[r5,#0x1c]  ; Correct_Strong
;;;450    					Polar4 &= ~0x04;
00088c  7920              LDRB     r0,[r4,#4]  ; correct_por
00088e  f0200004          BIC      r0,r0,#4
000892  7120              STRB     r0,[r4,#4]
                  |L3.2196|
;;;451    				}
;;;452    				Flash_Write_all ();	
000894  f7fffffe          BL       Flash_Write_all
;;;453    				Flag_DAC_OFF=0;
000898  6838              LDR      r0,[r7,#0]  ; flagB
00089a  f0200008          BIC      r0,r0,#8
00089e  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.2208|
;;;454    			}
;;;455    	/*******************************电源电压控制和测量校准******************************************/	
;;;456    			if (UART_Buffer_Rece[1] == 0x0B)			   //电流测量校准
0008a0  481a              LDR      r0,|L3.2316|
0008a2  7842              LDRB     r2,[r0,#1]  ; UART_Buffer_Rece
;;;457    			{
;;;458    				Modify_A_READ = Vmon_value;//测量电流
0008a4  491e              LDR      r1,|L3.2336|
0008a6  2a0b              CMP      r2,#0xb               ;456
0008a8  d109              BNE      |L3.2238|
0008aa  880a              LDRH     r2,[r1,#0]  ; Vmon_value
0008ac  6072              STR      r2,[r6,#4]  ; Modify_A_READ
;;;459    				Modify_C_READ = Contr_Voltage;//设置电流
0008ae  4a1d              LDR      r2,|L3.2340|
0008b0  8812              LDRH     r2,[r2,#0]  ; Contr_Voltage
0008b2  60b2              STR      r2,[r6,#8]  ; Modify_C_READ
;;;460    				Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0008b4  7902              LDRB     r2,[r0,#4]  ; UART_Buffer_Rece
0008b6  78c3              LDRB     r3,[r0,#3]  ; UART_Buffer_Rece
0008b8  eb022203          ADD      r2,r2,r3,LSL #8
0008bc  60f2              STR      r2,[r6,#0xc]  ; Modify_A_ACT
                  |L3.2238|
;;;461    			}
;;;462    
;;;463    			if (UART_Buffer_Rece[1] == 0x0C)			   //电流测量校准完成
0008be  4813              LDR      r0,|L3.2316|
0008c0  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
0008c2  280c              CMP      r0,#0xc
0008c4  d17e              BNE      |L3.2500|
;;;464    			{
;;;465    				vu16 var16;
;;;466    				vu32 var32a;
;;;467    				vu32 var32b;
;;;468    				
;;;469    				vu16 var16a;
;;;470    				vu32 var32c;
;;;471    				vu32 var32d;
;;;472    				
;;;473    				Modify_D_READ = Contr_Voltage;
0008c6  4817              LDR      r0,|L3.2340|
0008c8  8800              LDRH     r0,[r0,#0]  ; Contr_Voltage
0008ca  6170              STR      r0,[r6,#0x14]  ; Modify_D_READ
;;;474    				Modify_B_READ = Vmon_value;
0008cc  8808              LDRH     r0,[r1,#0]  ; Vmon_value
0008ce  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;475    				Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0008d0  480e              LDR      r0,|L3.2316|
0008d2  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
0008d4  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
0008d6  eb012000          ADD      r0,r1,r0,LSL #8
0008da  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;476    				var32a = Modify_B_ACT;
0008dc  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
0008de  9004              STR      r0,[sp,#0x10]
;;;477    				var32a = var32a - Modify_A_ACT;
0008e0  9804              LDR      r0,[sp,#0x10]
0008e2  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
0008e4  1a40              SUBS     r0,r0,r1
0008e6  9004              STR      r0,[sp,#0x10]
;;;478    				var32a = var32a << 14;
0008e8  9804              LDR      r0,[sp,#0x10]
0008ea  0380              LSLS     r0,r0,#14
0008ec  9004              STR      r0,[sp,#0x10]
;;;479    				var16 = Modify_B_READ - Modify_A_READ;
0008ee  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
0008f0  6871              LDR      r1,[r6,#4]  ; Modify_A_READ
0008f2  1a40              SUBS     r0,r0,r1
0008f4  9005              STR      r0,[sp,#0x14]
;;;480    				var32a = var32a / var16;
0008f6  f8bd1014          LDRH     r1,[sp,#0x14]
0008fa  9804              LDR      r0,[sp,#0x10]
0008fc  fbb0f0f1          UDIV     r0,r0,r1
000900  9004              STR      r0,[sp,#0x10]
;;;481    				REG_POWERV = var32a;
000902  9804              LDR      r0,[sp,#0x10]
000904  f8c90020          STR      r0,[r9,#0x20]  ; Correct_Parametet
;;;482    				var32a = Modify_B_ACT;
000908  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
00090a  e00d              B        |L3.2344|
                  |L3.2316|
                          DCD      UART_Buffer_Rece
                  |L3.2320|
                          DCD      Rmon_value
                  |L3.2324|
                          DCD      flagG
                  |L3.2328|
                          DCD      Imon_value
                  |L3.2332|
                          DCD      Contr_Current
                  |L3.2336|
                          DCD      Vmon_value
                  |L3.2340|
                          DCD      Contr_Voltage
                  |L3.2344|
000928  9004              STR      r0,[sp,#0x10]
;;;483    				var32a = var32a << 14;
00092a  9804              LDR      r0,[sp,#0x10]
00092c  0380              LSLS     r0,r0,#14
00092e  9004              STR      r0,[sp,#0x10]
;;;484    				var32b = Modify_B_READ;
000930  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
000932  9003              STR      r0,[sp,#0xc]
;;;485    				var32b = var32b * REG_POWERV;
000934  f8d90020          LDR      r0,[r9,#0x20]  ; Correct_Parametet
000938  9903              LDR      r1,[sp,#0xc]
00093a  4348              MULS     r0,r1,r0
00093c  9003              STR      r0,[sp,#0xc]
;;;486    				if (var32a < var32b)
00093e  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000942  4288              CMP      r0,r1
000944  d20a              BCS      |L3.2396|
;;;487    				{
;;;488    					var32b = var32b - var32a;
000946  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00094a  1a40              SUBS     r0,r0,r1
00094c  9003              STR      r0,[sp,#0xc]
;;;489    					REG_POWERV_Offset = var32b;
00094e  9803              LDR      r0,[sp,#0xc]
000950  6228              STR      r0,[r5,#0x20]  ; Correct_Strong
;;;490    					Polar5 |= 0x01;
000952  7960              LDRB     r0,[r4,#5]  ; correct_por
000954  f0400001          ORR      r0,r0,#1
000958  7160              STRB     r0,[r4,#5]
00095a  e009              B        |L3.2416|
                  |L3.2396|
;;;491    				}
;;;492    				else 
;;;493    				{
;;;494    					var32a = var32a - var32b;
00095c  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000960  1a40              SUBS     r0,r0,r1
000962  9004              STR      r0,[sp,#0x10]
;;;495    					REG_POWERV_Offset = var32a;
000964  9804              LDR      r0,[sp,#0x10]
000966  6228              STR      r0,[r5,#0x20]  ; Correct_Strong
;;;496    					Polar5 &= ~0x01;					
000968  7960              LDRB     r0,[r4,#5]  ; correct_por
00096a  f0200001          BIC      r0,r0,#1
00096e  7160              STRB     r0,[r4,#5]
                  |L3.2416|
;;;497    				}
;;;498    		//---------------------------------------------------------------------------------//
;;;499    				var32c = Modify_B_ACT; //设置电压校准
000970  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
000972  9001              STR      r0,[sp,#4]
;;;500    				var32c = var32c - Modify_A_ACT;
000974  9801              LDR      r0,[sp,#4]
000976  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
000978  1a40              SUBS     r0,r0,r1
00097a  9001              STR      r0,[sp,#4]
;;;501    				var32c = var32c << 14;
00097c  9801              LDR      r0,[sp,#4]
00097e  0380              LSLS     r0,r0,#14
000980  9001              STR      r0,[sp,#4]
;;;502    				var16a=Modify_D_READ-Modify_C_READ;
000982  6970              LDR      r0,[r6,#0x14]  ; Modify_D_READ
000984  68b1              LDR      r1,[r6,#8]  ; Modify_C_READ
000986  1a40              SUBS     r0,r0,r1
000988  9002              STR      r0,[sp,#8]
;;;503    				var16a=var16a*2;
00098a  f8bd1008          LDRH     r1,[sp,#8]
00098e  f64f70ff          MOV      r0,#0xffff
000992  ea000041          AND      r0,r0,r1,LSL #1
000996  9002              STR      r0,[sp,#8]
;;;504    				var32c=var32c/var16a;
000998  f8bd1008          LDRH     r1,[sp,#8]
00099c  9801              LDR      r0,[sp,#4]
00099e  fbb0f0f1          UDIV     r0,r0,r1
0009a2  9001              STR      r0,[sp,#4]
;;;505    				SET_POWERV = var32c;
0009a4  9801              LDR      r0,[sp,#4]
0009a6  f8c90024          STR      r0,[r9,#0x24]  ; Correct_Parametet
;;;506    				var32c = Modify_B_ACT;
0009aa  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
0009ac  9001              STR      r0,[sp,#4]
;;;507    				var32c = var32c << 14;
0009ae  9801              LDR      r0,[sp,#4]
0009b0  0380              LSLS     r0,r0,#14
0009b2  9001              STR      r0,[sp,#4]
;;;508    				var32d = SET_POWERV;
0009b4  f8d90024          LDR      r0,[r9,#0x24]  ; Correct_Parametet
0009b8  9000              STR      r0,[sp,#0]
;;;509    				var32d = var32d * (Modify_D_READ*2);
0009ba  9800              LDR      r0,[sp,#0]
0009bc  6971              LDR      r1,[r6,#0x14]  ; Modify_D_READ
0009be  4348              MULS     r0,r1,r0
0009c0  0040              LSLS     r0,r0,#1
0009c2  e000              B        |L3.2502|
                  |L3.2500|
0009c4  e01f              B        |L3.2566|
                  |L3.2502|
0009c6  9000              STR      r0,[sp,#0]
;;;510    				if (var32c < var32d)
0009c8  e9dd1000          LDRD     r1,r0,[sp,#0]
0009cc  4288              CMP      r0,r1
0009ce  d20a              BCS      |L3.2534|
;;;511    				{
;;;512    					var32d = var32d - var32c;
0009d0  e9dd0100          LDRD     r0,r1,[sp,#0]
0009d4  1a40              SUBS     r0,r0,r1
0009d6  9000              STR      r0,[sp,#0]
;;;513    					SET_POWERV_Offset = var32d;
0009d8  9800              LDR      r0,[sp,#0]
0009da  6268              STR      r0,[r5,#0x24]  ; Correct_Strong
;;;514    					Polar5 |= 0x04;
0009dc  7960              LDRB     r0,[r4,#5]  ; correct_por
0009de  f0400004          ORR      r0,r0,#4
0009e2  7160              STRB     r0,[r4,#5]
0009e4  e009              B        |L3.2554|
                  |L3.2534|
;;;515    				}
;;;516    				else 
;;;517    				{
;;;518    					var32c = var32c - var32d;
0009e6  e9dd1000          LDRD     r1,r0,[sp,#0]
0009ea  1a40              SUBS     r0,r0,r1
0009ec  9001              STR      r0,[sp,#4]
;;;519    					SET_POWERV_Offset = var32c;
0009ee  9801              LDR      r0,[sp,#4]
0009f0  6268              STR      r0,[r5,#0x24]  ; Correct_Strong
;;;520    					Polar5 &= ~0x04;
0009f2  7960              LDRB     r0,[r4,#5]  ; correct_por
0009f4  f0200004          BIC      r0,r0,#4
0009f8  7160              STRB     r0,[r4,#5]
                  |L3.2554|
;;;521    				}
;;;522    				Flash_Write_all ();	
0009fa  f7fffffe          BL       Flash_Write_all
;;;523    				Flag_DAC_OFF=0;
0009fe  6838              LDR      r0,[r7,#0]  ; flagB
000a00  f0200008          BIC      r0,r0,#8
000a04  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.2566|
;;;524    			}
;;;525    	/****************电源电流测量校准**********************************/
;;;526    			if (UART_Buffer_Rece[1] == 0x0D)			  
000a06  4884              LDR      r0,|L3.3096|
000a08  7841              LDRB     r1,[r0,#1]  ; UART_Buffer_Rece
000a0a  290d              CMP      r1,#0xd
000a0c  d107              BNE      |L3.2590|
;;;527    			{ 
;;;528    				Modify_A_READ = Imon_value;
000a0e  f8bb1000          LDRH     r1,[r11,#0]  ; Imon_value
000a12  6071              STR      r1,[r6,#4]  ; Modify_A_READ
;;;529    				Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000a14  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000a16  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
000a18  eb012102          ADD      r1,r1,r2,LSL #8
000a1c  60f1              STR      r1,[r6,#0xc]  ; Modify_A_ACT
                  |L3.2590|
;;;530    			}
;;;531    
;;;532    			if (UART_Buffer_Rece[1] == 0x0E)			   
000a1e  487e              LDR      r0,|L3.3096|
000a20  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
000a22  280e              CMP      r0,#0xe
000a24  d149              BNE      |L3.2746|
;;;533    			{
;;;534    				vu16 var16;
;;;535    				vu32 var32a;
;;;536    				vu32 var32b;
;;;537    				
;;;538    				vu16 var16a;
;;;539    				vu32 var32c;
;;;540    				vu32 var32d;
;;;541    				
;;;542    				Modify_B_READ = Imon_value;
000a26  f8bb0000          LDRH     r0,[r11,#0]  ; Imon_value
000a2a  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;543    				Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000a2c  487a              LDR      r0,|L3.3096|
000a2e  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000a30  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
000a32  eb012000          ADD      r0,r1,r0,LSL #8
000a36  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;544    				var32a = Modify_B_ACT;
000a38  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
000a3a  9004              STR      r0,[sp,#0x10]
;;;545    				var32a = var32a - Modify_A_ACT;
000a3c  9804              LDR      r0,[sp,#0x10]
000a3e  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
000a40  1a40              SUBS     r0,r0,r1
000a42  9004              STR      r0,[sp,#0x10]
;;;546    				var32a = var32a << 14;
000a44  9804              LDR      r0,[sp,#0x10]
000a46  0380              LSLS     r0,r0,#14
000a48  9004              STR      r0,[sp,#0x10]
;;;547    				var16 = Modify_B_READ - Modify_A_READ;
000a4a  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
000a4c  6871              LDR      r1,[r6,#4]  ; Modify_A_READ
000a4e  1a40              SUBS     r0,r0,r1
000a50  9005              STR      r0,[sp,#0x14]
;;;548    				var32a = var32a / var16;
000a52  f8bd1014          LDRH     r1,[sp,#0x14]
000a56  9804              LDR      r0,[sp,#0x10]
000a58  fbb0f0f1          UDIV     r0,r0,r1
000a5c  9004              STR      r0,[sp,#0x10]
;;;549    				CON_POWERA = var32a;
000a5e  9804              LDR      r0,[sp,#0x10]
000a60  f8c90028          STR      r0,[r9,#0x28]  ; Correct_Parametet
;;;550    				var32a = Modify_B_ACT;
000a64  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
000a66  9004              STR      r0,[sp,#0x10]
;;;551    				var32a = var32a << 14;
000a68  9804              LDR      r0,[sp,#0x10]
000a6a  0380              LSLS     r0,r0,#14
000a6c  9004              STR      r0,[sp,#0x10]
;;;552    				var32b = Modify_B_READ;
000a6e  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
000a70  9003              STR      r0,[sp,#0xc]
;;;553    				var32b = var32b * CON_POWERA;
000a72  f8d90028          LDR      r0,[r9,#0x28]  ; Correct_Parametet
000a76  9903              LDR      r1,[sp,#0xc]
000a78  4348              MULS     r0,r1,r0
000a7a  9003              STR      r0,[sp,#0xc]
;;;554    				if (var32a < var32b)
000a7c  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000a80  4288              CMP      r0,r1
000a82  d20a              BCS      |L3.2714|
;;;555    				{
;;;556    					var32b = var32b - var32a;
000a84  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000a88  1a08              SUBS     r0,r1,r0
000a8a  9003              STR      r0,[sp,#0xc]
;;;557    					CON_POWERA_Offset = var32b;
000a8c  9803              LDR      r0,[sp,#0xc]
000a8e  62a8              STR      r0,[r5,#0x28]  ; Correct_Strong
;;;558    					Polar3 |= 0x04;
000a90  78e0              LDRB     r0,[r4,#3]  ; correct_por
000a92  f0400004          ORR      r0,r0,#4
000a96  70e0              STRB     r0,[r4,#3]
000a98  e009              B        |L3.2734|
                  |L3.2714|
;;;559    				}
;;;560    				else 
;;;561    				{
;;;562    					var32a = var32a - var32b;
000a9a  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000a9e  1a40              SUBS     r0,r0,r1
000aa0  9004              STR      r0,[sp,#0x10]
;;;563    					CON_POWERA_Offset = var32a;
000aa2  9804              LDR      r0,[sp,#0x10]
000aa4  62a8              STR      r0,[r5,#0x28]  ; Correct_Strong
;;;564    					Polar3 &= ~0x04;					
000aa6  78e0              LDRB     r0,[r4,#3]  ; correct_por
000aa8  f0200004          BIC      r0,r0,#4
000aac  70e0              STRB     r0,[r4,#3]
                  |L3.2734|
;;;565    				}
;;;566    				Flash_Write_all ();	
000aae  f7fffffe          BL       Flash_Write_all
;;;567    				Flag_DAC_OFF=0;
000ab2  6838              LDR      r0,[r7,#0]  ; flagB
000ab4  f0200008          BIC      r0,r0,#8
000ab8  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.2746|
;;;568    			}
;;;569    	/*******************************内阻低端校准**********************************************/
;;;570    			if(UART_Buffer_Rece[1] == 0x0F||flag_ADJ_VL==1)
000aba  f8dfb15c          LDR      r11,|L3.3096|
000abe  f89b0001          LDRB     r0,[r11,#1]  ; UART_Buffer_Rece
000ac2  280f              CMP      r0,#0xf
000ac4  d003              BEQ      |L3.2766|
000ac6  f8980000          LDRB     r0,[r8,#0]  ; flagF
000aca  0740              LSLS     r0,r0,#29
000acc  d509              BPL      |L3.2786|
                  |L3.2766|
;;;571    			{
;;;572    				Modify_A_READ = Rmon_value;//测量电压值
000ace  4853              LDR      r0,|L3.3100|
000ad0  8800              LDRH     r0,[r0,#0]  ; Rmon_value
000ad2  6070              STR      r0,[r6,#4]  ; Modify_A_READ
;;;573    				Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//读取低段
000ad4  f89b0004          LDRB     r0,[r11,#4]  ; UART_Buffer_Rece
000ad8  f89b1003          LDRB     r1,[r11,#3]  ; UART_Buffer_Rece
000adc  eb002001          ADD      r0,r0,r1,LSL #8
000ae0  60f0              STR      r0,[r6,#0xc]  ; Modify_A_ACT
                  |L3.2786|
;;;574    			}
;;;575    			if (UART_Buffer_Rece[1] == 0x20||flag_ADJ_VH==1)			   //电压测量校准完成
000ae2  f89b0001          LDRB     r0,[r11,#1]  ; UART_Buffer_Rece
000ae6  2820              CMP      r0,#0x20
000ae8  d003              BEQ      |L3.2802|
000aea  f8980000          LDRB     r0,[r8,#0]  ; flagF
000aee  0700              LSLS     r0,r0,#28
000af0  d55e              BPL      |L3.2992|
                  |L3.2802|
;;;576    			{
;;;577    				vu16 var16;
;;;578    				vu32 var32a;
;;;579    				vu32 var32b;
;;;580    				
;;;581    				vu16 var16a;
;;;582    				vu32 var32c;
;;;583    				vu32 var32d;
;;;584    				Modify_B_READ =Rmon_value;//测量电压值
000af2  484a              LDR      r0,|L3.3100|
000af4  8801              LDRH     r1,[r0,#0]  ; Rmon_value
000af6  4630              MOV      r0,r6
000af8  6131              STR      r1,[r6,#0x10]  ; Modify_B_READ
;;;585    				flag_OverV=1;
000afa  4e49              LDR      r6,|L3.3104|
000afc  6831              LDR      r1,[r6,#0]  ; flagG
000afe  f0410102          ORR      r1,r1,#2
000b02  6031              STR      r1,[r6,#0]  ; flagG
;;;586    				Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//读取高段
000b04  f89b2004          LDRB     r2,[r11,#4]  ; UART_Buffer_Rece
000b08  f89b3003          LDRB     r3,[r11,#3]  ; UART_Buffer_Rece
000b0c  eb022203          ADD      r2,r2,r3,LSL #8
000b10  6182              STR      r2,[r0,#0x18]  ; Modify_B_ACT
;;;587    				if(flag_OverV==1)//只有当有数据写入时才能将校准数据写入FLASH
000b12  0789              LSLS     r1,r1,#30
000b14  d546              BPL      |L3.2980|
;;;588    				{
;;;589    					var32a = Modify_B_ACT;
000b16  6981              LDR      r1,[r0,#0x18]  ; Modify_B_ACT
000b18  9104              STR      r1,[sp,#0x10]
;;;590    					var32a = var32a - Modify_A_ACT;
000b1a  9904              LDR      r1,[sp,#0x10]
000b1c  68c2              LDR      r2,[r0,#0xc]  ; Modify_A_ACT
000b1e  1a89              SUBS     r1,r1,r2
000b20  9104              STR      r1,[sp,#0x10]
;;;591    					var32a = var32a << 12;
000b22  9904              LDR      r1,[sp,#0x10]
000b24  0309              LSLS     r1,r1,#12
000b26  9104              STR      r1,[sp,#0x10]
;;;592    					var16 = Modify_B_READ - Modify_A_READ;
000b28  6901              LDR      r1,[r0,#0x10]  ; Modify_B_READ
000b2a  6842              LDR      r2,[r0,#4]  ; Modify_A_READ
000b2c  1a89              SUBS     r1,r1,r2
000b2e  9105              STR      r1,[sp,#0x14]
;;;593    					var32a = var32a / var16;
000b30  f8bd2014          LDRH     r2,[sp,#0x14]
000b34  9904              LDR      r1,[sp,#0x10]
000b36  fbb1f1f2          UDIV     r1,r1,r2
000b3a  9104              STR      r1,[sp,#0x10]
;;;594    					REG_CorrectionR1 = var32a;
000b3c  9904              LDR      r1,[sp,#0x10]
000b3e  f8c9102c          STR      r1,[r9,#0x2c]  ; Correct_Parametet
;;;595    					var32a=0;
;;;596    					var32a = Modify_B_ACT;
000b42  6981              LDR      r1,[r0,#0x18]  ; Modify_B_ACT
000b44  9104              STR      r1,[sp,#0x10]
;;;597    					var32a = var32a << 12;
000b46  9904              LDR      r1,[sp,#0x10]
000b48  0309              LSLS     r1,r1,#12
000b4a  9104              STR      r1,[sp,#0x10]
;;;598    					var32b = Modify_B_READ;
000b4c  6900              LDR      r0,[r0,#0x10]  ; Modify_B_READ
000b4e  9003              STR      r0,[sp,#0xc]
;;;599    					var32b = var32b * REG_CorrectionR1;
000b50  f8d9002c          LDR      r0,[r9,#0x2c]  ; Correct_Parametet
000b54  9903              LDR      r1,[sp,#0xc]
000b56  4348              MULS     r0,r1,r0
000b58  9003              STR      r0,[sp,#0xc]
;;;600    					if (var32a < var32b)
000b5a  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000b5e  4288              CMP      r0,r1
000b60  d20a              BCS      |L3.2936|
;;;601    					{
;;;602    						var32b = var32b - var32a;
000b62  e9dd0103          LDRD     r0,r1,[sp,#0xc]
000b66  1a40              SUBS     r0,r0,r1
000b68  9003              STR      r0,[sp,#0xc]
;;;603    						REG_ReadR1_Offset = var32b;
000b6a  9803              LDR      r0,[sp,#0xc]
000b6c  62e8              STR      r0,[r5,#0x2c]  ; Correct_Strong
;;;604    						Polar3 |= 0x08;
000b6e  78e0              LDRB     r0,[r4,#3]  ; correct_por
000b70  f0400008          ORR      r0,r0,#8
000b74  70e0              STRB     r0,[r4,#3]
000b76  e009              B        |L3.2956|
                  |L3.2936|
;;;605    					}
;;;606    					else 
;;;607    					{
;;;608    						var32a = var32a - var32b;
000b78  e9dd1003          LDRD     r1,r0,[sp,#0xc]
000b7c  1a40              SUBS     r0,r0,r1
000b7e  9004              STR      r0,[sp,#0x10]
;;;609    						REG_ReadR1_Offset = var32a;
000b80  9804              LDR      r0,[sp,#0x10]
000b82  62e8              STR      r0,[r5,#0x2c]  ; Correct_Strong
;;;610    						Polar3 &= ~0x08;
000b84  78e0              LDRB     r0,[r4,#3]  ; correct_por
000b86  f0200008          BIC      r0,r0,#8
000b8a  70e0              STRB     r0,[r4,#3]
                  |L3.2956|
;;;611    					}
;;;612    		//---------------------------------------------------------------------------------------//
;;;613    					Flash_Write_all();	//参数写进FLASH
000b8c  f7fffffe          BL       Flash_Write_all
;;;614    					flag_OverV=0;
000b90  6830              LDR      r0,[r6,#0]  ; flagG
000b92  f0200002          BIC      r0,r0,#2
000b96  e000              B        |L3.2970|
                  |L3.2968|
000b98  e03a              B        |L3.3088|
                  |L3.2970|
000b9a  6030              STR      r0,[r6,#0]  ; flagG
;;;615    					Flag_DAC_OFF=0;
000b9c  6838              LDR      r0,[r7,#0]  ; flagB
000b9e  f0200008          BIC      r0,r0,#8
000ba2  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.2980|
;;;616    				}
;;;617    				flag_ADJ_VH=0;//清掉标志位防止一直进入
000ba4  f8d80000          LDR      r0,[r8,#0]  ; flagF
000ba8  f0200008          BIC      r0,r0,#8
000bac  f8c80000          STR      r0,[r8,#0]  ; flagF
                  |L3.2992|
;;;618    			}	
;;;619    	/***********接受DAC*******************************************/
;;;620    			if (UART_Buffer_Rece[1] == 0x21)			   
000bb0  f89b0001          LDRB     r0,[r11,#1]  ; UART_Buffer_Rece
000bb4  2821              CMP      r0,#0x21
000bb6  d10b              BNE      |L3.3024|
;;;621    			{
;;;622    				Contr_Laod = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000bb8  f89b0004          LDRB     r0,[r11,#4]  ; UART_Buffer_Rece
000bbc  f89b1003          LDRB     r1,[r11,#3]  ; UART_Buffer_Rece
000bc0  eb002001          ADD      r0,r0,r1,LSL #8
000bc4  f8aa0000          STRH     r0,[r10,#0]
;;;623    				Flag_DAC_OFF=1;
000bc8  6838              LDR      r0,[r7,#0]  ; flagB
000bca  f0400008          ORR      r0,r0,#8
000bce  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.3024|
;;;624    			}
;;;625    			if (UART_Buffer_Rece[1] == 0x22)			   
000bd0  f89b0001          LDRB     r0,[r11,#1]  ; UART_Buffer_Rece
000bd4  2822              CMP      r0,#0x22
000bd6  d10b              BNE      |L3.3056|
;;;626    			{
;;;627    				Contr_Voltage = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000bd8  f89b0004          LDRB     r0,[r11,#4]  ; UART_Buffer_Rece
000bdc  f89b1003          LDRB     r1,[r11,#3]  ; UART_Buffer_Rece
000be0  eb002001          ADD      r0,r0,r1,LSL #8
000be4  490f              LDR      r1,|L3.3108|
000be6  8008              STRH     r0,[r1,#0]
;;;628    				Flag_DAC_OFF=1;
000be8  6838              LDR      r0,[r7,#0]  ; flagB
000bea  f0400008          ORR      r0,r0,#8
000bee  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.3056|
;;;629    			}
;;;630    			if (UART_Buffer_Rece[1] == 0x23)			   
000bf0  f89b0001          LDRB     r0,[r11,#1]  ; UART_Buffer_Rece
000bf4  2823              CMP      r0,#0x23
000bf6  d10b              BNE      |L3.3088|
;;;631    			{
;;;632    				Contr_Current = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000bf8  f89b0004          LDRB     r0,[r11,#4]  ; UART_Buffer_Rece
000bfc  f89b1003          LDRB     r1,[r11,#3]  ; UART_Buffer_Rece
000c00  eb002001          ADD      r0,r0,r1,LSL #8
000c04  4908              LDR      r1,|L3.3112|
000c06  8008              STRH     r0,[r1,#0]
;;;633    				Flag_DAC_OFF=1;
000c08  6838              LDR      r0,[r7,#0]  ; flagB
000c0a  f0400008          ORR      r0,r0,#8
000c0e  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.3088|
;;;634    			}
;;;635    		}
;;;636    //===================================================================================
;;;637    	}
;;;638    }
000c10  b007              ADD      sp,sp,#0x1c
000c12  e8bd8ff0          POP      {r4-r11,pc}
;;;639    //===============================AD值转换成测量值============================================//
                          ENDP

000c16  0000              DCW      0x0000
                  |L3.3096|
                          DCD      UART_Buffer_Rece
                  |L3.3100|
                          DCD      Rmon_value
                  |L3.3104|
                          DCD      flagG
                  |L3.3108|
                          DCD      Contr_Voltage
                  |L3.3112|
                          DCD      Contr_Current

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Correct_Parametet
                          %        48
                  Correct_Strong
                          %        48
                  Run_Control
                          %        56

                          AREA ||.data||, DATA, ALIGN=1

                  ADJ_Write
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  DAC_Flag
000000  00                DCB      0x00
                  ADDR
000001  000000            DCB      0x00,0x00,0x00
                  Modify_A_READ
                          DCD      0x00000000
                  Modify_C_READ
                          DCD      0x00000000
                  Modify_A_ACT
                          DCD      0x00000000
                  Modify_B_READ
                          DCD      0x00000000
                  Modify_D_READ
                          DCD      0x00000000
                  Modify_B_ACT
                          DCD      0x00000000
                  correct_por
                          DCD      0x00000000
000020  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\drive\\modbus.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_modbus_c_bae18981____REV16|
#line 129 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_modbus_c_bae18981____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_modbus_c_bae18981____REVSH|
#line 144
|__asm___8_modbus_c_bae18981____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
