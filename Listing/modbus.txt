; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\modbus.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\modbus.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\modbus.crf ..\drive\modbus.c]
                          THUMB

                          AREA ||i.Hardware_CRC||, CODE, READONLY, ALIGN=1

                  Hardware_CRC PROC
;;;829    //-----------------------------CRC检测--------------------------------------------//
;;;830    vu16 Hardware_CRC(vu8 *p_buffer,vu8 count)    //CRC16
000000  b530              PUSH     {r4,r5,lr}
;;;831    {
000002  4603              MOV      r3,r0
;;;832    	vu16 CRC_Result=0xffff;
000004  f64f70ff          MOV      r0,#0xffff
;;;833    	vu8 i;
;;;834    	if(count==0)
000008  b901              CBNZ     r1,|L1.12|
;;;835    	{
;;;836    		count=1;
00000a  2101              MOVS     r1,#1
                  |L1.12|
;;;837    	}
;;;838    	while(count--)
;;;839    	{
;;;840    		CRC_Result^=*p_buffer;
;;;841    		for(i=0;i<8;i++)
;;;842    		{
;;;843    			if(CRC_Result&1)
;;;844    			{
;;;845    				CRC_Result>>=1;
;;;846    				CRC_Result^=0xA001;
00000c  f24a0401          MOV      r4,#0xa001
                  |L1.16|
000010  000a              MOVS     r2,r1                 ;838
000012  f1a10101          SUB      r1,r1,#1              ;838
000016  b2c9              UXTB     r1,r1                 ;838
000018  d00d              BEQ      |L1.54|
00001a  781a              LDRB     r2,[r3,#0]            ;840
00001c  4050              EORS     r0,r0,r2              ;840
00001e  2200              MOVS     r2,#0                 ;841
                  |L1.32|
000020  07c5              LSLS     r5,r0,#31             ;843
;;;847    			}
;;;848    			else 
;;;849    			{
;;;850    				CRC_Result>>=1;
000022  ea4f0050          LSR      r0,r0,#1
000026  d000              BEQ      |L1.42|
000028  4060              EORS     r0,r0,r4              ;846
                  |L1.42|
00002a  1c52              ADDS     r2,r2,#1              ;841
00002c  b2d2              UXTB     r2,r2                 ;841
00002e  2a08              CMP      r2,#8                 ;841
000030  d3f6              BCC      |L1.32|
;;;851    			}
;;;852    		}
;;;853    		p_buffer++;
000032  1c5b              ADDS     r3,r3,#1
000034  e7ec              B        |L1.16|
                  |L1.54|
;;;854    	}
;;;855    	return CRC_Result;
;;;856    }
000036  bd30              POP      {r4,r5,pc}
                          ENDP


                          AREA ||i.Transformation_ADC||, CODE, READONLY, ALIGN=2

                  Transformation_ADC PROC
;;;607    //===============================AD值转换成测量值============================================//
;;;608    void Transformation_ADC(void)  
000000  b5f0              PUSH     {r4-r7,lr}
;;;609    {
;;;610    	vu32 var32;
;;;611    	vu32 var32a;
;;;612    /*****************************内阻测量电压转换*******************************************/
;;;613    	var32 = Vmon1_value;
000002  4895              LDR      r0,|L2.600|
000004  6800              LDR      r0,[r0,#0]  ; Vmon1_value
;;;614    	var32 = var32 * REG_CorrectionV;  
000006  4b95              LDR      r3,|L2.604|
000008  6819              LDR      r1,[r3,#0]  ; Correct_Parametet
;;;615    	if ((Polar & 0x01) == 0x01)		  
00000a  4c95              LDR      r4,|L2.608|
00000c  4341              MULS     r1,r0,r1              ;614
00000e  7820              LDRB     r0,[r4,#0]  ; correct_por
000010  07c2              LSLS     r2,r0,#31
;;;616    	{
;;;617    		if (var32 < REG_ReadV_Offset) 
000012  f1030030          ADD      r0,r3,#0x30
;;;618    		{
;;;619    			var32 = 0;
;;;620    		}
;;;621    		else var32 = var32 - REG_ReadV_Offset;
;;;622    	}
;;;623    	else var32 = var32 + REG_ReadV_Offset;
000016  6802              LDR      r2,[r0,#0]  ; Correct_Strong
000018  d006              BEQ      |L2.40|
00001a  428a              CMP      r2,r1                 ;617
00001c  d901              BLS      |L2.34|
00001e  2100              MOVS     r1,#0                 ;619
000020  e003              B        |L2.42|
                  |L2.34|
000022  6802              LDR      r2,[r0,#0]            ;621  ; Correct_Strong
000024  1a89              SUBS     r1,r1,r2              ;621
000026  e000              B        |L2.42|
                  |L2.40|
000028  4411              ADD      r1,r1,r2
                  |L2.42|
;;;624    	var32 = var32 >> 12;
00002a  0b09              LSRS     r1,r1,#12
;;;625    	if (var32 < 30) var32 = 0;				  //40mV以下清零
00002c  291e              CMP      r1,#0x1e
00002e  d200              BCS      |L2.50|
000030  2100              MOVS     r1,#0
                  |L2.50|
;;;626    	Voltage = var32;
000032  4a8a              LDR      r2,|L2.604|
000034  3260              ADDS     r2,r2,#0x60
000036  6291              STR      r1,[r2,#0x28]  ; Run_Control
;;;627    	DISS_Voltage=Voltage;
000038  6a91              LDR      r1,[r2,#0x28]  ; Run_Control
00003a  ee001a10          VMOV     s0,r1
00003e  4989              LDR      r1,|L2.612|
000040  eef80a40          VCVT.F32.U32 s1,s0
;;;628    	DISS_Voltage=DISS_Voltage/1000;//计算显示电压
000044  ed9f0a88          VLDR     s0,|L2.616|
000048  ee801a80          VDIV.F32 s2,s1,s0
00004c  ed811a00          VSTR     s2,[r1,#0]
;;;629    	var32 = 0;
;;;630    	/*******************负载测量电流转换**************************************/
;;;631    	var32 = Imon1_value;
000050  4986              LDR      r1,|L2.620|
000052  680d              LDR      r5,[r1,#0]  ; Imon1_value
;;;632    	var32 = var32 * REG_Load_A;  
000054  6859              LDR      r1,[r3,#4]  ; Correct_Parametet
000056  4369              MULS     r1,r5,r1
;;;633    	if ((Polar1 & 0x01) == 0x01)		  
000058  7865              LDRB     r5,[r4,#1]  ; correct_por
00005a  07ed              LSLS     r5,r5,#31
;;;634    	{
;;;635    		if (var32 < REG_LoadA_Offset) 
;;;636    		{
;;;637    			var32 = 0;
;;;638    		}
;;;639    		else var32 = var32 - REG_LoadA_Offset;
;;;640    	}
;;;641    	else var32 = var32 + REG_LoadA_Offset;
00005c  6845              LDR      r5,[r0,#4]  ; Correct_Strong
00005e  d007              BEQ      |L2.112|
000060  428d              CMP      r5,r1                 ;635
000062  d901              BLS      |L2.104|
000064  2100              MOVS     r1,#0                 ;637
000066  e004              B        |L2.114|
                  |L2.104|
000068  6845              LDR      r5,[r0,#4]            ;639  ; Correct_Strong
00006a  eba10105          SUB      r1,r1,r5              ;639
00006e  e000              B        |L2.114|
                  |L2.112|
000070  4429              ADD      r1,r1,r5
                  |L2.114|
;;;642    	var32 = var32 >> 12;
000072  ea4f3111          LSR      r1,r1,#12
;;;643    	Laod_Current = var32;
000076  6311              STR      r1,[r2,#0x30]  ; Run_Control
;;;644    	DISS_Current=Laod_Current;
000078  6b11              LDR      r1,[r2,#0x30]  ; Run_Control
;;;645    	DISS_Current=DISS_Current/1000;//计算显示电流
;;;646    	var32 = 0;	
;;;647    	/*************************负载电压和电流控制转换**************************************/
;;;648    	if(flag_Load_CC==1)
;;;649    	{
;;;650    		var32 = SET_Current_Laod;
;;;651    		var32=var32<<12;   
;;;652    		if ((Polar1 & 0x04) == 0)			   
;;;653    		{
;;;654    			if (var32 < SET_LoadA_Offset) var32 = 0;
;;;655    			else var32 = var32 - SET_LoadA_Offset;
;;;656    		}
;;;657    		else var32 = var32 + SET_LoadA_Offset;
;;;658    		var32 = var32/SET_LoadA;
;;;659    		var32=var32>>1;
;;;660    		if(Flag_DAC_OFF==0)
00007a  4d7f              LDR      r5,|L2.632|
00007c  ee001a90          VMOV     s1,r1                 ;644
000080  497b              LDR      r1,|L2.624|
;;;661    		{
;;;662    			Contr_Laod = var32;
000082  4e7e              LDR      r6,|L2.636|
000084  eef80a60          VCVT.F32.U32 s1,s1                 ;644
000088  f04f0c00          MOV      r12,#0                ;619
00008c  ee801a80          VDIV.F32 s2,s1,s0              ;645
000090  ed811a00          VSTR     s2,[r1,#0]            ;645
000094  4977              LDR      r1,|L2.628|
000096  682d              LDR      r5,[r5,#0]            ;660
000098  6809              LDR      r1,[r1,#0]            ;648  ; flagD
00009a  0609              LSLS     r1,r1,#24             ;648
00009c  d519              BPL      |L2.210|
00009e  6911              LDR      r1,[r2,#0x10]         ;650  ; Run_Control
0000a0  7867              LDRB     r7,[r4,#1]            ;652  ; correct_por
0000a2  ea4f3101          LSL      r1,r1,#12             ;651
0000a6  077f              LSLS     r7,r7,#29             ;652
0000a8  6887              LDR      r7,[r0,#8]            ;657  ; Correct_Strong
0000aa  d407              BMI      |L2.188|
0000ac  428f              CMP      r7,r1                 ;654
0000ae  d901              BLS      |L2.180|
0000b0  2100              MOVS     r1,#0                 ;654
0000b2  e004              B        |L2.190|
                  |L2.180|
0000b4  6887              LDR      r7,[r0,#8]            ;655  ; Correct_Strong
0000b6  eba10107          SUB      r1,r1,r7              ;655
0000ba  e000              B        |L2.190|
                  |L2.188|
0000bc  4439              ADD      r1,r1,r7              ;657
                  |L2.190|
0000be  689f              LDR      r7,[r3,#8]            ;658  ; Correct_Parametet
0000c0  072d              LSLS     r5,r5,#28             ;660
0000c2  fbb1f1f7          UDIV     r1,r1,r7              ;658
0000c6  ea4f0151          LSR      r1,r1,#1              ;659
0000ca  d400              BMI      |L2.206|
0000cc  8031              STRH     r1,[r6,#0]
                  |L2.206|
;;;663    		}
;;;664    		if(SET_Current_Laod==0)
0000ce  6911              LDR      r1,[r2,#0x10]  ; Run_Control
0000d0  e019              B        |L2.262|
                  |L2.210|
;;;665    		{
;;;666    			Contr_Laod=0;
;;;667    		}
;;;668    		var32 = 0;
;;;669    	}
;;;670    	else
;;;671    	{
;;;672    		var32 = SET_Voltage_Laod;
0000d2  68d1              LDR      r1,[r2,#0xc]  ; Run_Control
;;;673    		var32=var32<<12;   
;;;674    		if ((Polar2 & 0x04) == 0)			   
0000d4  78a7              LDRB     r7,[r4,#2]  ; correct_por
0000d6  ea4f3101          LSL      r1,r1,#12             ;673
0000da  077f              LSLS     r7,r7,#29
0000dc  d408              BMI      |L2.240|
;;;675    		{
;;;676    			if (var32 < SET_LoadA_Offset) var32 = 0;
0000de  6887              LDR      r7,[r0,#8]  ; Correct_Strong
0000e0  428f              CMP      r7,r1
0000e2  d901              BLS      |L2.232|
0000e4  2100              MOVS     r1,#0
0000e6  e005              B        |L2.244|
                  |L2.232|
;;;677    			else var32 = var32 - SET_LoadV_Offset;
0000e8  6907              LDR      r7,[r0,#0x10]  ; Correct_Strong
0000ea  eba10107          SUB      r1,r1,r7
0000ee  e001              B        |L2.244|
                  |L2.240|
;;;678    		}
;;;679    		else var32 = var32 + SET_LoadV_Offset;
0000f0  6907              LDR      r7,[r0,#0x10]  ; Correct_Strong
0000f2  4439              ADD      r1,r1,r7
                  |L2.244|
;;;680    		var32 = var32/SET_LoadV;
0000f4  691f              LDR      r7,[r3,#0x10]  ; Correct_Parametet
;;;681    		var32=var32>>1;
;;;682    		if(Flag_DAC_OFF==0)
0000f6  072d              LSLS     r5,r5,#28
0000f8  fbb1f1f7          UDIV     r1,r1,r7              ;680
0000fc  ea4f0151          LSR      r1,r1,#1              ;681
000100  d400              BMI      |L2.260|
;;;683    		{
;;;684    			Contr_Laod = var32;
000102  8031              STRH     r1,[r6,#0]
                  |L2.260|
;;;685    		}
;;;686    		if(SET_Voltage_Laod==0)
000104  68d1              LDR      r1,[r2,#0xc]  ; Run_Control
                  |L2.262|
000106  b909              CBNZ     r1,|L2.268|
;;;687    		{
;;;688    			Contr_Laod=0;
000108  f8a6c000          STRH     r12,[r6,#0]
                  |L2.268|
;;;689    		}
;;;690    		var32 = 0;
;;;691    	}
;;;692    /*****************************内阻值转换*******************************************/
;;;693    	var32 = Rmon_value;
00010c  495c              LDR      r1,|L2.640|
00010e  880d              LDRH     r5,[r1,#0]  ; Rmon_value
;;;694        if(r_raly == 1)
000110  495c              LDR      r1,|L2.644|
000112  7809              LDRB     r1,[r1,#0]  ; r_raly
000114  2901              CMP      r1,#1
000116  d009              BEQ      |L2.300|
;;;695        {
;;;696            var32 = var32 * REG_CorrectionR;  
;;;697            if ((Polar3 & 0x01) == 0x01)		  
;;;698            {
;;;699                if (var32 < REG_ReadR_Offset) 
;;;700                {
;;;701                    var32 = 0;
;;;702                }
;;;703                else var32 = var32 - REG_ReadR_Offset;
;;;704            }
;;;705            else var32 = var32 + REG_ReadR_Offset;
;;;706            var32 = var32 >> 12;
;;;707            if (var32 < 1)
;;;708            {
;;;709                var32 = 0;				  //?￡
;;;710            }
;;;711            R_VLUE = var32;
;;;712            var32 = 0;
;;;713        }else{
;;;714            var32 = var32 * REG_CorrectionRL;  
000118  6ad9              LDR      r1,[r3,#0x2c]  ; Correct_Parametet
00011a  4369              MULS     r1,r5,r1
;;;715            if ((Polar3 & 0x01) == 0x01)		  
00011c  78e5              LDRB     r5,[r4,#3]  ; correct_por
00011e  07ed              LSLS     r5,r5,#31
;;;716            {
;;;717                if (var32 < REG_ReadRL_Offset) 
;;;718                {
;;;719                    var32 = 0;
;;;720                }
;;;721                else var32 = var32 - REG_ReadRL_Offset;
;;;722            }
;;;723            else var32 = var32 + REG_ReadRL_Offset;
000120  6ac5              LDR      r5,[r0,#0x2c]  ; Correct_Strong
000122  d01e              BEQ      |L2.354|
000124  428d              CMP      r5,r1                 ;717
000126  d919              BLS      |L2.348|
                  |L2.296|
000128  2100              MOVS     r1,#0                 ;719
00012a  e009              B        |L2.320|
                  |L2.300|
00012c  6959              LDR      r1,[r3,#0x14]         ;696  ; Correct_Parametet
00012e  4369              MULS     r1,r5,r1              ;696
000130  78e5              LDRB     r5,[r4,#3]            ;697  ; correct_por
000132  07ed              LSLS     r5,r5,#31             ;697
000134  6945              LDR      r5,[r0,#0x14]         ;705  ; Correct_Strong
000136  d014              BEQ      |L2.354|
000138  428d              CMP      r5,r1                 ;699
00013a  d8f5              BHI      |L2.296|
00013c  6945              LDR      r5,[r0,#0x14]         ;703  ; Correct_Strong
00013e  e00e              B        |L2.350|
                  |L2.320|
000140  0b09              LSRS     r1,r1,#12             ;706
;;;724            var32 = var32 >> 12;
;;;725            if (var32 < 1)
;;;726            {
;;;727                var32 = 0;				  //?￡
;;;728            }
;;;729            R_VLUE = var32;
000142  6351              STR      r1,[r2,#0x34]  ; Run_Control
;;;730            var32 = 0;
;;;731        }  	
;;;732    	/*****************************稳压电源测量电压转换*******************************************/
;;;733    	var32 = Vmon_value;
000144  4950              LDR      r1,|L2.648|
000146  880d              LDRH     r5,[r1,#0]  ; Vmon_value
;;;734    	var32 = var32 * REG_POWERV;  
000148  6a19              LDR      r1,[r3,#0x20]  ; Correct_Parametet
00014a  4369              MULS     r1,r5,r1
;;;735    	if ((Polar5 & 0x01) == 0x01)		  
00014c  7965              LDRB     r5,[r4,#5]  ; correct_por
00014e  07ed              LSLS     r5,r5,#31
;;;736    	{
;;;737    		if (var32 < REG_POWERV_Offset) 
;;;738    		{
;;;739    			var32 = 0;
;;;740    		}
;;;741    		else var32 = var32 - REG_POWERV_Offset;
;;;742    	}
;;;743    	else var32 = var32 + REG_POWERV_Offset;
000150  6a05              LDR      r5,[r0,#0x20]  ; Correct_Strong
000152  d00b              BEQ      |L2.364|
000154  428d              CMP      r5,r1                 ;737
000156  d906              BLS      |L2.358|
000158  2100              MOVS     r1,#0                 ;739
00015a  e008              B        |L2.366|
                  |L2.348|
00015c  6ac5              LDR      r5,[r0,#0x2c]         ;721  ; Correct_Strong
                  |L2.350|
00015e  1b49              SUBS     r1,r1,r5              ;721
000160  e7ee              B        |L2.320|
                  |L2.354|
000162  4429              ADD      r1,r1,r5              ;723
000164  e7ec              B        |L2.320|
                  |L2.358|
000166  6a05              LDR      r5,[r0,#0x20]         ;741  ; Correct_Strong
000168  1b49              SUBS     r1,r1,r5              ;741
00016a  e000              B        |L2.366|
                  |L2.364|
00016c  4429              ADD      r1,r1,r5
                  |L2.366|
;;;744    	var32 = var32 >> 14;
00016e  0b89              LSRS     r1,r1,#14
;;;745    	if (var32 < 40) var32 = 0;				  //40mV以下清零
000170  2928              CMP      r1,#0x28
000172  d200              BCS      |L2.374|
000174  2100              MOVS     r1,#0
                  |L2.374|
;;;746    	POW_Voltage = var32;
000176  6251              STR      r1,[r2,#0x24]  ; Run_Control
;;;747    	DISS_POW_Voltage=POW_Voltage;
000178  6a51              LDR      r1,[r2,#0x24]  ; Run_Control
00017a  ee001a90          VMOV     s1,r1
00017e  4943              LDR      r1,|L2.652|
000180  eef80a60          VCVT.F32.U32 s1,s1
;;;748    	DISS_POW_Voltage=DISS_POW_Voltage/100;//计算显示电压
000184  ed9f1a42          VLDR     s2,|L2.656|
000188  eec01a81          VDIV.F32 s3,s1,s2
00018c  edc11a00          VSTR     s3,[r1,#0]
;;;749    	var32 = 0;
;;;750    /*****************************稳压电源测量电流转换*******************************************/
;;;751    	var32 = Imon_value;
000190  4940              LDR      r1,|L2.660|
000192  880d              LDRH     r5,[r1,#0]  ; Imon_value
;;;752    	if(flag_CC_MODE==1)
000194  4940              LDR      r1,|L2.664|
;;;753    	{
;;;754    		var32 = var32 * REG_POWERA;	   
;;;755    		if ((Polar4 & 0x01) == 0x01)			   
;;;756    		{
;;;757    			if (var32 < REG_POWERA_Offset) var32 = 0;
;;;758    			else var32 = var32 - REG_POWERA_Offset;
;;;759    		}
;;;760    		else
;;;761    		{
;;;762    			var32 = var32 + REG_POWERA_Offset;
;;;763    		}	
;;;764    		var32 = var32 >> 14;
;;;765    		Current = var32;;
;;;766    		DISS_POW_Current=Current;
000196  4e41              LDR      r6,|L2.668|
000198  6809              LDR      r1,[r1,#0]            ;752  ; flagE
00019a  0609              LSLS     r1,r1,#24             ;752
00019c  d50b              BPL      |L2.438|
00019e  6999              LDR      r1,[r3,#0x18]         ;754  ; Correct_Parametet
0001a0  4369              MULS     r1,r5,r1              ;754
0001a2  7925              LDRB     r5,[r4,#4]            ;755  ; correct_por
0001a4  07ed              LSLS     r5,r5,#31             ;755
0001a6  6985              LDR      r5,[r0,#0x18]         ;762  ; Correct_Strong
0001a8  d011              BEQ      |L2.462|
0001aa  428d              CMP      r5,r1                 ;757
0001ac  d901              BLS      |L2.434|
                  |L2.430|
0001ae  2100              MOVS     r1,#0                 ;757
0001b0  e00e              B        |L2.464|
                  |L2.434|
0001b2  6985              LDR      r5,[r0,#0x18]         ;758  ; Correct_Strong
0001b4  e008              B        |L2.456|
                  |L2.438|
;;;767    		DISS_POW_Current=DISS_POW_Current/1000;//计算显示电流
;;;768    	}
;;;769    	else
;;;770    	{
;;;771    		var32 = var32 * CON_POWERA;	   
0001b6  6a99              LDR      r1,[r3,#0x28]  ; Correct_Parametet
0001b8  4369              MULS     r1,r5,r1
;;;772    		if ((Polar3 & 0x04) == 0x04)			   
0001ba  78e5              LDRB     r5,[r4,#3]  ; correct_por
0001bc  076d              LSLS     r5,r5,#29
;;;773    		{
;;;774    			if (var32 < CON_POWERA_Offset) var32 = 0;
;;;775    			else var32 = var32 - CON_POWERA_Offset;
;;;776    		}
;;;777    		else
;;;778    		{
;;;779    			var32 = var32 + CON_POWERA_Offset;
0001be  6a85              LDR      r5,[r0,#0x28]  ; Correct_Strong
0001c0  d505              BPL      |L2.462|
0001c2  428d              CMP      r5,r1                 ;774
0001c4  d8f3              BHI      |L2.430|
0001c6  6a85              LDR      r5,[r0,#0x28]         ;775  ; Correct_Strong
                  |L2.456|
0001c8  eba10105          SUB      r1,r1,r5              ;758
0001cc  e000              B        |L2.464|
                  |L2.462|
0001ce  4429              ADD      r1,r1,r5              ;762
                  |L2.464|
;;;780    		}	
;;;781    		var32 = var32 >> 14;
0001d0  ea4f3191          LSR      r1,r1,#14
;;;782    		Current = var32;;
0001d4  62d1              STR      r1,[r2,#0x2c]  ; Run_Control
;;;783    		DISS_POW_Current=Current;
0001d6  6ad1              LDR      r1,[r2,#0x2c]  ; Run_Control
0001d8  ee001a90          VMOV     s1,r1
0001dc  eef80a60          VCVT.F32.U32 s1,s1
;;;784    		DISS_POW_Current=DISS_POW_Current/1000;//计算显示电流
0001e0  ee801a80          VDIV.F32 s2,s1,s0
0001e4  ed861a00          VSTR     s2,[r6,#0]
;;;785    	}
;;;786    /**************************稳压电源设置电压转换******************************************/
;;;787    	var32 = SET_Voltage;
0001e8  6851              LDR      r1,[r2,#4]  ; Run_Control
;;;788    	var32=var32<<14;   
;;;789    	if ((Polar5 & 0x04) == 0)			   
0001ea  7965              LDRB     r5,[r4,#5]  ; correct_por
0001ec  ea4f3181          LSL      r1,r1,#14             ;788
0001f0  076d              LSLS     r5,r5,#29
;;;790    	{
;;;791    		if (var32 < SET_POWERV_Offset) var32 = 0;
;;;792    		else var32 = var32 - SET_POWERV_Offset;
;;;793    	}
;;;794    	else var32 = var32 + SET_POWERV_Offset;
0001f2  6a45              LDR      r5,[r0,#0x24]  ; Correct_Strong
0001f4  d407              BMI      |L2.518|
0001f6  428d              CMP      r5,r1                 ;791
0001f8  d901              BLS      |L2.510|
0001fa  2100              MOVS     r1,#0                 ;791
0001fc  e004              B        |L2.520|
                  |L2.510|
0001fe  6a45              LDR      r5,[r0,#0x24]         ;792  ; Correct_Strong
000200  eba10105          SUB      r1,r1,r5              ;792
000204  e000              B        |L2.520|
                  |L2.518|
000206  4429              ADD      r1,r1,r5
                  |L2.520|
;;;795    	var32 = var32/SET_POWERV;
000208  6a5d              LDR      r5,[r3,#0x24]  ; Correct_Parametet
00020a  fbb1f1f5          UDIV     r1,r1,r5
;;;796    	var32=var32>>1;
;;;797    	Contr_Voltage = var32;
00020e  4d24              LDR      r5,|L2.672|
000210  ea4f0151          LSR      r1,r1,#1              ;796
000214  8029              STRH     r1,[r5,#0]
;;;798    	if(SET_Voltage==0)
000216  6851              LDR      r1,[r2,#4]  ; Run_Control
000218  b909              CBNZ     r1,|L2.542|
;;;799    	{
;;;800    		Contr_Voltage=0;
00021a  f8a5c000          STRH     r12,[r5,#0]
                  |L2.542|
;;;801    	}
;;;802    	var32 = 0;
;;;803    /**************************稳压电源设置电流转换**************************************/
;;;804    	var32 = SET_Current;
00021e  6891              LDR      r1,[r2,#8]  ; Run_Control
;;;805    	var32=var32<<14;   
;;;806    	if ((Polar4 & 0x04) == 0)			   
000220  7924              LDRB     r4,[r4,#4]  ; correct_por
000222  ea4f3181          LSL      r1,r1,#14             ;805
000226  0764              LSLS     r4,r4,#29
000228  d407              BMI      |L2.570|
;;;807    	{
;;;808    		if (var32 < SET_POWERA_Offset) var32 = 0;
00022a  69c4              LDR      r4,[r0,#0x1c]  ; Correct_Strong
00022c  428c              CMP      r4,r1
00022e  d901              BLS      |L2.564|
000230  2000              MOVS     r0,#0
000232  e004              B        |L2.574|
                  |L2.564|
;;;809    		else var32 = var32 - SET_POWERA_Offset;
000234  69c0              LDR      r0,[r0,#0x1c]  ; Correct_Strong
000236  1a08              SUBS     r0,r1,r0
000238  e001              B        |L2.574|
                  |L2.570|
;;;810    	}
;;;811    	else var32 = var32 + SET_POWERA_Offset;
00023a  69c0              LDR      r0,[r0,#0x1c]  ; Correct_Strong
00023c  4408              ADD      r0,r0,r1
                  |L2.574|
;;;812    	var32 = var32/SET_POWERA;
00023e  69d9              LDR      r1,[r3,#0x1c]  ; Correct_Parametet
000240  fbb0f0f1          UDIV     r0,r0,r1
;;;813    	var32=var32>>1;
;;;814    	Contr_Current = var32;
000244  4917              LDR      r1,|L2.676|
000246  0840              LSRS     r0,r0,#1              ;813
000248  8008              STRH     r0,[r1,#0]
;;;815    	if(SET_Current==0)
00024a  6890              LDR      r0,[r2,#8]  ; Run_Control
00024c  2800              CMP      r0,#0
00024e  d101              BNE      |L2.596|
;;;816    	{
;;;817    		Contr_Current=0;
000250  f8a1c000          STRH     r12,[r1,#0]
                  |L2.596|
;;;818    	}
;;;819    	
;;;820    	var32 = 0;
;;;821    }
000254  bdf0              POP      {r4-r7,pc}
;;;822    /********************************************************************************
                          ENDP

000256  0000              DCW      0x0000
                  |L2.600|
                          DCD      Vmon1_value
                  |L2.604|
                          DCD      ||.bss||
                  |L2.608|
                          DCD      ||area_number.8||+0x1c
                  |L2.612|
                          DCD      DISS_Voltage
                  |L2.616|
000268  447a0000          DCFS     0x447a0000 ; 1000
                  |L2.620|
                          DCD      Imon1_value
                  |L2.624|
                          DCD      DISS_Current
                  |L2.628|
                          DCD      flagD
                  |L2.632|
                          DCD      flagB
                  |L2.636|
                          DCD      Contr_Laod
                  |L2.640|
                          DCD      Rmon_value
                  |L2.644|
                          DCD      r_raly
                  |L2.648|
                          DCD      Vmon_value
                  |L2.652|
                          DCD      DISS_POW_Voltage
                  |L2.656|
000290  42c80000          DCFS     0x42c80000 ; 100
                  |L2.660|
                          DCD      Imon_value
                  |L2.664|
                          DCD      flagE
                  |L2.668|
                          DCD      DISS_POW_Current
                  |L2.672|
                          DCD      Contr_Voltage
                  |L2.676|
                          DCD      Contr_Current

                          AREA ||i.UART_Action||, CODE, READONLY, ALIGN=2

                  UART_Action PROC
;;;44     //===========================MODBUS协议=============================//
;;;45     void UART_Action(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;46     {//RUT??ú
;;;47     	//ADDR  ???  ??????????   ??????????  ?????????   ????????  CRC? CRC?
;;;48     	//????úADDR ??? ???????  ???  ??? ..... CRC?  CRC?
;;;49     	if (UART_Buffer_Rece[0] == ADDR)
000004  4efa              LDR      r6,|L3.1008|
000006  7830              LDRB     r0,[r6,#0]  ; UART_Buffer_Rece
000008  4cfa              LDR      r4,|L3.1012|
00000a  7861              LDRB     r1,[r4,#1]  ; ADDR
;;;50     	{
;;;51     		if (UART_Buffer_Rece[1] == (0x03))	//??3 ???   
;;;52     		{																		 
;;;53     			vu8 i;
;;;54     			vu16 crc_result;
;;;55     			crc_result = (UART_Buffer_Rece[6] << 8) + UART_Buffer_Rece[7];
;;;56     			if ((crc_result == Hardware_CRC(UART_Buffer_Rece,6)) ||(crc_result == 0) )
;;;57     			{
;;;58     				if (UART_Buffer_Rece[3] < 0x07)    								//?????????Χ?
;;;59     				{
;;;60     					if ((UART_Buffer_Rece[3] + UART_Buffer_Rece[5]) < 0x0F)		//??????????????????Χ?
;;;61     					{							
;;;62     						UART_Buffer_Send[0] = ADDR;
00000c  4dfa              LDR      r5,|L3.1016|
;;;63     						UART_Buffer_Send[1] = 0x03;
;;;64     						UART_Buffer_Send[2] = UART_Buffer_Rece[5]*2;
;;;65     						for (i=0;i<UART_Buffer_Send[2];i++)
;;;66     						{
;;;67     							if ((i % 2) == 0) UART_Buffer_Send[3 + i] = Run_Control[UART_Buffer_Rece[3] + i / 2] >> 8;
;;;68     							else UART_Buffer_Send[3 + i] = Run_Control[UART_Buffer_Rece[3] + i / 2];														
;;;69     						}
;;;70     						crc_result = Hardware_CRC(UART_Buffer_Send,UART_Buffer_Send[2] + 3);
;;;71     						UART_Buffer_Send[3 + UART_Buffer_Send[2]] = crc_result >> 8;
;;;72     						UART_Buffer_Send[4 + UART_Buffer_Send[2]] = crc_result;
;;;73     						Transmit_BUFFERsize = UART_Buffer_Send[2] + 5;
00000e  f8dfa3ec          LDR      r10,|L3.1020|
;;;74     						UART_SEND_flag=1;
000012  f8df83ec          LDR      r8,|L3.1024|
000016  f8df93ec          LDR      r9,|L3.1028|
00001a  4288              CMP      r0,r1                 ;49
00001c  d147              BNE      |L3.174|
00001e  7870              LDRB     r0,[r6,#1]            ;51  ; UART_Buffer_Rece
000020  2803              CMP      r0,#3                 ;51
000022  d144              BNE      |L3.174|
000024  79f0              LDRB     r0,[r6,#7]            ;55  ; UART_Buffer_Rece
000026  79b1              LDRB     r1,[r6,#6]            ;55  ; UART_Buffer_Rece
000028  eb002001          ADD      r0,r0,r1,LSL #8       ;55
00002c  b287              UXTH     r7,r0                 ;55
00002e  2106              MOVS     r1,#6                 ;56
000030  4630              MOV      r0,r6                 ;56
000032  f7fffffe          BL       Hardware_CRC
000036  42b8              CMP      r0,r7                 ;56
000038  d000              BEQ      |L3.60|
00003a  bbc7              CBNZ     r7,|L3.174|
                  |L3.60|
00003c  78f0              LDRB     r0,[r6,#3]            ;58  ; UART_Buffer_Rece
00003e  2807              CMP      r0,#7                 ;58
000040  d235              BCS      |L3.174|
000042  78f0              LDRB     r0,[r6,#3]            ;60  ; UART_Buffer_Rece
000044  7971              LDRB     r1,[r6,#5]            ;60  ; UART_Buffer_Rece
000046  4408              ADD      r0,r0,r1              ;60
000048  280f              CMP      r0,#0xf               ;60
00004a  d230              BCS      |L3.174|
00004c  7860              LDRB     r0,[r4,#1]            ;62  ; ADDR
00004e  7028              STRB     r0,[r5,#0]            ;62
000050  2003              MOVS     r0,#3                 ;63
000052  7068              STRB     r0,[r5,#1]            ;63
000054  7970              LDRB     r0,[r6,#5]            ;64  ; UART_Buffer_Rece
000056  0040              LSLS     r0,r0,#1              ;64
000058  70a8              STRB     r0,[r5,#2]            ;64
00005a  2000              MOVS     r0,#0                 ;65
00005c  464b              MOV      r3,r9                 ;67
00005e  e00b              B        |L3.120|
                  |L3.96|
000060  07c1              LSLS     r1,r0,#31             ;67
000062  78f1              LDRB     r1,[r6,#3]            ;68  ; UART_Buffer_Rece
000064  eb010150          ADD      r1,r1,r0,LSR #1       ;68
000068  f8531021          LDR      r1,[r3,r1,LSL #2]     ;68
00006c  d100              BNE      |L3.112|
00006e  0a09              LSRS     r1,r1,#8              ;67
                  |L3.112|
000070  182a              ADDS     r2,r5,r0              ;68
000072  70d1              STRB     r1,[r2,#3]            ;68
000074  1c40              ADDS     r0,r0,#1              ;65
000076  b2c0              UXTB     r0,r0                 ;65
                  |L3.120|
000078  78a9              LDRB     r1,[r5,#2]            ;65  ; UART_Buffer_Send
00007a  4281              CMP      r1,r0                 ;65
00007c  d8f0              BHI      |L3.96|
00007e  78a8              LDRB     r0,[r5,#2]            ;70  ; UART_Buffer_Send
000080  1cc0              ADDS     r0,r0,#3              ;70
000082  b2c1              UXTB     r1,r0                 ;70
000084  48dc              LDR      r0,|L3.1016|
000086  f7fffffe          BL       Hardware_CRC
00008a  78ab              LDRB     r3,[r5,#2]            ;71  ; UART_Buffer_Send
00008c  0a02              LSRS     r2,r0,#8              ;71
00008e  49da              LDR      r1,|L3.1016|
000090  1cc9              ADDS     r1,r1,#3              ;71
000092  545a              STRB     r2,[r3,r1]            ;71
000094  78aa              LDRB     r2,[r5,#2]            ;72  ; UART_Buffer_Send
000096  1c49              ADDS     r1,r1,#1              ;72
000098  5450              STRB     r0,[r2,r1]            ;72
00009a  78a8              LDRB     r0,[r5,#2]            ;73  ; UART_Buffer_Send
00009c  1d40              ADDS     r0,r0,#5              ;73
00009e  f88a0000          STRB     r0,[r10,#0]           ;73
0000a2  f8d81000          LDR      r1,[r8,#0]  ; flagA
0000a6  f0410110          ORR      r1,r1,#0x10
0000aa  f8c81000          STR      r1,[r8,#0]  ; flagA
                  |L3.174|
;;;75     					}
;;;76     				}
;;;77     			}	
;;;78     		}
;;;79     	} 
;;;80     //===============================д???=================================
;;;81     	if ((UART_Buffer_Rece[0] == 0) || (UART_Buffer_Rece[0] == ADDR) || (UART_Buffer_Rece[0] == ((ADDR-1)/4+100)))	 
0000ae  7830              LDRB     r0,[r6,#0]  ; UART_Buffer_Rece
0000b0  b170              CBZ      r0,|L3.208|
0000b2  7830              LDRB     r0,[r6,#0]  ; UART_Buffer_Rece
0000b4  7861              LDRB     r1,[r4,#1]  ; ADDR
0000b6  4288              CMP      r0,r1
0000b8  d00a              BEQ      |L3.208|
0000ba  7860              LDRB     r0,[r4,#1]  ; ADDR
0000bc  7831              LDRB     r1,[r6,#0]  ; UART_Buffer_Rece
0000be  1e40              SUBS     r0,r0,#1
0000c0  17c2              ASRS     r2,r0,#31
0000c2  eb007092          ADD      r0,r0,r2,LSR #30
0000c6  2264              MOVS     r2,#0x64
0000c8  eb0200a0          ADD      r0,r2,r0,ASR #2
0000cc  4281              CMP      r1,r0
0000ce  d16f              BNE      |L3.432|
                  |L3.208|
;;;82     	{
;;;83     		vu8 var8;
;;;84     		vu8 a=0;
;;;85     		vu16 var16;
;;;86     		vu16 crc_result;
;;;87     //=========================????6 д?????===========================
;;;88     		if (UART_Buffer_Rece[1] == 6)                                 //???????ˇ????6
0000d0  7870              LDRB     r0,[r6,#1]  ; UART_Buffer_Rece
;;;89     		{
;;;90     			if (UART_Buffer_Rece[3] < 0x05)							  //????д???ˇ???д?Χ?
;;;91     			{
;;;92     				crc_result = (UART_Buffer_Rece[6] << 8) + UART_Buffer_Rece[7];
;;;93     				if ((crc_result == Hardware_CRC(UART_Buffer_Rece,6)) ||(crc_result == 0) )		  //??CRC
;;;94     				{
;;;95     					var16 = (UART_Buffer_Rece[4] << 8) + UART_Buffer_Rece[5];	//?5 6?????д????
;;;96     					var8 = UART_Buffer_Rece[3];	        						//?3 4?????д????
;;;97     					Run_Control[var8] = var16;			    //???д??????
;;;98     
;;;99     					if (UART_Buffer_Rece[0] == ADDR)							//??????????
;;;100    					{
;;;101    						for (a=0;a<8;a++)
;;;102    						{UART_Buffer_Send[a] = UART_Buffer_Rece[a];}
;;;103    						Transmit_BUFFERsize = 8;						//??????ì???CRC
0000d2  f04f0b08          MOV      r11,#8
0000d6  2806              CMP      r0,#6                 ;88
0000d8  d129              BNE      |L3.302|
0000da  78f0              LDRB     r0,[r6,#3]            ;90  ; UART_Buffer_Rece
0000dc  2805              CMP      r0,#5                 ;90
0000de  d226              BCS      |L3.302|
0000e0  79f0              LDRB     r0,[r6,#7]            ;92  ; UART_Buffer_Rece
0000e2  79b1              LDRB     r1,[r6,#6]            ;92  ; UART_Buffer_Rece
0000e4  eb002001          ADD      r0,r0,r1,LSL #8       ;92
0000e8  b287              UXTH     r7,r0                 ;92
0000ea  2106              MOVS     r1,#6                 ;93
0000ec  48c0              LDR      r0,|L3.1008|
0000ee  f7fffffe          BL       Hardware_CRC
0000f2  42b8              CMP      r0,r7                 ;93
0000f4  d000              BEQ      |L3.248|
0000f6  b9d7              CBNZ     r7,|L3.302|
                  |L3.248|
0000f8  7970              LDRB     r0,[r6,#5]            ;95  ; UART_Buffer_Rece
0000fa  7931              LDRB     r1,[r6,#4]            ;95  ; UART_Buffer_Rece
0000fc  eb002001          ADD      r0,r0,r1,LSL #8       ;95
000100  b281              UXTH     r1,r0                 ;95
000102  78f0              LDRB     r0,[r6,#3]            ;96  ; UART_Buffer_Rece
000104  f8491020          STR      r1,[r9,r0,LSL #2]     ;97
000108  7830              LDRB     r0,[r6,#0]            ;99  ; UART_Buffer_Rece
00010a  7861              LDRB     r1,[r4,#1]            ;99  ; ADDR
00010c  4288              CMP      r0,r1                 ;99
00010e  d10e              BNE      |L3.302|
000110  2000              MOVS     r0,#0                 ;101
                  |L3.274|
000112  5c31              LDRB     r1,[r6,r0]            ;102
000114  5429              STRB     r1,[r5,r0]            ;102
000116  1c40              ADDS     r0,r0,#1              ;101
000118  b2c0              UXTB     r0,r0                 ;101
00011a  2808              CMP      r0,#8                 ;101
00011c  d3f9              BCC      |L3.274|
00011e  f88ab000          STRB     r11,[r10,#0]
;;;104    						UART_SEND_flag=1;
000122  f8d81000          LDR      r1,[r8,#0]  ; flagA
000126  f0410110          ORR      r1,r1,#0x10
00012a  f8c81000          STR      r1,[r8,#0]  ; flagA
                  |L3.302|
;;;105    					}
;;;106    				}
;;;107    			}
;;;108    		}
;;;109    //=======================================??ˇ??16ìlд???===========================================
;;;110    //???16??:
;;;111    //     ?? ?? д??????  д?????? д????  д???? д????  ??? ??? ......CRC? CRC?
;;;112    //??????:
;;;113    //     ?? ?? д??????  д??????  д????? д?????  CRC?  CRC? 
;;;114    		if (UART_Buffer_Rece[1] == 16)										  
00012e  7870              LDRB     r0,[r6,#1]  ; UART_Buffer_Rece
000130  2810              CMP      r0,#0x10
000132  d13d              BNE      |L3.432|
;;;115    		{	
;;;116    			if ((UART_Buffer_Rece[6] == 6) && (UART_Buffer_Rece[3] == 0x00))	//??lд??????
000134  79b0              LDRB     r0,[r6,#6]  ; UART_Buffer_Rece
000136  2806              CMP      r0,#6
000138  d13a              BNE      |L3.432|
00013a  78f0              LDRB     r0,[r6,#3]  ; UART_Buffer_Rece
00013c  bbc0              CBNZ     r0,|L3.432|
;;;117    			{
;;;118    				crc_result = (UART_Buffer_Rece[13] << 8) + UART_Buffer_Rece[14];
00013e  7bb0              LDRB     r0,[r6,#0xe]  ; UART_Buffer_Rece
000140  7b71              LDRB     r1,[r6,#0xd]  ; UART_Buffer_Rece
000142  eb002001          ADD      r0,r0,r1,LSL #8
000146  b287              UXTH     r7,r0
;;;119    				if ((crc_result == Hardware_CRC(UART_Buffer_Rece,13)) ||(crc_result == 0) )	   //??CRC
000148  210d              MOVS     r1,#0xd
00014a  48a9              LDR      r0,|L3.1008|
00014c  f7fffffe          BL       Hardware_CRC
000150  42b8              CMP      r0,r7
000152  d000              BEQ      |L3.342|
000154  bb67              CBNZ     r7,|L3.432|
                  |L3.342|
;;;120    				{												
;;;121    					for (var8=0;var8<3;var8++) Run_Control[var8] = (UART_Buffer_Rece[var8*2+7] << 8) + UART_Buffer_Rece[var8*2+8];
000156  2000              MOVS     r0,#0
000158  464b              MOV      r3,r9                 ;67
                  |L3.346|
00015a  eb060140          ADD      r1,r6,r0,LSL #1
00015e  7a0a              LDRB     r2,[r1,#8]
000160  79c9              LDRB     r1,[r1,#7]
000162  eb022101          ADD      r1,r2,r1,LSL #8
000166  f8431020          STR      r1,[r3,r0,LSL #2]
00016a  1c40              ADDS     r0,r0,#1
00016c  b2c0              UXTB     r0,r0
00016e  2803              CMP      r0,#3
000170  d3f3              BCC      |L3.346|
;;;122    
;;;123    					if (UART_Buffer_Rece[0] == ADDR)					  //?????????
000172  7830              LDRB     r0,[r6,#0]  ; UART_Buffer_Rece
000174  7861              LDRB     r1,[r4,#1]  ; ADDR
000176  4288              CMP      r0,r1
000178  d11a              BNE      |L3.432|
;;;124    					{
;;;125    						UART_Buffer_Send[0] = ADDR;
00017a  7860              LDRB     r0,[r4,#1]  ; ADDR
00017c  7028              STRB     r0,[r5,#0]
;;;126    						UART_Buffer_Send[1] = 16;
00017e  2010              MOVS     r0,#0x10
000180  7068              STRB     r0,[r5,#1]
;;;127    						UART_Buffer_Send[2] = UART_Buffer_Rece[2];
000182  78b0              LDRB     r0,[r6,#2]  ; UART_Buffer_Rece
000184  70a8              STRB     r0,[r5,#2]
;;;128    						UART_Buffer_Send[3] = UART_Buffer_Rece[3];
000186  78f0              LDRB     r0,[r6,#3]  ; UART_Buffer_Rece
000188  70e8              STRB     r0,[r5,#3]
;;;129    						UART_Buffer_Send[4] = UART_Buffer_Rece[4];
00018a  7930              LDRB     r0,[r6,#4]  ; UART_Buffer_Rece
00018c  7128              STRB     r0,[r5,#4]
;;;130    						UART_Buffer_Send[5] = UART_Buffer_Rece[5];
00018e  7970              LDRB     r0,[r6,#5]  ; UART_Buffer_Rece
000190  7168              STRB     r0,[r5,#5]
;;;131    						crc_result = Hardware_CRC(UART_Buffer_Send,6);	 //??CRC?
000192  2106              MOVS     r1,#6
000194  4898              LDR      r0,|L3.1016|
000196  f7fffffe          BL       Hardware_CRC
;;;132    						UART_Buffer_Send[6] = crc_result>>8;
00019a  0a01              LSRS     r1,r0,#8
00019c  71a9              STRB     r1,[r5,#6]
;;;133    						UART_Buffer_Send[7] = crc_result;				 
00019e  71e8              STRB     r0,[r5,#7]
;;;134    						Transmit_BUFFERsize = 8;					     //?????????
0001a0  f88ab000          STRB     r11,[r10,#0]
;;;135    						UART_SEND_flag=1;
0001a4  f8d81000          LDR      r1,[r8,#0]  ; flagA
0001a8  f0410110          ORR      r1,r1,#0x10
0001ac  f8c81000          STR      r1,[r8,#0]  ; flagA
                  |L3.432|
;;;136    					}
;;;137    				}
;;;138    			}			 
;;;139    		}
;;;140    	}
;;;141    /*************************************???У???**************************************************************************/
;;;142    	if (((UART_Buffer_Rece[0] == 0x01)&&(UART_Buffer_Rece[2] == 0xA5))||(flag_ADJ_ON==1))			   //??У?
0001b0  7830              LDRB     r0,[r6,#0]  ; UART_Buffer_Rece
0001b2  f8df9254          LDR      r9,|L3.1032|
0001b6  2801              CMP      r0,#1
0001b8  d102              BNE      |L3.448|
0001ba  78b0              LDRB     r0,[r6,#2]  ; UART_Buffer_Rece
0001bc  28a5              CMP      r0,#0xa5
0001be  d003              BEQ      |L3.456|
                  |L3.448|
0001c0  f8d90000          LDR      r0,[r9,#0]  ; flagF
0001c4  0780              LSLS     r0,r0,#30
0001c6  d57d              BPL      |L3.708|
                  |L3.456|
;;;143    	{ 
;;;144    		if(UART_Buffer_Rece[1] == 0x01)
0001c8  7870              LDRB     r0,[r6,#1]  ; UART_Buffer_Rece
;;;145    		{
;;;146    			flag_ADJ_VL=0;
;;;147    			Modify_A_READ = Vmon1_value;//????
0001ca  f8dfb240          LDR      r11,|L3.1036|
0001ce  2801              CMP      r0,#1                 ;144
0001d0  d10d              BNE      |L3.494|
0001d2  f8d91000          LDR      r1,[r9,#0]            ;146  ; flagF
0001d6  f0210104          BIC      r1,r1,#4              ;146
0001da  f8c91000          STR      r1,[r9,#0]  ; flagF
0001de  f8db0000          LDR      r0,[r11,#0]  ; Vmon1_value
0001e2  6060              STR      r0,[r4,#4]  ; Modify_A_READ
;;;148    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
0001e4  7930              LDRB     r0,[r6,#4]  ; UART_Buffer_Rece
0001e6  78f1              LDRB     r1,[r6,#3]  ; UART_Buffer_Rece
0001e8  eb002001          ADD      r0,r0,r1,LSL #8
0001ec  60e0              STR      r0,[r4,#0xc]  ; Modify_A_ACT
                  |L3.494|
;;;149    		}
;;;150    		if (UART_Buffer_Rece[1] == 0x02)			   //???У???
0001ee  7870              LDRB     r0,[r6,#1]  ; UART_Buffer_Rece
0001f0  46b2              MOV      r10,r6
;;;151    		{
;;;152    			vu32 var16;
;;;153    			vu32 var32a;
;;;154    			vu32 var32b;
;;;155    			
;;;156    			vu32 var16a;
;;;157    			vu32 var32c;
;;;158    			vu32 var32d;
;;;159    			Modify_B_READ =Vmon1_value;//????
;;;160    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
;;;161    			var32a = Modify_B_ACT;
;;;162    			var32a = var32a - Modify_A_ACT;
;;;163    			var32a = var32a << 12;
;;;164    			var16 = Modify_B_READ - Modify_A_READ;
;;;165    			var32a = var32a / var16;
;;;166    			REG_CorrectionV = var32a;
0001f2  f8df8210          LDR      r8,|L3.1028|
;;;167    			var32a=0;
;;;168    			var32a = Modify_B_ACT;
;;;169    			var32a = var32a << 12;
;;;170    			var32b = Modify_B_READ;
;;;171    			var32b = var32b * REG_CorrectionV;
;;;172    			if (var32a < var32b)
;;;173    			{
;;;174    				var32b = var32b - var32a;
;;;175    				REG_ReadV_Offset = var32b;
;;;176    				Polar |= 0x01;
0001f6  4d7f              LDR      r5,|L3.1012|
0001f8  f1a80860          SUB      r8,r8,#0x60           ;166
0001fc  351c              ADDS     r5,r5,#0x1c
;;;177    			}
;;;178    			else 
;;;179    			{
;;;180    				var32a = var32a - var32b;
;;;181    				REG_ReadV_Offset = var32a;
;;;182    				Polar &= ~0x01;
;;;183    			}			
;;;184    			Flash_Write_all();	//??д?FLASH
;;;185    			Flag_DAC_OFF=0;
0001fe  4f84              LDR      r7,|L3.1040|
000200  f1080630          ADD      r6,r8,#0x30           ;175
000204  2802              CMP      r0,#2                 ;150
000206  d12e              BNE      |L3.614|
000208  f8db0000          LDR      r0,[r11,#0]           ;159  ; Vmon1_value
00020c  6120              STR      r0,[r4,#0x10]         ;159  ; Modify_B_READ
00020e  f89a1004          LDRB     r1,[r10,#4]           ;160  ; UART_Buffer_Rece
000212  f89a0003          LDRB     r0,[r10,#3]           ;160  ; UART_Buffer_Rece
000216  eb012000          ADD      r0,r1,r0,LSL #8       ;160
00021a  61a0              STR      r0,[r4,#0x18]         ;160  ; Modify_B_ACT
00021c  69a0              LDR      r0,[r4,#0x18]         ;161  ; Modify_B_ACT
00021e  68e1              LDR      r1,[r4,#0xc]          ;162  ; Modify_A_ACT
000220  1a40              SUBS     r0,r0,r1              ;162
000222  0301              LSLS     r1,r0,#12             ;163
000224  6920              LDR      r0,[r4,#0x10]         ;164  ; Modify_B_READ
000226  6862              LDR      r2,[r4,#4]            ;164  ; Modify_A_READ
000228  1a80              SUBS     r0,r0,r2              ;164
00022a  fbb1f1f0          UDIV     r1,r1,r0              ;165
00022e  f8c81000          STR      r1,[r8,#0]            ;166  ; Correct_Parametet
000232  69a1              LDR      r1,[r4,#0x18]         ;168  ; Modify_B_ACT
000234  6922              LDR      r2,[r4,#0x10]         ;170  ; Modify_B_READ
000236  0309              LSLS     r1,r1,#12             ;169
000238  f8d80000          LDR      r0,[r8,#0]            ;171  ; Correct_Parametet
00023c  4350              MULS     r0,r2,r0              ;171
00023e  4281              CMP      r1,r0                 ;172
000240  d205              BCS      |L3.590|
000242  1a40              SUBS     r0,r0,r1              ;174
000244  6030              STR      r0,[r6,#0]            ;175  ; Correct_Strong
000246  7828              LDRB     r0,[r5,#0]            ;176  ; correct_por
000248  f0400001          ORR      r0,r0,#1              ;176
00024c  e004              B        |L3.600|
                  |L3.590|
00024e  1a08              SUBS     r0,r1,r0              ;180
000250  6030              STR      r0,[r6,#0]            ;181  ; Correct_Strong
000252  7828              LDRB     r0,[r5,#0]            ;182  ; correct_por
000254  f0200001          BIC      r0,r0,#1              ;182
                  |L3.600|
000258  7028              STRB     r0,[r5,#0]            ;182
00025a  f7fffffe          BL       Flash_Write_all
00025e  6838              LDR      r0,[r7,#0]  ; flagB
000260  f0200008          BIC      r0,r0,#8
000264  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.614|
;;;186    		}
;;;187    		
;;;188    		
;;;189    /************************************???・????У?*****************************************************************/
;;;190    		if (UART_Buffer_Rece[1] == 0x03)			   //CC??У?
000266  f89a1001          LDRB     r1,[r10,#1]  ; UART_Buffer_Rece
00026a  4650              MOV      r0,r10
;;;191    		{
;;;192    			Modify_A_READ = Imon1_value;//
00026c  4b69              LDR      r3,|L3.1044|
;;;193    			Modify_C_READ = Contr_Laod;//
00026e  f8dfa1a8          LDR      r10,|L3.1048|
000272  2903              CMP      r1,#3                 ;190
000274  d10d              BNE      |L3.658|
000276  6819              LDR      r1,[r3,#0]            ;192  ; Imon1_value
000278  6061              STR      r1,[r4,#4]            ;192  ; Modify_A_READ
00027a  f8ba1000          LDRH     r1,[r10,#0]  ; Contr_Laod
00027e  60a1              STR      r1,[r4,#8]  ; Modify_C_READ
;;;194    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000280  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000282  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
000284  eb012102          ADD      r1,r1,r2,LSL #8
000288  60e1              STR      r1,[r4,#0xc]  ; Modify_A_ACT
;;;195    			Flag_DAC_OFF=1;//
00028a  6839              LDR      r1,[r7,#0]  ; flagB
00028c  f0410108          ORR      r1,r1,#8
000290  6039              STR      r1,[r7,#0]  ; flagB
                  |L3.658|
;;;196    		}
;;;197    
;;;198    		if (UART_Buffer_Rece[1] == 0x04)			   //
000292  4857              LDR      r0,|L3.1008|
000294  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
000296  2804              CMP      r0,#4
000298  d151              BNE      |L3.830|
;;;199    		{
;;;200    			vu32 var16;
;;;201    			vu32 var32a;
;;;202    			vu32 var32b;
;;;203    			
;;;204    			vu32 var16a;
;;;205    			vu32 var32c;
;;;206    			vu32 var32d;
;;;207    			
;;;208    			Modify_B_READ = Imon1_value;
00029a  6818              LDR      r0,[r3,#0]  ; Imon1_value
00029c  6120              STR      r0,[r4,#0x10]  ; Modify_B_READ
;;;209    			Modify_D_READ = Contr_Laod;
00029e  f8ba0000          LDRH     r0,[r10,#0]  ; Contr_Laod
0002a2  6160              STR      r0,[r4,#0x14]  ; Modify_D_READ
;;;210    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0002a4  4852              LDR      r0,|L3.1008|
0002a6  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
0002a8  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
0002aa  eb012000          ADD      r0,r1,r0,LSL #8
0002ae  61a0              STR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;211    			
;;;212    			var32a = Modify_B_ACT;
0002b0  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;213    			var32a = var32a - Modify_A_ACT;
0002b2  68e1              LDR      r1,[r4,#0xc]  ; Modify_A_ACT
0002b4  1a40              SUBS     r0,r0,r1
;;;214    			var32a = var32a << 12;
;;;215    			var16 = Modify_B_READ - Modify_A_READ;
0002b6  6921              LDR      r1,[r4,#0x10]  ; Modify_B_READ
0002b8  0300              LSLS     r0,r0,#12             ;214
0002ba  6862              LDR      r2,[r4,#4]  ; Modify_A_READ
0002bc  1a89              SUBS     r1,r1,r2
;;;216    			var32a = var32a / var16;
0002be  fbb0f0f1          UDIV     r0,r0,r1
;;;217    			REG_Load_A = var32a;
0002c2  e000              B        |L3.710|
                  |L3.708|
0002c4  e25c              B        |L3.1920|
                  |L3.710|
0002c6  4643              MOV      r3,r8
0002c8  f8c80004          STR      r0,[r8,#4]  ; Correct_Parametet
;;;218    			var32a = Modify_B_ACT;
0002cc  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;219    			var32a = var32a << 12;
;;;220    			var32b = Modify_B_READ;
0002ce  6922              LDR      r2,[r4,#0x10]  ; Modify_B_READ
0002d0  0301              LSLS     r1,r0,#12             ;219
;;;221    			var32b = var32b * REG_Load_A;
0002d2  f8d80004          LDR      r0,[r8,#4]  ; Correct_Parametet
0002d6  4350              MULS     r0,r2,r0
;;;222    			if (var32a < var32b)
0002d8  4281              CMP      r1,r0
0002da  d205              BCS      |L3.744|
;;;223    			{
;;;224    				var32b = var32b - var32a;
0002dc  1a40              SUBS     r0,r0,r1
;;;225    				REG_LoadA_Offset = var32b;
0002de  6070              STR      r0,[r6,#4]  ; Correct_Strong
;;;226    				Polar1 |= 0x01;
0002e0  7868              LDRB     r0,[r5,#1]  ; correct_por
0002e2  f0400001          ORR      r0,r0,#1
0002e6  e004              B        |L3.754|
                  |L3.744|
;;;227    			}
;;;228    			else 
;;;229    			{
;;;230    				var32a = var32a - var32b;
0002e8  1a08              SUBS     r0,r1,r0
;;;231    				REG_LoadA_Offset = var32a;
0002ea  6070              STR      r0,[r6,#4]  ; Correct_Strong
;;;232    				Polar1 &= ~0x01;					
0002ec  7868              LDRB     r0,[r5,#1]  ; correct_por
0002ee  f0200001          BIC      r0,r0,#1
                  |L3.754|
0002f2  7068              STRB     r0,[r5,#1]
;;;233    			}
;;;234    //---------------------------------------------------------------------------------//
;;;235    			var32c = Modify_B_ACT; 
0002f4  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;236    			var32c = var32c - Modify_A_ACT;
0002f6  68e1              LDR      r1,[r4,#0xc]  ; Modify_A_ACT
0002f8  1a40              SUBS     r0,r0,r1
;;;237    			var32c = var32c << 12;
;;;238    			var16a=Modify_D_READ-Modify_C_READ;
0002fa  6961              LDR      r1,[r4,#0x14]  ; Modify_D_READ
0002fc  0300              LSLS     r0,r0,#12             ;237
0002fe  68a2              LDR      r2,[r4,#8]  ; Modify_C_READ
000300  1a89              SUBS     r1,r1,r2
;;;239    			var16a=var16a*2;
000302  0049              LSLS     r1,r1,#1
;;;240    			var32c=var32c/var16a;
000304  fbb0f0f1          UDIV     r0,r0,r1
;;;241    			SET_LoadA = var32c;
000308  6098              STR      r0,[r3,#8]  ; Correct_Parametet
;;;242    			var32c = Modify_B_ACT;
00030a  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;243    			var32c = var32c << 12;
;;;244    			var32d = SET_LoadA;
00030c  6899              LDR      r1,[r3,#8]  ; Correct_Parametet
00030e  0300              LSLS     r0,r0,#12             ;243
;;;245    			var32d = var32d * (Modify_D_READ*2);
000310  6962              LDR      r2,[r4,#0x14]  ; Modify_D_READ
000312  4351              MULS     r1,r2,r1
000314  0049              LSLS     r1,r1,#1
;;;246    			if (var32c < var32d)
000316  4288              CMP      r0,r1
000318  d205              BCS      |L3.806|
;;;247    			{
;;;248    				var32d = var32d - var32c;
00031a  1a08              SUBS     r0,r1,r0
;;;249    				SET_LoadA_Offset = var32d;
00031c  60b0              STR      r0,[r6,#8]  ; Correct_Strong
;;;250    				Polar1 |= 0x04;
00031e  7868              LDRB     r0,[r5,#1]  ; correct_por
000320  f0400004          ORR      r0,r0,#4
000324  e004              B        |L3.816|
                  |L3.806|
;;;251    			}
;;;252    			else 
;;;253    			{
;;;254    				var32c = var32c - var32d;
000326  1a40              SUBS     r0,r0,r1
;;;255    				SET_LoadA_Offset = var32c;
000328  60b0              STR      r0,[r6,#8]  ; Correct_Strong
;;;256    				Polar1 &= ~0x04;
00032a  7868              LDRB     r0,[r5,#1]  ; correct_por
00032c  f0200004          BIC      r0,r0,#4
                  |L3.816|
000330  7068              STRB     r0,[r5,#1]
;;;257    			}
;;;258    			Flash_Write_all ();	
000332  f7fffffe          BL       Flash_Write_all
;;;259    			Flag_DAC_OFF =0;
000336  6838              LDR      r0,[r7,#0]  ; flagB
000338  f0200008          BIC      r0,r0,#8
00033c  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.830|
;;;260    		}
;;;261    /*************************************??CV??????У?**************************************************************/
;;;262    		if(UART_Buffer_Rece[1] == 0x05)
00033e  482c              LDR      r0,|L3.1008|
000340  7841              LDRB     r1,[r0,#1]  ; UART_Buffer_Rece
000342  2905              CMP      r1,#5
000344  d10a              BNE      |L3.860|
;;;263    		{
;;;264    			Modify_A_READ = Vmon1_value;//????
000346  f8db1000          LDR      r1,[r11,#0]  ; Vmon1_value
00034a  6061              STR      r1,[r4,#4]  ; Modify_A_READ
;;;265    			Modify_C_READ = Contr_Laod;//?????
00034c  f8ba1000          LDRH     r1,[r10,#0]  ; Contr_Laod
000350  60a1              STR      r1,[r4,#8]  ; Modify_C_READ
;;;266    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
000352  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000354  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
000356  eb012102          ADD      r1,r1,r2,LSL #8
00035a  60e1              STR      r1,[r4,#0xc]  ; Modify_A_ACT
                  |L3.860|
;;;267    		}
;;;268    		if (UART_Buffer_Rece[1] == 0x06)			   //???У???
00035c  4824              LDR      r0,|L3.1008|
00035e  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
000360  2806              CMP      r0,#6
000362  d165              BNE      |L3.1072|
;;;269    		{
;;;270    			vu32 var16;
;;;271    			vu32 var32a;
;;;272    			vu32 var32b;
;;;273    			
;;;274    			vu32 var16a;
;;;275    			vu32 var32c;
;;;276    			vu32 var32d;
;;;277    			
;;;278    			Modify_B_READ =Vmon1_value;//????
000364  f8db0000          LDR      r0,[r11,#0]  ; Vmon1_value
000368  6120              STR      r0,[r4,#0x10]  ; Modify_B_READ
;;;279    			Modify_D_READ =Contr_Laod;//?????
00036a  f8ba0000          LDRH     r0,[r10,#0]  ; Contr_Laod
00036e  6160              STR      r0,[r4,#0x14]  ; Modify_D_READ
;;;280    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
000370  481f              LDR      r0,|L3.1008|
000372  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000374  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
000376  eb012000          ADD      r0,r1,r0,LSL #8
00037a  61a0              STR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;281    			var32a = Modify_B_ACT;
00037c  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;282    			var32a = var32a - Modify_A_ACT;
00037e  68e1              LDR      r1,[r4,#0xc]  ; Modify_A_ACT
000380  1a40              SUBS     r0,r0,r1
;;;283    			var32a = var32a << 12;
;;;284    			var16 = Modify_B_READ - Modify_A_READ;
000382  6921              LDR      r1,[r4,#0x10]  ; Modify_B_READ
000384  0300              LSLS     r0,r0,#12             ;283
000386  6862              LDR      r2,[r4,#4]  ; Modify_A_READ
000388  1a89              SUBS     r1,r1,r2
;;;285    			var32a = var32a / var16;
00038a  fbb0f0f1          UDIV     r0,r0,r1
;;;286    			REG_LoadV = var32a;
00038e  4641              MOV      r1,r8
000390  f8c8000c          STR      r0,[r8,#0xc]  ; Correct_Parametet
;;;287    			var32a=0;
;;;288    			var32a = Modify_B_ACT;
000394  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;289    			var32a = var32a << 12;
;;;290    			var32b = Modify_B_READ;
000396  6922              LDR      r2,[r4,#0x10]  ; Modify_B_READ
000398  0300              LSLS     r0,r0,#12             ;289
;;;291    			var32b = var32b * REG_LoadV;
00039a  f8d8300c          LDR      r3,[r8,#0xc]  ; Correct_Parametet
00039e  4353              MULS     r3,r2,r3
;;;292    			if (var32a < var32b)
0003a0  4298              CMP      r0,r3
0003a2  d205              BCS      |L3.944|
;;;293    			{
;;;294    				var32b = var32b - var32a;
0003a4  1a18              SUBS     r0,r3,r0
;;;295    				REG_LoadV_Offset = var32b;
0003a6  60f0              STR      r0,[r6,#0xc]  ; Correct_Strong
;;;296    				Polar2 |= 0x01;
0003a8  78a8              LDRB     r0,[r5,#2]  ; correct_por
0003aa  f0400001          ORR      r0,r0,#1
0003ae  e004              B        |L3.954|
                  |L3.944|
;;;297    			}
;;;298    			else 
;;;299    			{
;;;300    				var32a = var32a - var32b;
0003b0  1ac0              SUBS     r0,r0,r3
;;;301    				REG_LoadV_Offset = var32a;
0003b2  60f0              STR      r0,[r6,#0xc]  ; Correct_Strong
;;;302    				Polar2 &= ~0x01;
0003b4  78a8              LDRB     r0,[r5,#2]  ; correct_por
0003b6  f0200001          BIC      r0,r0,#1
                  |L3.954|
0003ba  70a8              STRB     r0,[r5,#2]
;;;303    			}
;;;304    //---------------------------------------------------------------------------------------//			
;;;305    			var32c = Modify_B_ACT; //CV??????У?
0003bc  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;306    			var32c = var32c - Modify_A_ACT;
0003be  68e2              LDR      r2,[r4,#0xc]  ; Modify_A_ACT
0003c0  1a80              SUBS     r0,r0,r2
;;;307    			var32c = var32c << 12;
;;;308    			var16a=Modify_D_READ-Modify_C_READ;
0003c2  6962              LDR      r2,[r4,#0x14]  ; Modify_D_READ
0003c4  0300              LSLS     r0,r0,#12             ;307
0003c6  68a3              LDR      r3,[r4,#8]  ; Modify_C_READ
0003c8  1ad2              SUBS     r2,r2,r3
;;;309    			var16a=(var16a*2);
0003ca  0052              LSLS     r2,r2,#1
;;;310    			var32c=var32c/var16a;
0003cc  fbb0f0f2          UDIV     r0,r0,r2
;;;311    			SET_LoadV = var32c;
0003d0  6108              STR      r0,[r1,#0x10]  ; Correct_Parametet
;;;312    			var32c = Modify_B_ACT;
0003d2  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;313    			var32c = var32c << 12;
;;;314    			var32d = SET_LoadV;
0003d4  6909              LDR      r1,[r1,#0x10]  ; Correct_Parametet
0003d6  0300              LSLS     r0,r0,#12             ;313
;;;315    			var32d = var32d * (Modify_D_READ*2);
0003d8  6962              LDR      r2,[r4,#0x14]  ; Modify_D_READ
0003da  4351              MULS     r1,r2,r1
0003dc  0049              LSLS     r1,r1,#1
;;;316    			if (var32c < var32d)
0003de  4288              CMP      r0,r1
0003e0  d21c              BCS      |L3.1052|
;;;317    			{
;;;318    				var32d = var32d - var32c;
0003e2  1a08              SUBS     r0,r1,r0
;;;319    				SET_LoadV_Offset = var32d;
0003e4  6130              STR      r0,[r6,#0x10]  ; Correct_Strong
;;;320    				Polar2 |= 0x04;
0003e6  78a8              LDRB     r0,[r5,#2]  ; correct_por
0003e8  f0400004          ORR      r0,r0,#4
0003ec  e01b              B        |L3.1062|
0003ee  0000              DCW      0x0000
                  |L3.1008|
                          DCD      UART_Buffer_Rece
                  |L3.1012|
                          DCD      ||area_number.8||
                  |L3.1016|
                          DCD      UART_Buffer_Send
                  |L3.1020|
                          DCD      Transmit_BUFFERsize
                  |L3.1024|
                          DCD      flagA
                  |L3.1028|
                          DCD      ||.bss||+0x60
                  |L3.1032|
                          DCD      flagF
                  |L3.1036|
                          DCD      Vmon1_value
                  |L3.1040|
                          DCD      flagB
                  |L3.1044|
                          DCD      Imon1_value
                  |L3.1048|
                          DCD      Contr_Laod
                  |L3.1052|
;;;321    			}
;;;322    			else 
;;;323    			{
;;;324    				var32c = var32c - var32d;
00041c  1a40              SUBS     r0,r0,r1
;;;325    				SET_LoadV_Offset = var32c;
00041e  6130              STR      r0,[r6,#0x10]  ; Correct_Strong
;;;326    				Polar2 &= ~0x04;
000420  78a8              LDRB     r0,[r5,#2]  ; correct_por
000422  f0200004          BIC      r0,r0,#4
                  |L3.1062|
000426  70a8              STRB     r0,[r5,#2]
;;;327    			}
;;;328    //---------------------------------------------------------------------------------------//
;;;329    		  Flash_Write_all();	//??д?FLASH
000428  f7fffffe          BL       Flash_Write_all
;;;330    			DAC_Flag=0;
00042c  2000              MOVS     r0,#0
00042e  7020              STRB     r0,[r4,#0]
                  |L3.1072|
;;;331    		}
;;;332    /*************************************??У?**************************************************************************/
;;;333    		if(UART_Buffer_Rece[1] == 0x07||flag_ADJ_VL==1)
000430  48d4              LDR      r0,|L3.1924|
000432  7841              LDRB     r1,[r0,#1]  ; UART_Buffer_Rece
;;;334    		{
;;;335    			Modify_A_READ = Rmon_value;//????
000434  4bd4              LDR      r3,|L3.1928|
000436  2907              CMP      r1,#7                 ;333
000438  d003              BEQ      |L3.1090|
00043a  f8d91000          LDR      r1,[r9,#0]            ;333  ; flagF
00043e  0749              LSLS     r1,r1,#29             ;333
000440  d506              BPL      |L3.1104|
                  |L3.1090|
000442  8819              LDRH     r1,[r3,#0]  ; Rmon_value
000444  6061              STR      r1,[r4,#4]  ; Modify_A_READ
;;;336    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
000446  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000448  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
00044a  eb012102          ADD      r1,r1,r2,LSL #8
00044e  60e1              STR      r1,[r4,#0xc]  ; Modify_A_ACT
                  |L3.1104|
;;;337    		}
;;;338    		if (UART_Buffer_Rece[1] == 0x08||flag_ADJ_VH==1)			   //???У???
000450  4683              MOV      r11,r0
000452  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
000454  2808              CMP      r0,#8
000456  d003              BEQ      |L3.1120|
000458  f8d90000          LDR      r0,[r9,#0]  ; flagF
00045c  0700              LSLS     r0,r0,#28
00045e  d54f              BPL      |L3.1280|
                  |L3.1120|
;;;339    		{
;;;340    			vu16 var16;
;;;341    			vu32 var32a;
;;;342    			vu32 var32b;
;;;343    			
;;;344    			vu16 var16a;
;;;345    			vu32 var32c;
;;;346    			vu32 var32d;
;;;347    			Modify_B_READ =Rmon_value;//????
000460  8818              LDRH     r0,[r3,#0]  ; Rmon_value
000462  6120              STR      r0,[r4,#0x10]  ; Modify_B_READ
;;;348    			flag_OverV=1;
000464  49c9              LDR      r1,|L3.1932|
000466  6808              LDR      r0,[r1,#0]  ; flagG
000468  f0400002          ORR      r0,r0,#2
;;;349    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
00046c  6008              STR      r0,[r1,#0]  ; flagG
00046e  f89b2004          LDRB     r2,[r11,#4]  ; UART_Buffer_Rece
000472  f89b1003          LDRB     r1,[r11,#3]  ; UART_Buffer_Rece
000476  eb022101          ADD      r1,r2,r1,LSL #8
00047a  61a1              STR      r1,[r4,#0x18]  ; Modify_B_ACT
;;;350    			if(flag_OverV==1)//??????д?????У???д?FLASH
00047c  0780              LSLS     r0,r0,#30
00047e  d539              BPL      |L3.1268|
;;;351    			{
;;;352    				var32a = Modify_B_ACT;
000480  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;353    				var32a = var32a - Modify_A_ACT;
000482  68e1              LDR      r1,[r4,#0xc]  ; Modify_A_ACT
000484  1a40              SUBS     r0,r0,r1
;;;354    				var32a = var32a << 12;
;;;355    				var16 = Modify_B_READ - Modify_A_READ;
000486  6921              LDR      r1,[r4,#0x10]  ; Modify_B_READ
000488  0300              LSLS     r0,r0,#12             ;354
00048a  6862              LDR      r2,[r4,#4]  ; Modify_A_READ
00048c  1a89              SUBS     r1,r1,r2
00048e  b289              UXTH     r1,r1
;;;356    				var32a = var32a / var16;
000490  fbb0f0f1          UDIV     r0,r0,r1
;;;357                    if(r_raly == 1)
000494  49be              LDR      r1,|L3.1936|
000496  7809              LDRB     r1,[r1,#0]  ; r_raly
;;;358                    {
;;;359                        REG_CorrectionR = var32a;
;;;360                        var32a=0;
;;;361                        var32a = Modify_B_ACT;
;;;362                        var32a = var32a << 12;
;;;363                        var32b = Modify_B_READ;
;;;364                        var32b = var32b * REG_CorrectionR;
;;;365                        if (var32a < var32b)
;;;366                        {
;;;367                            var32b = var32b - var32a;
;;;368                            REG_ReadR_Offset = var32b;
;;;369                            Polar3 |= 0x01;
;;;370                        }
;;;371                        else 
;;;372                        {
;;;373                            var32a = var32a - var32b;
;;;374                            REG_ReadR_Offset = var32a;
;;;375                            Polar3 &= ~0x01;
;;;376                        }
;;;377                    }else{
;;;378                        REG_CorrectionRL = var32a;
000498  4642              MOV      r2,r8
00049a  2901              CMP      r1,#1                 ;357
00049c  d008              BEQ      |L3.1200|
00049e  62d0              STR      r0,[r2,#0x2c]  ; Correct_Parametet
;;;379                        var32a=0;
;;;380                        var32a = Modify_B_ACT;
0004a0  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;381                        var32a = var32a << 12;
;;;382                        var32b = Modify_B_READ;
0004a2  6923              LDR      r3,[r4,#0x10]  ; Modify_B_READ
0004a4  0301              LSLS     r1,r0,#12             ;381
;;;383                        var32b = var32b * REG_CorrectionRL;
0004a6  6ad0              LDR      r0,[r2,#0x2c]  ; Correct_Parametet
0004a8  4358              MULS     r0,r3,r0
;;;384                        if (var32a < var32b)
0004aa  4281              CMP      r1,r0
0004ac  d311              BCC      |L3.1234|
0004ae  e00a              B        |L3.1222|
                  |L3.1200|
0004b0  6150              STR      r0,[r2,#0x14]         ;359  ; Correct_Parametet
0004b2  69a0              LDR      r0,[r4,#0x18]         ;361  ; Modify_B_ACT
0004b4  6923              LDR      r3,[r4,#0x10]         ;363  ; Modify_B_READ
0004b6  0301              LSLS     r1,r0,#12             ;362
0004b8  6950              LDR      r0,[r2,#0x14]         ;364  ; Correct_Parametet
0004ba  4358              MULS     r0,r3,r0              ;364
0004bc  4281              CMP      r1,r0                 ;365
0004be  d202              BCS      |L3.1222|
0004c0  1a40              SUBS     r0,r0,r1              ;367
0004c2  6170              STR      r0,[r6,#0x14]         ;368  ; Correct_Strong
0004c4  e007              B        |L3.1238|
                  |L3.1222|
0004c6  1a08              SUBS     r0,r1,r0              ;373
0004c8  6170              STR      r0,[r6,#0x14]         ;374  ; Correct_Strong
0004ca  78e8              LDRB     r0,[r5,#3]            ;375  ; correct_por
0004cc  f0200001          BIC      r0,r0,#1              ;375
0004d0  e004              B        |L3.1244|
                  |L3.1234|
;;;385                        {
;;;386                            var32b = var32b - var32a;
0004d2  1a40              SUBS     r0,r0,r1
;;;387                            REG_ReadRL_Offset = var32b;
0004d4  62f0              STR      r0,[r6,#0x2c]  ; Correct_Strong
                  |L3.1238|
0004d6  78e8              LDRB     r0,[r5,#3]            ;369  ; correct_por
0004d8  f0400001          ORR      r0,r0,#1              ;369
                  |L3.1244|
;;;388                            Polar3 |= 0x01;
0004dc  70e8              STRB     r0,[r5,#3]
;;;389                        }
;;;390                        else 
;;;391                        {
;;;392                            var32a = var32a - var32b;
;;;393                            REG_ReadR_Offset = var32a;
;;;394                            Polar3 &= ~0x01;
;;;395                        }
;;;396                    }
;;;397    	//---------------------------------------------------------------------------------------//
;;;398    				Flash_Write_all();	//??д?FLASH
0004de  f7fffffe          BL       Flash_Write_all
;;;399    				flag_OverV=0;
0004e2  48aa              LDR      r0,|L3.1932|
0004e4  6801              LDR      r1,[r0,#0]  ; flagG
0004e6  f0210102          BIC      r1,r1,#2
;;;400    				Flag_DAC_OFF=0;
0004ea  6001              STR      r1,[r0,#0]  ; flagG
0004ec  6838              LDR      r0,[r7,#0]  ; flagB
0004ee  f0200008          BIC      r0,r0,#8
0004f2  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1268|
;;;401    			}
;;;402    			flag_ADJ_VH=0;//????λ??????
0004f4  f8d91000          LDR      r1,[r9,#0]  ; flagF
0004f8  f0210108          BIC      r1,r1,#8
0004fc  f8c91000          STR      r1,[r9,#0]  ; flagF
                  |L3.1280|
;;;403    		}		
;;;404    /*******************************??CC???・????У?******************************************/	
;;;405    		if (UART_Buffer_Rece[1] == 0x09||flag_ADJ_ALCC==1)			   //?・?У?
000500  f89b1001          LDRB     r1,[r11,#1]  ; UART_Buffer_Rece
000504  4658              MOV      r0,r11
;;;406    		{
;;;407    			Modify_A_READ = Imon_value;//??・
000506  f8dfb28c          LDR      r11,|L3.1940|
00050a  2909              CMP      r1,#9                 ;405
00050c  d003              BEQ      |L3.1302|
00050e  f8d91000          LDR      r1,[r9,#0]            ;405  ; flagF
000512  06c9              LSLS     r1,r1,#27             ;405
000514  d50a              BPL      |L3.1324|
                  |L3.1302|
000516  f8bb1000          LDRH     r1,[r11,#0]  ; Imon_value
00051a  6061              STR      r1,[r4,#4]  ; Modify_A_READ
;;;408    			Modify_C_READ = Contr_Current;//???・
00051c  499e              LDR      r1,|L3.1944|
00051e  8809              LDRH     r1,[r1,#0]  ; Contr_Current
000520  60a1              STR      r1,[r4,#8]  ; Modify_C_READ
;;;409    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000522  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000524  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
000526  eb012102          ADD      r1,r1,r2,LSL #8
00052a  60e1              STR      r1,[r4,#0xc]  ; Modify_A_ACT
                  |L3.1324|
;;;410    		}
;;;411    
;;;412    		if (UART_Buffer_Rece[1] == 0x0A||flag_ADJ_AHCC==1)			   //?・?У???
00052c  4895              LDR      r0,|L3.1924|
00052e  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
000530  280a              CMP      r0,#0xa
000532  d003              BEQ      |L3.1340|
000534  f8d90000          LDR      r0,[r9,#0]  ; flagF
000538  0680              LSLS     r0,r0,#26
00053a  d552              BPL      |L3.1506|
                  |L3.1340|
;;;413    		{
;;;414    			vu16 var16;
;;;415    			vu32 var32a;
;;;416    			vu32 var32b;
;;;417    			
;;;418    			vu16 var16a;
;;;419    			vu32 var32c;
;;;420    			vu32 var32d;
;;;421    			
;;;422    			Modify_D_READ = Contr_Current;
00053c  4896              LDR      r0,|L3.1944|
00053e  8800              LDRH     r0,[r0,#0]  ; Contr_Current
000540  6160              STR      r0,[r4,#0x14]  ; Modify_D_READ
;;;423    			Modify_B_READ = Imon_value;
000542  f8bb0000          LDRH     r0,[r11,#0]  ; Imon_value
000546  6120              STR      r0,[r4,#0x10]  ; Modify_B_READ
;;;424    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000548  488e              LDR      r0,|L3.1924|
00054a  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
00054c  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
00054e  eb012000          ADD      r0,r1,r0,LSL #8
000552  61a0              STR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;425    			var32a = Modify_B_ACT;
000554  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;426    			var32a = var32a - Modify_A_ACT;
000556  68e1              LDR      r1,[r4,#0xc]  ; Modify_A_ACT
000558  1a40              SUBS     r0,r0,r1
;;;427    			var32a = var32a << 14;
;;;428    			var16 = Modify_B_READ - Modify_A_READ;
00055a  6921              LDR      r1,[r4,#0x10]  ; Modify_B_READ
00055c  0380              LSLS     r0,r0,#14             ;427
00055e  6862              LDR      r2,[r4,#4]  ; Modify_A_READ
;;;429    			var32a = var32a / var16;
;;;430    			REG_POWERA = var32a;
000560  4643              MOV      r3,r8
000562  1a89              SUBS     r1,r1,r2              ;428
000564  b289              UXTH     r1,r1                 ;428
000566  fbb0f0f1          UDIV     r0,r0,r1              ;429
00056a  f8c80018          STR      r0,[r8,#0x18]  ; Correct_Parametet
;;;431    			var32a = Modify_B_ACT;
00056e  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;432    			var32a = var32a << 14;
;;;433    			var32b = Modify_B_READ;
000570  6921              LDR      r1,[r4,#0x10]  ; Modify_B_READ
000572  0380              LSLS     r0,r0,#14             ;432
;;;434    			var32b = var32b * REG_POWERA;
000574  f8d82018          LDR      r2,[r8,#0x18]  ; Correct_Parametet
000578  434a              MULS     r2,r1,r2
;;;435    			if (var32a < var32b)
00057a  4290              CMP      r0,r2
00057c  d205              BCS      |L3.1418|
;;;436    			{
;;;437    				var32b = var32b - var32a;
00057e  1a10              SUBS     r0,r2,r0
;;;438    				REG_POWERA_Offset = var32b;
000580  61b0              STR      r0,[r6,#0x18]  ; Correct_Strong
;;;439    				Polar4 |= 0x01;
000582  7928              LDRB     r0,[r5,#4]  ; correct_por
000584  f0400001          ORR      r0,r0,#1
000588  e004              B        |L3.1428|
                  |L3.1418|
;;;440    			}
;;;441    			else 
;;;442    			{
;;;443    				var32a = var32a - var32b;
00058a  1a80              SUBS     r0,r0,r2
;;;444    				REG_POWERA_Offset = var32a;
00058c  61b0              STR      r0,[r6,#0x18]  ; Correct_Strong
;;;445    				Polar4 &= ~0x01;					//?・????￡?У???
00058e  7928              LDRB     r0,[r5,#4]  ; correct_por
000590  f0200001          BIC      r0,r0,#1
                  |L3.1428|
000594  7128              STRB     r0,[r5,#4]
;;;446    			}
;;;447    	//---------------------------------------------------------------------------------//
;;;448    			var32c = Modify_B_ACT; //???・У?
000596  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;449    			var32c = var32c - Modify_A_ACT;
000598  68e1              LDR      r1,[r4,#0xc]  ; Modify_A_ACT
00059a  1a40              SUBS     r0,r0,r1
;;;450    			var32c = var32c << 14;
;;;451    			var16a=Modify_D_READ-Modify_C_READ;
00059c  6961              LDR      r1,[r4,#0x14]  ; Modify_D_READ
00059e  0380              LSLS     r0,r0,#14             ;450
0005a0  68a2              LDR      r2,[r4,#8]  ; Modify_C_READ
0005a2  1a89              SUBS     r1,r1,r2
;;;452    			var16a=var16a*2;
0005a4  0449              LSLS     r1,r1,#17
0005a6  0c09              LSRS     r1,r1,#16
;;;453    			var32c=var32c/var16a;
0005a8  fbb0f0f1          UDIV     r0,r0,r1
;;;454    			SET_POWERA = var32c;
0005ac  61d8              STR      r0,[r3,#0x1c]  ; Correct_Parametet
;;;455    			var32c = Modify_B_ACT;
0005ae  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;456    			var32c = var32c << 14;
;;;457    			var32d = SET_POWERA;
0005b0  69d9              LDR      r1,[r3,#0x1c]  ; Correct_Parametet
0005b2  0380              LSLS     r0,r0,#14             ;456
;;;458    			var32d = var32d * (Modify_D_READ*2);
0005b4  6962              LDR      r2,[r4,#0x14]  ; Modify_D_READ
0005b6  4351              MULS     r1,r2,r1
0005b8  0049              LSLS     r1,r1,#1
;;;459    			if (var32c < var32d)
0005ba  4288              CMP      r0,r1
0005bc  d205              BCS      |L3.1482|
;;;460    			{
;;;461    				var32d = var32d - var32c;
0005be  1a08              SUBS     r0,r1,r0
;;;462    				SET_POWERA_Offset = var32d;
0005c0  61f0              STR      r0,[r6,#0x1c]  ; Correct_Strong
;;;463    				Polar4 |= 0x04;
0005c2  7928              LDRB     r0,[r5,#4]  ; correct_por
0005c4  f0400004          ORR      r0,r0,#4
0005c8  e004              B        |L3.1492|
                  |L3.1482|
;;;464    			}
;;;465    			else 
;;;466    			{
;;;467    				var32c = var32c - var32d;
0005ca  1a40              SUBS     r0,r0,r1
;;;468    				SET_POWERA_Offset = var32c;
0005cc  61f0              STR      r0,[r6,#0x1c]  ; Correct_Strong
;;;469    				Polar4 &= ~0x04;
0005ce  7928              LDRB     r0,[r5,#4]  ; correct_por
0005d0  f0200004          BIC      r0,r0,#4
                  |L3.1492|
0005d4  7128              STRB     r0,[r5,#4]
;;;470    			}
;;;471    			Flash_Write_all ();	
0005d6  f7fffffe          BL       Flash_Write_all
;;;472    			Flag_DAC_OFF=0;
0005da  6838              LDR      r0,[r7,#0]  ; flagB
0005dc  f0200008          BIC      r0,r0,#8
0005e0  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1506|
;;;473    		}
;;;474    /*******************************????????У?******************************************/	
;;;475    		if (UART_Buffer_Rece[1] == 0x0B)			   //?・?У?
0005e2  4868              LDR      r0,|L3.1924|
0005e4  7842              LDRB     r2,[r0,#1]  ; UART_Buffer_Rece
;;;476    		{
;;;477    			Modify_A_READ = Vmon_value;//??・
0005e6  496d              LDR      r1,|L3.1948|
0005e8  2a0b              CMP      r2,#0xb               ;475
0005ea  d109              BNE      |L3.1536|
0005ec  880a              LDRH     r2,[r1,#0]  ; Vmon_value
0005ee  6062              STR      r2,[r4,#4]  ; Modify_A_READ
;;;478    			Modify_C_READ = Contr_Voltage;//???・
0005f0  4a6b              LDR      r2,|L3.1952|
0005f2  8812              LDRH     r2,[r2,#0]  ; Contr_Voltage
0005f4  60a2              STR      r2,[r4,#8]  ; Modify_C_READ
;;;479    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0005f6  7902              LDRB     r2,[r0,#4]  ; UART_Buffer_Rece
0005f8  78c3              LDRB     r3,[r0,#3]  ; UART_Buffer_Rece
0005fa  eb022203          ADD      r2,r2,r3,LSL #8
0005fe  60e2              STR      r2,[r4,#0xc]  ; Modify_A_ACT
                  |L3.1536|
;;;480    		}
;;;481    
;;;482    		if (UART_Buffer_Rece[1] == 0x0C)			   //?・?У???
000600  4681              MOV      r9,r0
000602  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
000604  280c              CMP      r0,#0xc
000606  d152              BNE      |L3.1710|
;;;483    		{
;;;484    			vu16 var16;
;;;485    			vu32 var32a;
;;;486    			vu32 var32b;
;;;487    			
;;;488    			vu16 var16a;
;;;489    			vu32 var32c;
;;;490    			vu32 var32d;
;;;491    			
;;;492    			Modify_D_READ = Contr_Voltage;
000608  4865              LDR      r0,|L3.1952|
00060a  8800              LDRH     r0,[r0,#0]  ; Contr_Voltage
00060c  6160              STR      r0,[r4,#0x14]  ; Modify_D_READ
;;;493    			Modify_B_READ = Vmon_value;
00060e  8808              LDRH     r0,[r1,#0]  ; Vmon_value
000610  6120              STR      r0,[r4,#0x10]  ; Modify_B_READ
;;;494    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000612  f8991004          LDRB     r1,[r9,#4]  ; UART_Buffer_Rece
000616  f8990003          LDRB     r0,[r9,#3]  ; UART_Buffer_Rece
00061a  eb012000          ADD      r0,r1,r0,LSL #8
00061e  61a0              STR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;495    			var32a = Modify_B_ACT;
000620  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;496    			var32a = var32a - Modify_A_ACT;
000622  68e1              LDR      r1,[r4,#0xc]  ; Modify_A_ACT
000624  1a40              SUBS     r0,r0,r1
;;;497    			var32a = var32a << 14;
;;;498    			var16 = Modify_B_READ - Modify_A_READ;
000626  6921              LDR      r1,[r4,#0x10]  ; Modify_B_READ
000628  0380              LSLS     r0,r0,#14             ;497
00062a  6862              LDR      r2,[r4,#4]  ; Modify_A_READ
00062c  1a89              SUBS     r1,r1,r2
00062e  b289              UXTH     r1,r1
;;;499    			var32a = var32a / var16;
000630  fbb0f0f1          UDIV     r0,r0,r1
;;;500    			REG_POWERV = var32a;
000634  4641              MOV      r1,r8
000636  f8c80020          STR      r0,[r8,#0x20]  ; Correct_Parametet
;;;501    			var32a = Modify_B_ACT;
00063a  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;502    			var32a = var32a << 14;
;;;503    			var32b = Modify_B_READ;
00063c  6922              LDR      r2,[r4,#0x10]  ; Modify_B_READ
00063e  0380              LSLS     r0,r0,#14             ;502
;;;504    			var32b = var32b * REG_POWERV;
000640  f8d83020          LDR      r3,[r8,#0x20]  ; Correct_Parametet
000644  4353              MULS     r3,r2,r3
;;;505    			if (var32a < var32b)
000646  4298              CMP      r0,r3
000648  d205              BCS      |L3.1622|
;;;506    			{
;;;507    				var32b = var32b - var32a;
00064a  1a18              SUBS     r0,r3,r0
;;;508    				REG_POWERV_Offset = var32b;
00064c  6230              STR      r0,[r6,#0x20]  ; Correct_Strong
;;;509    				Polar5 |= 0x01;
00064e  7968              LDRB     r0,[r5,#5]  ; correct_por
000650  f0400001          ORR      r0,r0,#1
000654  e004              B        |L3.1632|
                  |L3.1622|
;;;510    			}
;;;511    			else 
;;;512    			{
;;;513    				var32a = var32a - var32b;
000656  1ac0              SUBS     r0,r0,r3
;;;514    				REG_POWERV_Offset = var32a;
000658  6230              STR      r0,[r6,#0x20]  ; Correct_Strong
;;;515    				Polar5 &= ~0x01;					
00065a  7968              LDRB     r0,[r5,#5]  ; correct_por
00065c  f0200001          BIC      r0,r0,#1
                  |L3.1632|
000660  7168              STRB     r0,[r5,#5]
;;;516    			}
;;;517    	//---------------------------------------------------------------------------------//
;;;518    			var32c = Modify_B_ACT; //????У?
000662  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;519    			var32c = var32c - Modify_A_ACT;
000664  68e2              LDR      r2,[r4,#0xc]  ; Modify_A_ACT
000666  1a80              SUBS     r0,r0,r2
;;;520    			var32c = var32c << 14;
;;;521    			var16a=Modify_D_READ-Modify_C_READ;
000668  6962              LDR      r2,[r4,#0x14]  ; Modify_D_READ
00066a  0380              LSLS     r0,r0,#14             ;520
00066c  68a3              LDR      r3,[r4,#8]  ; Modify_C_READ
00066e  1ad2              SUBS     r2,r2,r3
;;;522    			var16a=var16a*2;
000670  0452              LSLS     r2,r2,#17
000672  0c12              LSRS     r2,r2,#16
;;;523    			var32c=var32c/var16a;
000674  fbb0f0f2          UDIV     r0,r0,r2
;;;524    			SET_POWERV = var32c;
000678  6248              STR      r0,[r1,#0x24]  ; Correct_Parametet
;;;525    			var32c = Modify_B_ACT;
00067a  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;526    			var32c = var32c << 14;
;;;527    			var32d = SET_POWERV;
00067c  6a49              LDR      r1,[r1,#0x24]  ; Correct_Parametet
00067e  0380              LSLS     r0,r0,#14             ;526
;;;528    			var32d = var32d * (Modify_D_READ*2);
000680  6962              LDR      r2,[r4,#0x14]  ; Modify_D_READ
000682  4351              MULS     r1,r2,r1
000684  0049              LSLS     r1,r1,#1
;;;529    			if (var32c < var32d)
000686  4288              CMP      r0,r1
000688  d205              BCS      |L3.1686|
;;;530    			{
;;;531    				var32d = var32d - var32c;
00068a  1a08              SUBS     r0,r1,r0
;;;532    				SET_POWERV_Offset = var32d;
00068c  6270              STR      r0,[r6,#0x24]  ; Correct_Strong
;;;533    				Polar5 |= 0x04;
00068e  7968              LDRB     r0,[r5,#5]  ; correct_por
000690  f0400004          ORR      r0,r0,#4
000694  e004              B        |L3.1696|
                  |L3.1686|
;;;534    			}
;;;535    			else 
;;;536    			{
;;;537    				var32c = var32c - var32d;
000696  1a40              SUBS     r0,r0,r1
;;;538    				SET_POWERV_Offset = var32c;
000698  6270              STR      r0,[r6,#0x24]  ; Correct_Strong
;;;539    				Polar5 &= ~0x04;
00069a  7968              LDRB     r0,[r5,#5]  ; correct_por
00069c  f0200004          BIC      r0,r0,#4
                  |L3.1696|
0006a0  7168              STRB     r0,[r5,#5]
;;;540    			}
;;;541    			Flash_Write_all ();	
0006a2  f7fffffe          BL       Flash_Write_all
;;;542    			Flag_DAC_OFF=0;
0006a6  6838              LDR      r0,[r7,#0]  ; flagB
0006a8  f0200008          BIC      r0,r0,#8
0006ac  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1710|
;;;543    		}
;;;544    /****************???・?У?**********************************/
;;;545    		if (UART_Buffer_Rece[1] == 0x0D)			  
0006ae  f8991001          LDRB     r1,[r9,#1]  ; UART_Buffer_Rece
0006b2  4648              MOV      r0,r9
0006b4  290d              CMP      r1,#0xd
0006b6  d107              BNE      |L3.1736|
;;;546    		{ 
;;;547    			Modify_A_READ = Imon_value;
0006b8  f8bb1000          LDRH     r1,[r11,#0]  ; Imon_value
0006bc  6061              STR      r1,[r4,#4]  ; Modify_A_READ
;;;548    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0006be  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
0006c0  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
0006c2  eb012102          ADD      r1,r1,r2,LSL #8
0006c6  60e1              STR      r1,[r4,#0xc]  ; Modify_A_ACT
                  |L3.1736|
;;;549    		}
;;;550    
;;;551    		if (UART_Buffer_Rece[1] == 0x0E)			   
0006c8  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
0006ca  280e              CMP      r0,#0xe
0006cc  d12f              BNE      |L3.1838|
;;;552    		{
;;;553    			vu16 var16;
;;;554    			vu32 var32a;
;;;555    			vu32 var32b;
;;;556    			
;;;557    			vu16 var16a;
;;;558    			vu32 var32c;
;;;559    			vu32 var32d;
;;;560    			
;;;561    			Modify_B_READ = Imon_value;
0006ce  f8bb0000          LDRH     r0,[r11,#0]  ; Imon_value
0006d2  6120              STR      r0,[r4,#0x10]  ; Modify_B_READ
;;;562    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0006d4  f8991004          LDRB     r1,[r9,#4]  ; UART_Buffer_Rece
0006d8  f8990003          LDRB     r0,[r9,#3]  ; UART_Buffer_Rece
0006dc  eb012000          ADD      r0,r1,r0,LSL #8
0006e0  61a0              STR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;563    			var32a = Modify_B_ACT;
0006e2  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;564    			var32a = var32a - Modify_A_ACT;
0006e4  68e1              LDR      r1,[r4,#0xc]  ; Modify_A_ACT
0006e6  1a40              SUBS     r0,r0,r1
;;;565    			var32a = var32a << 14;
0006e8  0381              LSLS     r1,r0,#14
;;;566    			var16 = Modify_B_READ - Modify_A_READ;
0006ea  6920              LDR      r0,[r4,#0x10]  ; Modify_B_READ
0006ec  6862              LDR      r2,[r4,#4]  ; Modify_A_READ
0006ee  1a80              SUBS     r0,r0,r2
0006f0  b280              UXTH     r0,r0
;;;567    			var32a = var32a / var16;
0006f2  fbb1f0f0          UDIV     r0,r1,r0
;;;568    			CON_POWERA = var32a;
0006f6  f8c80028          STR      r0,[r8,#0x28]  ; Correct_Parametet
;;;569    			var32a = Modify_B_ACT;
0006fa  69a0              LDR      r0,[r4,#0x18]  ; Modify_B_ACT
;;;570    			var32a = var32a << 14;
;;;571    			var32b = Modify_B_READ;
0006fc  6922              LDR      r2,[r4,#0x10]  ; Modify_B_READ
0006fe  0381              LSLS     r1,r0,#14             ;570
;;;572    			var32b = var32b * CON_POWERA;
000700  f8d80028          LDR      r0,[r8,#0x28]  ; Correct_Parametet
000704  4350              MULS     r0,r2,r0
;;;573    			if (var32a < var32b)
000706  4281              CMP      r1,r0
000708  d205              BCS      |L3.1814|
;;;574    			{
;;;575    				var32b = var32b - var32a;
00070a  1a40              SUBS     r0,r0,r1
;;;576    				CON_POWERA_Offset = var32b;
00070c  62b0              STR      r0,[r6,#0x28]  ; Correct_Strong
;;;577    				Polar3 |= 0x04;
00070e  78e8              LDRB     r0,[r5,#3]  ; correct_por
000710  f0400004          ORR      r0,r0,#4
000714  e004              B        |L3.1824|
                  |L3.1814|
;;;578    			}
;;;579    			else 
;;;580    			{
;;;581    				var32a = var32a - var32b;
000716  1a08              SUBS     r0,r1,r0
;;;582    				CON_POWERA_Offset = var32a;
000718  62b0              STR      r0,[r6,#0x28]  ; Correct_Strong
;;;583    				Polar3 &= ~0x04;					
00071a  78e8              LDRB     r0,[r5,#3]  ; correct_por
00071c  f0200004          BIC      r0,r0,#4
                  |L3.1824|
000720  70e8              STRB     r0,[r5,#3]
;;;584    			}
;;;585    			Flash_Write_all ();	
000722  f7fffffe          BL       Flash_Write_all
;;;586    			Flag_DAC_OFF=0;
000726  6838              LDR      r0,[r7,#0]  ; flagB
000728  f0200008          BIC      r0,r0,#8
00072c  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1838|
;;;587    		}
;;;588    /***********??DAC*******************************************/
;;;589    		if (UART_Buffer_Rece[1] == 0x0F)			   
00072e  f8991001          LDRB     r1,[r9,#1]  ; UART_Buffer_Rece
000732  4648              MOV      r0,r9
000734  290f              CMP      r1,#0xf
000736  d109              BNE      |L3.1868|
;;;590    		{
;;;591    			Contr_Laod = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000738  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
00073a  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
00073c  eb012102          ADD      r1,r1,r2,LSL #8
000740  f8aa1000          STRH     r1,[r10,#0]
;;;592    			Flag_DAC_OFF=1;
000744  6839              LDR      r1,[r7,#0]  ; flagB
000746  f0410108          ORR      r1,r1,#8
00074a  6039              STR      r1,[r7,#0]  ; flagB
                  |L3.1868|
;;;593    		}
;;;594    		if (UART_Buffer_Rece[1] == 0x20)			   
00074c  7841              LDRB     r1,[r0,#1]  ; UART_Buffer_Rece
00074e  2920              CMP      r1,#0x20
000750  d109              BNE      |L3.1894|
;;;595    		{
;;;596    			Contr_Voltage = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000752  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
000754  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
000756  eb012102          ADD      r1,r1,r2,LSL #8
00075a  4a11              LDR      r2,|L3.1952|
00075c  8011              STRH     r1,[r2,#0]
;;;597    			Flag_DAC_OFF=1;
00075e  6839              LDR      r1,[r7,#0]  ; flagB
000760  f0410108          ORR      r1,r1,#8
000764  6039              STR      r1,[r7,#0]  ; flagB
                  |L3.1894|
;;;598    		}
;;;599    		if (UART_Buffer_Rece[1] == 0x21)			   
000766  7841              LDRB     r1,[r0,#1]  ; UART_Buffer_Rece
000768  2921              CMP      r1,#0x21
00076a  d109              BNE      |L3.1920|
;;;600    		{
;;;601    			Contr_Current = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
00076c  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
00076e  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
000770  eb012000          ADD      r0,r1,r0,LSL #8
000774  4908              LDR      r1,|L3.1944|
000776  8008              STRH     r0,[r1,#0]
;;;602    			Flag_DAC_OFF=1;
000778  6838              LDR      r0,[r7,#0]  ; flagB
00077a  f0400008          ORR      r0,r0,#8
00077e  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1920|
;;;603    		}
;;;604    	}
;;;605    //===================================================================================
;;;606    }
000780  e8bd9ff0          POP      {r4-r12,pc}
;;;607    //===============================AD值转换成测量值============================================//
                          ENDP

                  |L3.1924|
                          DCD      UART_Buffer_Rece
                  |L3.1928|
                          DCD      Rmon_value
                  |L3.1932|
                          DCD      flagG
                  |L3.1936|
                          DCD      r_raly
                  |L3.1940|
                          DCD      Imon_value
                  |L3.1944|
                          DCD      Contr_Current
                  |L3.1948|
                          DCD      Vmon_value
                  |L3.1952|
                          DCD      Contr_Voltage

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Correct_Parametet
                          %        48
                  Correct_Strong
                          %        48
                  Run_Control
                          %        164

                          AREA ||.data||, DATA, ALIGN=1

                  ADJ_Write
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  DAC_Flag
000000  00                DCB      0x00
                  ADDR
000001  000000            DCB      0x00,0x00,0x00
                  Modify_A_READ
                          DCD      0x00000000
                  Modify_C_READ
                          DCD      0x00000000
                  Modify_A_ACT
                          DCD      0x00000000
                  Modify_B_READ
                          DCD      0x00000000
                  Modify_D_READ
                          DCD      0x00000000
                  Modify_B_ACT
                          DCD      0x00000000
                  correct_por
                          DCD      0x00000000
000020  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\drive\\modbus.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_modbus_c_bae18981____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_modbus_c_bae18981____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_modbus_c_bae18981____REVSH|
#line 128
|__asm___8_modbus_c_bae18981____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
