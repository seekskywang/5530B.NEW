; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\usbh_msc_bot.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\usbh_msc_bot.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\usbh_msc_bot.crf ..\USB\STM32_USB_HOST_Library\Class\MSC\src\usbh_msc_bot.c]
                          THUMB

                          AREA ||i.USBH_MSC_BOT_Abort||, CODE, READONLY, ALIGN=2

                  USBH_MSC_BOT_Abort PROC
;;;450    */
;;;451    USBH_Status USBH_MSC_BOT_Abort(USB_OTG_CORE_HANDLE *pdev, 
000000  b510              PUSH     {r4,lr}
;;;452                                   USBH_HOST *phost,
;;;453                                   uint8_t direction)
;;;454    {
000002  4684              MOV      r12,r0
;;;455      USBH_Status status;
;;;456      
;;;457      status = USBH_BUSY;
;;;458      
;;;459      switch (direction)
;;;460      {
;;;461      case USBH_MSC_DIR_IN :
;;;462        /* send ClrFeture on Bulk IN endpoint */
;;;463        status = USBH_ClrFeature(pdev,
000004  4c0a              LDR      r4,|L1.48|
000006  2001              MOVS     r0,#1                 ;457
000008  b112              CBZ      r2,|L1.16|
00000a  2a01              CMP      r2,#1                 ;459
00000c  d108              BNE      |L1.32|
00000e  e002              B        |L1.22|
                  |L1.16|
000010  7823              LDRB     r3,[r4,#0]  ; MSC_Machine
000012  78e2              LDRB     r2,[r4,#3]  ; MSC_Machine
;;;464                                 phost,
;;;465                                 MSC_Machine.MSBulkInEp,
;;;466                                 MSC_Machine.hc_num_in);
;;;467        
;;;468        break;
000014  e001              B        |L1.26|
                  |L1.22|
;;;469        
;;;470      case USBH_MSC_DIR_OUT :
;;;471        /*send ClrFeature on Bulk OUT endpoint */
;;;472        status = USBH_ClrFeature(pdev, 
000016  7863              LDRB     r3,[r4,#1]  ; MSC_Machine
000018  78a2              LDRB     r2,[r4,#2]  ; MSC_Machine
                  |L1.26|
00001a  4660              MOV      r0,r12                ;463
00001c  f7fffffe          BL       USBH_ClrFeature
                  |L1.32|
;;;473                                 phost,
;;;474                                 MSC_Machine.MSBulkOutEp,
;;;475                                 MSC_Machine.hc_num_out);
;;;476        break;
;;;477        
;;;478      default:
;;;479        break;
;;;480      }
;;;481      
;;;482      BOTStallErrorCount++; /* Check Continous Number of times, STALL has Occured */ 
000020  4a04              LDR      r2,|L1.52|
000022  6911              LDR      r1,[r2,#0x10]  ; BOTStallErrorCount
000024  1c49              ADDS     r1,r1,#1
;;;483      if (BOTStallErrorCount > MAX_BULK_STALL_COUNT_LIMIT )
000026  6111              STR      r1,[r2,#0x10]  ; BOTStallErrorCount
000028  2904              CMP      r1,#4
00002a  d900              BLS      |L1.46|
;;;484      {
;;;485        status = USBH_UNRECOVERED_ERROR;
00002c  2004              MOVS     r0,#4
                  |L1.46|
;;;486      }
;;;487      
;;;488      return status;
;;;489    }
00002e  bd10              POP      {r4,pc}
;;;490    
                          ENDP

                  |L1.48|
                          DCD      MSC_Machine
                  |L1.52|
                          DCD      ||.data||

                          AREA ||i.USBH_MSC_DecodeCSW||, CODE, READONLY, ALIGN=2

                  USBH_MSC_DecodeCSW PROC
;;;505    
;;;506    uint8_t USBH_MSC_DecodeCSW(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
000000  b570              PUSH     {r4-r6,lr}
;;;507    {
000002  4605              MOV      r5,r0
;;;508      uint8_t status;
;;;509      uint32_t dataXferCount = 0;
;;;510      status = USBH_MSC_FAIL;
000004  2401              MOVS     r4,#1
;;;511      
;;;512      if(HCD_IsDeviceConnected(pdev))
000006  f7fffffe          BL       HCD_IsDeviceConnected
00000a  b1d8              CBZ      r0,|L2.68|
;;;513      {
;;;514        /*Checking if the transfer length is diffrent than 13*/
;;;515        dataXferCount = HCD_GetXferCnt(pdev, MSC_Machine.hc_num_in); 
00000c  4810              LDR      r0,|L2.80|
00000e  7801              LDRB     r1,[r0,#0]  ; MSC_Machine
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       HCD_GetXferCnt
;;;516        
;;;517        if(dataXferCount != USBH_MSC_CSW_LENGTH)
000016  280d              CMP      r0,#0xd
000018  d113              BNE      |L2.66|
;;;518        {
;;;519          /*(4) Hi > Dn (Host expects to receive data from the device,
;;;520          Device intends to transfer no data)
;;;521          (5) Hi > Di (Host expects to receive data from the device,
;;;522          Device intends to send data to the host)
;;;523          (9) Ho > Dn (Host expects to send data to the device,
;;;524          Device intends to transfer no data)
;;;525          (11) Ho > Do  (Host expects to send data to the device,
;;;526          Device intends to receive data from the host)*/
;;;527          
;;;528          
;;;529          status = USBH_MSC_PHASE_ERROR;
;;;530        }
;;;531        else
;;;532        { /* CSW length is Correct */
;;;533          
;;;534          /* Check validity of the CSW Signature and CSWStatus */
;;;535          if(USBH_MSC_CSWData.field.CSWSignature == USBH_MSC_BOT_CSW_SIGNATURE)
00001a  480e              LDR      r0,|L2.84|
00001c  4a0e              LDR      r2,|L2.88|
00001e  6801              LDR      r1,[r0,#0]  ; USBH_MSC_CSWData
000020  4291              CMP      r1,r2
000022  d10e              BNE      |L2.66|
;;;536          {/* Check Condition 1. dCSWSignature is equal to 53425355h */
;;;537            
;;;538            if(USBH_MSC_CSWData.field.CSWTag == USBH_MSC_CBWData.field.CBWTag)
000024  f1a00220          SUB      r2,r0,#0x20
000028  6841              LDR      r1,[r0,#4]  ; USBH_MSC_CSWData
00002a  6852              LDR      r2,[r2,#4]  ; USBH_MSC_CBWData
00002c  4291              CMP      r1,r2
00002e  d109              BNE      |L2.68|
;;;539            {
;;;540              /* Check Condition 3. dCSWTag matches the dCBWTag from the 
;;;541              corresponding CBW */
;;;542              
;;;543              if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_OK) 
000030  7b00              LDRB     r0,[r0,#0xc]  ; USBH_MSC_CSWData
000032  b120              CBZ      r0,|L2.62|
;;;544              {
;;;545                /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;546                
;;;547                Hn Host expects no data transfers
;;;548                Hi Host expects to receive data from the device
;;;549                Ho Host expects to send data to the device
;;;550                
;;;551                Dn Device intends to transfer no data
;;;552                Di Device intends to send data to the host
;;;553                Do Device intends to receive data from the host
;;;554                
;;;555                Section 6.7 
;;;556                (1) Hn = Dn (Host expects no data transfers,
;;;557                Device intends to transfer no data)
;;;558                (6) Hi = Di (Host expects to receive data from the device,
;;;559                Device intends to send data to the host)
;;;560                (12) Ho = Do (Host expects to send data to the device, 
;;;561                Device intends to receive data from the host)
;;;562                
;;;563                */
;;;564                
;;;565                status = USBH_MSC_OK;
;;;566              }
;;;567              else if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_FAIL)
000034  2801              CMP      r0,#1
000036  d005              BEQ      |L2.68|
;;;568              {
;;;569                status = USBH_MSC_FAIL;
;;;570              }
;;;571              
;;;572              else if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_PHASE_ERROR)
000038  2802              CMP      r0,#2
00003a  d002              BEQ      |L2.66|
00003c  e002              B        |L2.68|
                  |L2.62|
00003e  2400              MOVS     r4,#0                 ;565
000040  e000              B        |L2.68|
                  |L2.66|
;;;573              { 
;;;574                /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;575                Section 6.7 
;;;576                (2) Hn < Di ( Host expects no data transfers, 
;;;577                Device intends to send data to the host)
;;;578                (3) Hn < Do ( Host expects no data transfers, 
;;;579                Device intends to receive data from the host)
;;;580                (7) Hi < Di ( Host expects to receive data from the device, 
;;;581                Device intends to send data to the host)
;;;582                (8) Hi <> Do ( Host expects to receive data from the device, 
;;;583                Device intends to receive data from the host)
;;;584                (10) Ho <> Di (Host expects to send data to the device,
;;;585                Di Device intends to send data to the host)
;;;586                (13) Ho < Do (Host expects to send data to the device, 
;;;587                Device intends to receive data from the host)
;;;588                */
;;;589                
;;;590                status = USBH_MSC_PHASE_ERROR;
;;;591              }
;;;592            } /* CSW Tag Matching is Checked  */
;;;593          } /* CSW Signature Correct Checking */
;;;594          else
;;;595          {
;;;596            /* If the CSW Signature is not valid, We sall return the Phase Error to
;;;597            Upper Layers for Reset Recovery */
;;;598            
;;;599            status = USBH_MSC_PHASE_ERROR;
000042  2402              MOVS     r4,#2
                  |L2.68|
;;;600          }
;;;601        } /* CSW Length Check*/
;;;602      }
;;;603      
;;;604      USBH_MSC_BOTXferParam.BOTXferStatus  = status;
000044  4803              LDR      r0,|L2.84|
000046  3010              ADDS     r0,r0,#0x10
000048  73c4              STRB     r4,[r0,#0xf]
;;;605      return status;
00004a  4620              MOV      r0,r4
;;;606    }
00004c  bd70              POP      {r4-r6,pc}
;;;607    
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      MSC_Machine
                  |L2.84|
                          DCD      ||.bss||+0x20
                  |L2.88|
                          DCD      0x53425355

                          AREA ||i.USBH_MSC_HandleBOTXfer||, CODE, READONLY, ALIGN=2

                  USBH_MSC_HandleBOTXfer PROC
;;;152    */
;;;153    void USBH_MSC_HandleBOTXfer (USB_OTG_CORE_HANDLE *pdev ,USBH_HOST *phost)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;154    {
000004  4688              MOV      r8,r1
000006  4681              MOV      r9,r0
;;;155      uint8_t xferDirection, index;
;;;156      static uint32_t remainingDataLength;
;;;157      static uint8_t *datapointer , *datapointer_prev;
;;;158      static uint8_t error_direction;
;;;159      USBH_Status status;
;;;160      
;;;161      URB_STATE URB_Status = URB_IDLE;
;;;162      
;;;163      if(HCD_IsDeviceConnected(pdev))
000008  f7fffffe          BL       HCD_IsDeviceConnected
00000c  2800              CMP      r0,#0
00000e  d01d              BEQ      |L3.76|
;;;164      {  
;;;165        
;;;166        switch (USBH_MSC_BOTXferParam.BOTState)
000010  4c7e              LDR      r4,|L3.524|
000012  2705              MOVS     r7,#5
;;;167        {
;;;168        case USBH_MSC_SEND_CBW:
;;;169          /* send CBW */    
;;;170          USBH_BulkSendData (pdev,
000014  4a7e              LDR      r2,|L3.528|
000016  7921              LDRB     r1,[r4,#4]            ;166  ; USBH_MSC_BOTXferParam
;;;171                             &USBH_MSC_CBWData.CBWArray[0], 
;;;172                             USBH_MSC_BOT_CBW_PACKET_LENGTH , 
;;;173                             MSC_Machine.hc_num_out);
;;;174          
;;;175          USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_SEND_CBW;
;;;176          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SENT_CBW;
;;;177          
;;;178          break;
;;;179          
;;;180        case USBH_MSC_SENT_CBW:
;;;181          URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_out);
;;;182          
;;;183          if(URB_Status == URB_DONE)
;;;184          { 
;;;185            BOTStallErrorCount = 0;
000018  4d7e              LDR      r5,|L3.532|
00001a  2600              MOVS     r6,#0                 ;161
00001c  f04f0b08          MOV      r11,#8                ;166
000020  f04f0a02          MOV      r10,#2                ;166
000024  2909              CMP      r1,#9                 ;166
000026  d211              BCS      |L3.76|
000028  e8dff001          TBB      [pc,r1]               ;166
00002c  10051236          DCB      0x10,0x05,0x12,0x36
000030  66aabfd5          DCB      0x66,0xaa,0xbf,0xd5
000034  e200              DCB      0xe2,0x00
000036  4975              LDR      r1,|L3.524|
000038  7853              LDRB     r3,[r2,#1]            ;170  ; MSC_Machine
00003a  221f              MOVS     r2,#0x1f              ;170
00003c  3930              SUBS     r1,r1,#0x30           ;170
00003e  4648              MOV      r0,r9                 ;170
000040  f7fffffe          BL       USBH_BulkSendData
000044  2001              MOVS     r0,#1                 ;175
000046  7160              STRB     r0,[r4,#5]            ;175
000048  f884a004          STRB     r10,[r4,#4]           ;176
                  |L3.76|
;;;186            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_SENT_CBW; 
;;;187            
;;;188            /* If the CBW Pkt is sent successful, then change the state */
;;;189            xferDirection = (USBH_MSC_CBWData.field.CBWFlags & USB_REQ_DIR_MASK);
;;;190            
;;;191            if ( USBH_MSC_CBWData.field.CBWTransferLength != 0 )
;;;192            {
;;;193              remainingDataLength = USBH_MSC_CBWData.field.CBWTransferLength ;
;;;194              datapointer = USBH_MSC_BOTXferParam.pRxTxBuff;
;;;195              datapointer_prev = datapointer;
;;;196              
;;;197              /* If there is Data Transfer Stage */
;;;198              if (xferDirection == USB_D2H)
;;;199              {
;;;200                /* Data Direction is IN */
;;;201                USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAIN_STATE;
;;;202              }
;;;203              else
;;;204              {
;;;205                /* Data Direction is OUT */
;;;206                USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAOUT_STATE;
;;;207              } 
;;;208            }
;;;209            
;;;210            else
;;;211            {/* If there is NO Data Transfer Stage */
;;;212              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
;;;213            }
;;;214            
;;;215          }   
;;;216          else if(URB_Status == URB_NOTREADY)
;;;217          {
;;;218            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOTXferParam.BOTStateBkp;    
;;;219          }     
;;;220          else if(URB_Status == URB_STALL)
;;;221          {
;;;222            error_direction = USBH_MSC_DIR_OUT;
;;;223            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
;;;224          }
;;;225          break;
;;;226          
;;;227        case USBH_MSC_BOT_DATAIN_STATE:
;;;228          
;;;229          URB_Status =   HCD_GetURB_State(pdev , MSC_Machine.hc_num_in);
;;;230          /* BOT DATA IN stage */
;;;231          if((URB_Status == URB_DONE) ||(USBH_MSC_BOTXferParam.BOTStateBkp != USBH_MSC_BOT_DATAIN_STATE))
;;;232          {
;;;233            BOTStallErrorCount = 0;
;;;234            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAIN_STATE;    
;;;235            
;;;236            if(remainingDataLength > MSC_Machine.MSBulkInEpSize)
;;;237            {
;;;238              USBH_BulkReceiveData (pdev,
;;;239    	                        datapointer, 
;;;240    			        MSC_Machine.MSBulkInEpSize , 
;;;241    			        MSC_Machine.hc_num_in);
;;;242              
;;;243              remainingDataLength -= MSC_Machine.MSBulkInEpSize;
;;;244              datapointer = datapointer + MSC_Machine.MSBulkInEpSize;
;;;245            }
;;;246            else if ( remainingDataLength == 0)
;;;247            {
;;;248              /* If value was 0, and successful transfer, then change the state */
;;;249              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
;;;250            }
;;;251            else
;;;252            {       
;;;253              USBH_BulkReceiveData (pdev,
;;;254    	                        datapointer, 
;;;255    			        remainingDataLength , 
;;;256    			        MSC_Machine.hc_num_in);
;;;257              
;;;258              remainingDataLength = 0; /* Reset this value and keep in same state */
;;;259            }
;;;260          }
;;;261          else if(URB_Status == URB_STALL)
;;;262          {
;;;263            /* This is Data Stage STALL Condition */
;;;264            
;;;265            error_direction = USBH_MSC_DIR_IN;
;;;266            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
;;;267            
;;;268            /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;269            6.7.2 Host expects to receive data from the device
;;;270            3. On a STALL condition receiving data, then:
;;;271            The host shall accept the data received.
;;;272            The host shall clear the Bulk-In pipe.
;;;273            4. The host shall attempt to receive a CSW.
;;;274            
;;;275            USBH_MSC_BOTXferParam.BOTStateBkp is used to switch to the Original 
;;;276            state after the ClearFeature Command is issued.
;;;277            */
;;;278            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;279            
;;;280          }     
;;;281          break;   
;;;282          
;;;283          
;;;284        case USBH_MSC_BOT_DATAOUT_STATE:
;;;285          /* BOT DATA OUT stage */
;;;286          URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_out);       
;;;287          if(URB_Status == URB_DONE)
;;;288          {
;;;289            BOTStallErrorCount = 0;
;;;290            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAOUT_STATE;    
;;;291            if(remainingDataLength > MSC_Machine.MSBulkOutEpSize)
;;;292            {
;;;293              USBH_BulkSendData (pdev,
;;;294                                 datapointer, 
;;;295                                 MSC_Machine.MSBulkOutEpSize , 
;;;296                                 MSC_Machine.hc_num_out);
;;;297              datapointer_prev = datapointer;
;;;298              datapointer = datapointer + MSC_Machine.MSBulkOutEpSize;
;;;299              
;;;300              remainingDataLength = remainingDataLength - MSC_Machine.MSBulkOutEpSize;
;;;301            }
;;;302            else if ( remainingDataLength == 0)
;;;303            {
;;;304              /* If value was 0, and successful transfer, then change the state */
;;;305              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
;;;306            }
;;;307            else
;;;308            {
;;;309              USBH_BulkSendData (pdev,
;;;310    	                     datapointer, 
;;;311    			     remainingDataLength , 
;;;312    			     MSC_Machine.hc_num_out);
;;;313              
;;;314              remainingDataLength = 0; /* Reset this value and keep in same state */   
;;;315            }      
;;;316          }
;;;317          
;;;318          else if(URB_Status == URB_NOTREADY)
;;;319          {
;;;320            if(datapointer != datapointer_prev)
;;;321            {
;;;322              USBH_BulkSendData (pdev,
;;;323                                 (datapointer - MSC_Machine.MSBulkOutEpSize), 
;;;324                                 MSC_Machine.MSBulkOutEpSize , 
;;;325                                 MSC_Machine.hc_num_out);
;;;326            }
;;;327            else
;;;328            {
;;;329              USBH_BulkSendData (pdev,
;;;330                                 datapointer,
;;;331                                 MSC_Machine.MSBulkOutEpSize , 
;;;332                                 MSC_Machine.hc_num_out);
;;;333            }
;;;334          }
;;;335          
;;;336          else if(URB_Status == URB_STALL)
;;;337          {
;;;338            error_direction = USBH_MSC_DIR_OUT;
;;;339            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
;;;340            
;;;341            /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;342            6.7.3 Ho - Host expects to send data to the device
;;;343            3. On a STALL condition sending data, then:
;;;344            " The host shall clear the Bulk-Out pipe.
;;;345            4. The host shall attempt to receive a CSW.
;;;346            
;;;347            The Above statement will do the clear the Bulk-Out pipe.
;;;348            The Below statement will help in Getting the CSW.  
;;;349            
;;;350            USBH_MSC_BOTXferParam.BOTStateBkp is used to switch to the Original 
;;;351            state after the ClearFeature Command is issued.
;;;352            */
;;;353            
;;;354            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;355            
;;;356          }
;;;357          break;
;;;358          
;;;359        case USBH_MSC_RECEIVE_CSW_STATE:
;;;360          /* BOT CSW stage */     
;;;361            /* NOTE: We cannot reset the BOTStallErrorCount here as it may come from 
;;;362            the clearFeature from previous command */
;;;363            
;;;364            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;365            
;;;366            USBH_MSC_BOTXferParam.pRxTxBuff = USBH_MSC_CSWData.CSWArray;
;;;367            USBH_MSC_BOTXferParam.DataLength = USBH_MSC_CSW_MAX_LENGTH;
;;;368            
;;;369            for(index = USBH_MSC_CSW_LENGTH; index != 0; index--)
;;;370            {
;;;371              USBH_MSC_CSWData.CSWArray[index] = 0;
;;;372            }
;;;373            
;;;374            USBH_MSC_CSWData.CSWArray[0] = 0;
;;;375            
;;;376            USBH_BulkReceiveData (pdev,
;;;377                                  USBH_MSC_BOTXferParam.pRxTxBuff, 
;;;378                                  USBH_MSC_CSW_MAX_LENGTH , 
;;;379                                  MSC_Machine.hc_num_in);
;;;380            USBH_MSC_BOTXferParam.BOTState = USBH_MSC_DECODE_CSW;    
;;;381    
;;;382          break;
;;;383          
;;;384        case USBH_MSC_DECODE_CSW:
;;;385          URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_in);
;;;386          /* Decode CSW */
;;;387          if(URB_Status == URB_DONE)
;;;388          {
;;;389            BOTStallErrorCount = 0;
;;;390            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;391            
;;;392            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateCurrent ;
;;;393            
;;;394            USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_DecodeCSW(pdev , phost);
;;;395          }
;;;396          else if(URB_Status == URB_STALL)     
;;;397          {
;;;398            error_direction = USBH_MSC_DIR_IN;
;;;399            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
;;;400          }
;;;401          break;
;;;402          
;;;403        case USBH_MSC_BOT_ERROR_IN: 
;;;404          status = USBH_MSC_BOT_Abort(pdev, phost, USBH_MSC_DIR_IN);
;;;405          if (status == USBH_OK)
;;;406          {
;;;407            /* Check if the error was due in Both the directions */
;;;408            if (error_direction == USBH_MSC_BOTH_DIR)
;;;409            {/* If Both directions are Needed, Switch to OUT Direction */
;;;410              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_ERROR_OUT;
;;;411            }
;;;412            else
;;;413            {
;;;414              /* Switch Back to the Original State, In many cases this will be 
;;;415              USBH_MSC_RECEIVE_CSW_STATE state */
;;;416              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;
;;;417            }
;;;418          }
;;;419          else if (status == USBH_UNRECOVERED_ERROR)
;;;420          {
;;;421            /* This means that there is a STALL Error limit, Do Reset Recovery */
;;;422            USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
;;;423          }
;;;424          break;
;;;425          
;;;426        case USBH_MSC_BOT_ERROR_OUT: 
;;;427          status = USBH_MSC_BOT_Abort(pdev, phost, USBH_MSC_DIR_OUT);
;;;428          if ( status == USBH_OK)
;;;429          { /* Switch Back to the Original State */
;;;430            USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;        
;;;431          }
;;;432          else if (status == USBH_UNRECOVERED_ERROR)
;;;433          {
;;;434            /* This means that there is a STALL Error limit, Do Reset Recovery */
;;;435            USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
;;;436          }
;;;437          break;
;;;438          
;;;439        default:      
;;;440          break;
;;;441        }
;;;442      }
;;;443    }
00004c  e8bd9ff0          POP      {r4-r12,pc}
000050  7851              LDRB     r1,[r2,#1]            ;181  ; MSC_Machine
000052  4648              MOV      r0,r9                 ;181
000054  f7fffffe          BL       HCD_GetURB_State
000058  2801              CMP      r0,#1                 ;183
00005a  d006              BEQ      |L3.106|
00005c  2802              CMP      r0,#2                 ;216
00005e  d019              BEQ      |L3.148|
000060  2804              CMP      r0,#4                 ;220
000062  d1f3              BNE      |L3.76|
000064  2001              MOVS     r0,#1                 ;222
000066  7028              STRB     r0,[r5,#0]            ;222
000068  e0bf              B        |L3.490|
                  |L3.106|
00006a  4868              LDR      r0,|L3.524|
00006c  612e              STR      r6,[r5,#0x10]         ;186  ; BOTStallErrorCount
00006e  3830              SUBS     r0,r0,#0x30           ;189
000070  f884a005          STRB     r10,[r4,#5]           ;186
000074  7b01              LDRB     r1,[r0,#0xc]          ;189  ; USBH_MSC_CBWData
000076  6880              LDR      r0,[r0,#8]            ;191  ; USBH_MSC_CBWData
000078  f0010180          AND      r1,r1,#0x80           ;189
00007c  2800              CMP      r0,#0                 ;191
00007e  d06f              BEQ      |L3.352|
000080  6068              STR      r0,[r5,#4]            ;194  ; remainingDataLength
000082  68a0              LDR      r0,[r4,#8]            ;194  ; USBH_MSC_BOTXferParam
000084  60a8              STR      r0,[r5,#8]            ;195  ; datapointer
000086  60e8              STR      r0,[r5,#0xc]          ;198  ; datapointer_prev
000088  2980              CMP      r1,#0x80              ;198
00008a  d001              BEQ      |L3.144|
00008c  2004              MOVS     r0,#4                 ;206
00008e  e096              B        |L3.446|
                  |L3.144|
000090  2003              MOVS     r0,#3                 ;201
000092  e094              B        |L3.446|
                  |L3.148|
000094  7960              LDRB     r0,[r4,#5]            ;218  ; USBH_MSC_BOTXferParam
000096  e092              B        |L3.446|
000098  4690              MOV      r8,r2                 ;229
00009a  7811              LDRB     r1,[r2,#0]            ;229  ; MSC_Machine
00009c  4648              MOV      r0,r9                 ;229
00009e  f7fffffe          BL       HCD_GetURB_State
0000a2  2801              CMP      r0,#1                 ;231
0000a4  d002              BEQ      |L3.172|
0000a6  7961              LDRB     r1,[r4,#5]            ;231  ; USBH_MSC_BOTXferParam
0000a8  2903              CMP      r1,#3                 ;231
0000aa  d01f              BEQ      |L3.236|
                  |L3.172|
0000ac  2003              MOVS     r0,#3                 ;234
0000ae  612e              STR      r6,[r5,#0x10]         ;234  ; BOTStallErrorCount
0000b0  7160              STRB     r0,[r4,#5]            ;234
0000b2  f8b82004          LDRH     r2,[r8,#4]            ;236  ; MSC_Machine
0000b6  6869              LDR      r1,[r5,#4]            ;236  ; remainingDataLength
0000b8  428a              CMP      r2,r1                 ;236
0000ba  d20e              BCS      |L3.218|
0000bc  f8983000          LDRB     r3,[r8,#0]            ;238  ; MSC_Machine
0000c0  4648              MOV      r0,r9                 ;238
0000c2  68a9              LDR      r1,[r5,#8]            ;238  ; datapointer
0000c4  f7fffffe          BL       USBH_BulkReceiveData
0000c8  f8b80004          LDRH     r0,[r8,#4]            ;243  ; MSC_Machine
0000cc  6869              LDR      r1,[r5,#4]            ;243  ; remainingDataLength
0000ce  1a09              SUBS     r1,r1,r0              ;243
0000d0  6069              STR      r1,[r5,#4]            ;244  ; remainingDataLength
0000d2  68a9              LDR      r1,[r5,#8]            ;244  ; datapointer
0000d4  4408              ADD      r0,r0,r1              ;244
0000d6  60a8              STR      r0,[r5,#8]            ;244  ; datapointer
                  |L3.216|
0000d8  e7b8              B        |L3.76|
                  |L3.218|
0000da  b3b1              CBZ      r1,|L3.330|
0000dc  b28a              UXTH     r2,r1                 ;253
0000de  f8983000          LDRB     r3,[r8,#0]            ;253  ; MSC_Machine
0000e2  4648              MOV      r0,r9                 ;253
0000e4  68a9              LDR      r1,[r5,#8]            ;253  ; datapointer
0000e6  f7fffffe          BL       USBH_BulkReceiveData
0000ea  e037              B        |L3.348|
                  |L3.236|
0000ec  2804              CMP      r0,#4                 ;261
0000ee  d1ad              BNE      |L3.76|
0000f0  702e              STRB     r6,[r5,#0]            ;265
0000f2  2007              MOVS     r0,#7                 ;266
0000f4  7120              STRB     r0,[r4,#4]            ;266
0000f6  e00e              B        |L3.278|
0000f8  4690              MOV      r8,r2                 ;286
0000fa  7851              LDRB     r1,[r2,#1]            ;286  ; MSC_Machine
0000fc  4648              MOV      r0,r9                 ;286
0000fe  f7fffffe          BL       HCD_GetURB_State
000102  2801              CMP      r0,#1                 ;287
000104  d009              BEQ      |L3.282|
000106  2802              CMP      r0,#2                 ;318
000108  d02c              BEQ      |L3.356|
00010a  2804              CMP      r0,#4                 ;336
00010c  d19e              BNE      |L3.76|
00010e  2001              MOVS     r0,#1                 ;338
000110  7028              STRB     r0,[r5,#0]            ;338
000112  f884b004          STRB     r11,[r4,#4]           ;339
                  |L3.278|
000116  7167              STRB     r7,[r4,#5]            ;354
                  |L3.280|
000118  e798              B        |L3.76|
                  |L3.282|
00011a  2004              MOVS     r0,#4                 ;290
00011c  612e              STR      r6,[r5,#0x10]         ;290  ; BOTStallErrorCount
00011e  7160              STRB     r0,[r4,#5]            ;290
000120  f8b82006          LDRH     r2,[r8,#6]            ;291  ; MSC_Machine
000124  6869              LDR      r1,[r5,#4]            ;291  ; remainingDataLength
000126  428a              CMP      r2,r1                 ;291
000128  d210              BCS      |L3.332|
00012a  f8983001          LDRB     r3,[r8,#1]            ;293  ; MSC_Machine
00012e  4648              MOV      r0,r9                 ;293
000130  68a9              LDR      r1,[r5,#8]            ;293  ; datapointer
000132  f7fffffe          BL       USBH_BulkSendData
000136  68a8              LDR      r0,[r5,#8]            ;297  ; datapointer
000138  60e8              STR      r0,[r5,#0xc]          ;298  ; datapointer_prev
00013a  f8b81006          LDRH     r1,[r8,#6]            ;298  ; MSC_Machine
00013e  4408              ADD      r0,r0,r1              ;298
000140  60a8              STR      r0,[r5,#8]            ;300  ; datapointer
000142  6868              LDR      r0,[r5,#4]            ;300  ; remainingDataLength
000144  1a40              SUBS     r0,r0,r1              ;300
000146  6068              STR      r0,[r5,#4]            ;300  ; remainingDataLength
000148  e780              B        |L3.76|
                  |L3.330|
00014a  e009              B        |L3.352|
                  |L3.332|
00014c  b141              CBZ      r1,|L3.352|
00014e  b28a              UXTH     r2,r1                 ;309
000150  f8983001          LDRB     r3,[r8,#1]            ;309  ; MSC_Machine
000154  4648              MOV      r0,r9                 ;309
000156  68a9              LDR      r1,[r5,#8]            ;309  ; datapointer
000158  f7fffffe          BL       USBH_BulkSendData
                  |L3.348|
00015c  606e              STR      r6,[r5,#4]            ;314  ; remainingDataLength
00015e  e775              B        |L3.76|
                  |L3.352|
000160  7127              STRB     r7,[r4,#4]            ;305
000162  e773              B        |L3.76|
                  |L3.356|
000164  e9d51002          LDRD     r1,r0,[r5,#8]
000168  f8983001          LDRB     r3,[r8,#1]            ;329  ; MSC_Machine
00016c  f8b82006          LDRH     r2,[r8,#6]            ;329  ; MSC_Machine
000170  4281              CMP      r1,r0                 ;320
000172  d000              BEQ      |L3.374|
000174  1a89              SUBS     r1,r1,r2              ;322
                  |L3.374|
000176  4648              MOV      r0,r9                 ;329
000178  e8bd5ff0          POP      {r4-r12,lr}           ;329
00017c  f7ffbffe          B.W      USBH_BulkSendData
000180  4922              LDR      r1,|L3.524|
000182  7167              STRB     r7,[r4,#5]            ;364
000184  3910              SUBS     r1,r1,#0x10           ;366
000186  203f              MOVS     r0,#0x3f              ;367
000188  60a1              STR      r1,[r4,#8]            ;367  ; USBH_MSC_BOTXferParam
00018a  81a0              STRH     r0,[r4,#0xc]          ;367
00018c  230d              MOVS     r3,#0xd               ;369
00018e  460d              MOV      r5,r1                 ;366
                  |L3.400|
000190  54ee              STRB     r6,[r5,r3]            ;371
000192  1e5b              SUBS     r3,r3,#1              ;369
000194  f01303ff          ANDS     r3,r3,#0xff           ;369
000198  d1fa              BNE      |L3.400|
00019a  702e              STRB     r6,[r5,#0]            ;374
00019c  7813              LDRB     r3,[r2,#0]            ;376  ; MSC_Machine
00019e  223f              MOVS     r2,#0x3f              ;376
0001a0  4648              MOV      r0,r9                 ;376
0001a2  f7fffffe          BL       USBH_BulkReceiveData
0001a6  2006              MOVS     r0,#6                 ;380
0001a8  e009              B        |L3.446|
0001aa  7811              LDRB     r1,[r2,#0]            ;385  ; MSC_Machine
0001ac  4648              MOV      r0,r9                 ;385
0001ae  f7fffffe          BL       HCD_GetURB_State
0001b2  2801              CMP      r0,#1                 ;387
0001b4  d005              BEQ      |L3.450|
0001b6  2804              CMP      r0,#4                 ;396
0001b8  d18e              BNE      |L3.216|
0001ba  702e              STRB     r6,[r5,#0]            ;398
0001bc  2007              MOVS     r0,#7                 ;399
                  |L3.446|
0001be  7120              STRB     r0,[r4,#4]            ;430
0001c0  e744              B        |L3.76|
                  |L3.450|
0001c2  612e              STR      r6,[r5,#0x10]         ;390  ; BOTStallErrorCount
0001c4  7167              STRB     r7,[r4,#5]            ;390
0001c6  78a0              LDRB     r0,[r4,#2]            ;392  ; USBH_MSC_BOTXferParam
0001c8  7020              STRB     r0,[r4,#0]            ;392
0001ca  4641              MOV      r1,r8                 ;394
0001cc  4648              MOV      r0,r9                 ;394
0001ce  f7fffffe          BL       USBH_MSC_DecodeCSW
0001d2  73e0              STRB     r0,[r4,#0xf]          ;394
0001d4  e73a              B        |L3.76|
0001d6  2200              MOVS     r2,#0                 ;404
0001d8  4641              MOV      r1,r8                 ;404
0001da  4648              MOV      r0,r9                 ;404
0001dc  f7fffffe          BL       USBH_MSC_BOT_Abort
0001e0  b970              CBNZ     r0,|L3.512|
0001e2  7828              LDRB     r0,[r5,#0]            ;408  ; error_direction
0001e4  2802              CMP      r0,#2                 ;408
0001e6  f47faf55          BNE      |L3.148|
                  |L3.490|
0001ea  f884b004          STRB     r11,[r4,#4]           ;410
0001ee  e72d              B        |L3.76|
0001f0  2201              MOVS     r2,#1                 ;427
0001f2  4641              MOV      r1,r8                 ;427
0001f4  4648              MOV      r0,r9                 ;427
0001f6  f7fffffe          BL       USBH_MSC_BOT_Abort
0001fa  2800              CMP      r0,#0                 ;428
0001fc  f43faf4a          BEQ      |L3.148|
                  |L3.512|
000200  2804              CMP      r0,#4                 ;432
000202  d189              BNE      |L3.280|
000204  f884a00f          STRB     r10,[r4,#0xf]         ;435
000208  e720              B        |L3.76|
;;;444    
                          ENDP

00020a  0000              DCW      0x0000
                  |L3.524|
                          DCD      ||.bss||+0x30
                  |L3.528|
                          DCD      MSC_Machine
                  |L3.532|
                          DCD      ||.data||

                          AREA ||i.USBH_MSC_Init||, CODE, READONLY, ALIGN=2

                  USBH_MSC_Init PROC
;;;130    */
;;;131    void USBH_MSC_Init(USB_OTG_CORE_HANDLE *pdev )
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133      if(HCD_IsDeviceConnected(pdev))
000002  f7fffffe          BL       HCD_IsDeviceConnected
;;;134      {      
;;;135        USBH_MSC_CBWData.field.CBWSignature = USBH_MSC_BOT_CBW_SIGNATURE;
;;;136        USBH_MSC_CBWData.field.CBWTag = USBH_MSC_BOT_CBW_TAG;
;;;137        USBH_MSC_CBWData.field.CBWLUN = 0;  /*Only one LUN is supported*/
000006  2100              MOVS     r1,#0
000008  b148              CBZ      r0,|L4.30|
00000a  4808              LDR      r0,|L4.44|
00000c  4a06              LDR      r2,|L4.40|
00000e  6002              STR      r2,[r0,#0]            ;136  ; USBH_MSC_CBWData
000010  4a07              LDR      r2,|L4.48|
000012  6042              STR      r2,[r0,#4]  ; USBH_MSC_CBWData
000014  7341              STRB     r1,[r0,#0xd]
;;;138        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;  
000016  4a05              LDR      r2,|L4.44|
000018  2001              MOVS     r0,#1
00001a  3230              ADDS     r2,r2,#0x30
00001c  70d0              STRB     r0,[r2,#3]
                  |L4.30|
;;;139      }
;;;140      
;;;141      BOTStallErrorCount = 0;
00001e  4805              LDR      r0,|L4.52|
;;;142      MSCErrorCount = 0;
000020  6101              STR      r1,[r0,#0x10]  ; BOTStallErrorCount
000022  4805              LDR      r0,|L4.56|
000024  7001              STRB     r1,[r0,#0]
;;;143    }
000026  bd10              POP      {r4,pc}
;;;144    
                          ENDP

                  |L4.40|
                          DCD      0x43425355
                  |L4.44|
                          DCD      ||.bss||
                  |L4.48|
                          DCD      0x20304050
                  |L4.52|
                          DCD      ||.data||
                  |L4.56|
                          DCD      MSCErrorCount

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  USBH_MSC_CBWData
                          %        32
                  USBH_MSC_CSWData
                          %        16
                  USBH_MSC_BOTXferParam
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  error_direction
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  remainingDataLength
                          DCD      0x00000000
                  datapointer
                          DCD      0x00000000
                  datapointer_prev
                          DCD      0x00000000
                  BOTStallErrorCount
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\USB\\STM32_USB_HOST_Library\\Class\\MSC\\src\\usbh_msc_bot.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_usbh_msc_bot_c_2abeb359____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_usbh_msc_bot_c_2abeb359____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_usbh_msc_bot_c_2abeb359____REVSH|
#line 128
|__asm___14_usbh_msc_bot_c_2abeb359____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
