; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\stm32f4xx_cryp_tdes.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\stm32f4xx_cryp_tdes.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\stm32f4xx_cryp_tdes.crf ..\Libraries\FWlib\src\stm32f4xx_cryp_tdes.c]
                          THUMB

                          AREA ||i.CRYP_TDES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_CBC PROC
;;;207      */
;;;208    ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;209                              uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;210    {
000004  b091              SUB      sp,sp,#0x44
000006  4683              MOV      r11,r0
000008  e9dda61a          LDRD     r10,r6,[sp,#0x68]
;;;211      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;212      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;213      CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
;;;214      __IO uint32_t counter = 0;
;;;215      uint32_t busystatus = 0;
;;;216      ErrorStatus status = SUCCESS;
00000c  f04f0801          MOV      r8,#1
;;;217      uint32_t keyaddr    = (uint32_t)Key;
000010  460c              MOV      r4,r1
;;;218      uint32_t inputaddr  = (uint32_t)Input;
000012  461d              MOV      r5,r3
;;;219      uint32_t outputaddr = (uint32_t)Output;
;;;220      uint32_t ivaddr     = (uint32_t)InitVectors;
000014  4691              MOV      r9,r2
;;;221      uint32_t i = 0;
000016  2700              MOVS     r7,#0
;;;222    
;;;223      /* Crypto structures initialisation*/
;;;224      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       CRYP_KeyStructInit
;;;225    
;;;226      /* Crypto Init for Encryption process */
;;;227      if(Mode == MODE_ENCRYPT) /* TDES encryption */
00001e  f1bb0f01          CMP      r11,#1
000022  d032              BEQ      |L1.138|
;;;228      {
;;;229        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;230      }
;;;231      else
;;;232      {
;;;233        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000024  2004              MOVS     r0,#4
                  |L1.38|
;;;234      }
;;;235      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
000026  9008              STR      r0,[sp,#0x20]
000028  2008              MOVS     r0,#8
;;;236      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00002a  9009              STR      r0,[sp,#0x24]
00002c  2080              MOVS     r0,#0x80
;;;237    
;;;238      CRYP_Init(&TDES_CRYP_InitStructure);
00002e  900a              STR      r0,[sp,#0x28]
000030  a808              ADD      r0,sp,#0x20
000032  f7fffffe          BL       CRYP_Init
;;;239    
;;;240      /* Key Initialisation */
;;;241      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000036  6820              LDR      r0,[r4,#0]
000038  ba00              REV      r0,r0
;;;242      keyaddr+=4;
;;;243      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00003a  9002              STR      r0,[sp,#8]
00003c  6860              LDR      r0,[r4,#4]
00003e  ba00              REV      r0,r0
;;;244      keyaddr+=4;
;;;245      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000040  9003              STR      r0,[sp,#0xc]
000042  68a0              LDR      r0,[r4,#8]
000044  ba00              REV      r0,r0
;;;246      keyaddr+=4;
;;;247      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000046  9004              STR      r0,[sp,#0x10]
000048  68e0              LDR      r0,[r4,#0xc]
00004a  ba00              REV      r0,r0
;;;248      keyaddr+=4;
;;;249      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00004c  9005              STR      r0,[sp,#0x14]
00004e  6920              LDR      r0,[r4,#0x10]
000050  ba00              REV      r0,r0
;;;250      keyaddr+=4;
;;;251      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000052  9006              STR      r0,[sp,#0x18]
000054  6960              LDR      r0,[r4,#0x14]
000056  ba00              REV      r0,r0
;;;252      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
000058  9007              STR      r0,[sp,#0x1c]
00005a  4668              MOV      r0,sp
00005c  f7fffffe          BL       CRYP_KeyInit
;;;253    
;;;254      /* Initialization Vectors */
;;;255      TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000060  f8d90000          LDR      r0,[r9,#0]
000064  ba00              REV      r0,r0
;;;256      ivaddr+=4;
;;;257      TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
000066  900c              STR      r0,[sp,#0x30]
000068  f8d90004          LDR      r0,[r9,#4]
00006c  ba00              REV      r0,r0
;;;258      CRYP_IVInit(&TDES_CRYP_IVInitStructure);
00006e  900d              STR      r0,[sp,#0x34]
000070  a80c              ADD      r0,sp,#0x30
000072  f7fffffe          BL       CRYP_IVInit
;;;259    
;;;260      /* Flush IN/OUT FIFO */
;;;261      CRYP_FIFOFlush();
000076  f7fffffe          BL       CRYP_FIFOFlush
;;;262    
;;;263      /* Enable Crypto processor */
;;;264      CRYP_Cmd(ENABLE);
00007a  2001              MOVS     r0,#1
00007c  f7fffffe          BL       CRYP_Cmd
;;;265    
;;;266      if(CRYP_GetCmdStatus() == DISABLE)
000080  f7fffffe          BL       CRYP_GetCmdStatus
000084  2800              CMP      r0,#0
000086  d02b              BEQ      |L1.224|
000088  e021              B        |L1.206|
                  |L1.138|
00008a  2000              MOVS     r0,#0                 ;229
00008c  e7cb              B        |L1.38|
                  |L1.142|
;;;267      {
;;;268        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;269           the CRYP peripheral (please check the device sales type. */
;;;270        return(ERROR);
;;;271      }
;;;272      
;;;273      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;274      {
;;;275        /* Write the Input block in the Input FIFO */
;;;276        CRYP_DataIn(*(uint32_t*)(inputaddr));
00008e  6828              LDR      r0,[r5,#0]
000090  f7fffffe          BL       CRYP_DataIn
;;;277        inputaddr+=4;
;;;278        CRYP_DataIn(*(uint32_t*)(inputaddr));
000094  f8550f04          LDR      r0,[r5,#4]!
000098  f7fffffe          BL       CRYP_DataIn
;;;279        inputaddr+=4;
00009c  1d2d              ADDS     r5,r5,#4
;;;280    
;;;281        /* Wait until the complete message has been processed */
;;;282        counter = 0;
00009e  2400              MOVS     r4,#0
;;;283        do
;;;284        {
;;;285          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;286          counter++;
;;;287        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
0000a0  f44f3980          MOV      r9,#0x10000
                  |L1.164|
0000a4  2010              MOVS     r0,#0x10              ;285
0000a6  f7fffffe          BL       CRYP_GetFlagStatus
0000aa  1c64              ADDS     r4,r4,#1              ;286
0000ac  454c              CMP      r4,r9
0000ae  d002              BEQ      |L1.182|
0000b0  2800              CMP      r0,#0
0000b2  d1f7              BNE      |L1.164|
0000b4  e003              B        |L1.190|
                  |L1.182|
;;;288    
;;;289        if (busystatus != RESET)
0000b6  b110              CBZ      r0,|L1.190|
;;;290       {
;;;291           status = ERROR;
0000b8  f04f0800          MOV      r8,#0
0000bc  e006              B        |L1.204|
                  |L1.190|
;;;292        }
;;;293        else
;;;294        {
;;;295    
;;;296          /* Read the Output block from the Output FIFO */
;;;297          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000be  f7fffffe          BL       CRYP_DataOut
;;;298          outputaddr+=4;
;;;299          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000c2  6030              STR      r0,[r6,#0]
0000c4  f7fffffe          BL       CRYP_DataOut
0000c8  6070              STR      r0,[r6,#4]
0000ca  3608              ADDS     r6,r6,#8
                  |L1.204|
0000cc  3708              ADDS     r7,r7,#8              ;273
                  |L1.206|
0000ce  4557              CMP      r7,r10                ;273
0000d0  d202              BCS      |L1.216|
0000d2  f1b80f00          CMP      r8,#0                 ;273
0000d6  d1da              BNE      |L1.142|
                  |L1.216|
;;;300          outputaddr+=4;
;;;301        }
;;;302      }
;;;303    
;;;304      /* Disable Crypto */
;;;305      CRYP_Cmd(DISABLE);
0000d8  2000              MOVS     r0,#0
0000da  f7fffffe          BL       CRYP_Cmd
;;;306    
;;;307      return status; 
0000de  4640              MOV      r0,r8
                  |L1.224|
;;;308    }
0000e0  b011              ADD      sp,sp,#0x44
0000e2  e8bd8ff0          POP      {r4-r11,pc}
;;;309    /**
                          ENDP


                          AREA ||i.CRYP_TDES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_ECB PROC
;;;99       */
;;;100    ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;101                              uint32_t Ilength, uint8_t *Output)
;;;102    {
000004  b08c              SUB      sp,sp,#0x30
000006  4682              MOV      r10,r0
000008  460c              MOV      r4,r1
00000a  4699              MOV      r9,r3
;;;103      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;104      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;105      __IO uint32_t counter = 0;
;;;106      uint32_t busystatus = 0;
;;;107      ErrorStatus status = SUCCESS;
00000c  f04f0801          MOV      r8,#1
;;;108      uint32_t keyaddr    = (uint32_t)Key;
;;;109      uint32_t inputaddr  = (uint32_t)Input;
000010  4615              MOV      r5,r2
;;;110      uint32_t outputaddr = (uint32_t)Output;
;;;111      uint32_t i = 0;
000012  2700              MOVS     r7,#0
;;;112    
;;;113      /* Crypto structures initialisation*/
;;;114      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000014  4668              MOV      r0,sp
000016  9e14              LDR      r6,[sp,#0x50]
000018  f7fffffe          BL       CRYP_KeyStructInit
00001c  2000              MOVS     r0,#0                 ;105
;;;115    
;;;116      /* Crypto Init for Encryption process */
;;;117      if(Mode == MODE_ENCRYPT) /* TDES encryption */
00001e  f1ba0f01          CMP      r10,#1
000022  d026              BEQ      |L2.114|
;;;118      {
;;;119         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
;;;120      }
;;;121      else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
;;;122      {
;;;123         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000024  2104              MOVS     r1,#4
000026  9108              STR      r1,[sp,#0x20]
                  |L2.40|
;;;124      }
;;;125    
;;;126      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
;;;127      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000028  9009              STR      r0,[sp,#0x24]
00002a  2080              MOVS     r0,#0x80
;;;128      CRYP_Init(&TDES_CRYP_InitStructure);
00002c  900a              STR      r0,[sp,#0x28]
00002e  a808              ADD      r0,sp,#0x20
000030  f7fffffe          BL       CRYP_Init
;;;129    
;;;130      /* Key Initialisation */
;;;131      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000034  6820              LDR      r0,[r4,#0]
000036  ba00              REV      r0,r0
;;;132      keyaddr+=4;
;;;133      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000038  9002              STR      r0,[sp,#8]
00003a  6860              LDR      r0,[r4,#4]
00003c  ba00              REV      r0,r0
;;;134      keyaddr+=4;
;;;135      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00003e  9003              STR      r0,[sp,#0xc]
000040  68a0              LDR      r0,[r4,#8]
000042  ba00              REV      r0,r0
;;;136      keyaddr+=4;
;;;137      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000044  9004              STR      r0,[sp,#0x10]
000046  68e0              LDR      r0,[r4,#0xc]
000048  ba00              REV      r0,r0
;;;138      keyaddr+=4;
;;;139      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00004a  9005              STR      r0,[sp,#0x14]
00004c  6920              LDR      r0,[r4,#0x10]
00004e  ba00              REV      r0,r0
;;;140      keyaddr+=4;
;;;141      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000050  9006              STR      r0,[sp,#0x18]
000052  6960              LDR      r0,[r4,#0x14]
000054  ba00              REV      r0,r0
;;;142      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
000056  9007              STR      r0,[sp,#0x1c]
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       CRYP_KeyInit
;;;143    
;;;144      /* Flush IN/OUT FIFO */
;;;145      CRYP_FIFOFlush();
00005e  f7fffffe          BL       CRYP_FIFOFlush
;;;146    
;;;147      /* Enable Crypto processor */
;;;148      CRYP_Cmd(ENABLE);
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       CRYP_Cmd
;;;149    
;;;150      if(CRYP_GetCmdStatus() == DISABLE)
000068  f7fffffe          BL       CRYP_GetCmdStatus
00006c  2800              CMP      r0,#0
00006e  d02b              BEQ      |L2.200|
000070  e021              B        |L2.182|
                  |L2.114|
000072  9008              STR      r0,[sp,#0x20]         ;119
000074  e7d8              B        |L2.40|
                  |L2.118|
;;;151      {
;;;152        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
;;;153           the CRYP peripheral (please check the device sales type. */
;;;154        return(ERROR);
;;;155      }
;;;156      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
;;;157      {
;;;158        /* Write the Input block in the Input FIFO */
;;;159        CRYP_DataIn(*(uint32_t*)(inputaddr));
000076  6828              LDR      r0,[r5,#0]
000078  f7fffffe          BL       CRYP_DataIn
;;;160        inputaddr+=4;
;;;161        CRYP_DataIn(*(uint32_t*)(inputaddr));
00007c  f8550f04          LDR      r0,[r5,#4]!
000080  f7fffffe          BL       CRYP_DataIn
;;;162        inputaddr+=4;
000084  1d2d              ADDS     r5,r5,#4
;;;163    
;;;164        /* Wait until the complete message has been processed */
;;;165        counter = 0;
000086  2400              MOVS     r4,#0
;;;166        do
;;;167        {
;;;168          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
;;;169          counter++;
;;;170        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
000088  f44f3a80          MOV      r10,#0x10000
                  |L2.140|
00008c  2010              MOVS     r0,#0x10              ;168
00008e  f7fffffe          BL       CRYP_GetFlagStatus
000092  1c64              ADDS     r4,r4,#1              ;169
000094  4554              CMP      r4,r10
000096  d002              BEQ      |L2.158|
000098  2800              CMP      r0,#0
00009a  d1f7              BNE      |L2.140|
00009c  e003              B        |L2.166|
                  |L2.158|
;;;171    
;;;172        if (busystatus != RESET)
00009e  b110              CBZ      r0,|L2.166|
;;;173        {
;;;174           status = ERROR;
0000a0  f04f0800          MOV      r8,#0
0000a4  e006              B        |L2.180|
                  |L2.166|
;;;175        }
;;;176        else
;;;177        {
;;;178    
;;;179          /* Read the Output block from the Output FIFO */
;;;180          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000a6  f7fffffe          BL       CRYP_DataOut
;;;181          outputaddr+=4;
;;;182          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000aa  6030              STR      r0,[r6,#0]
0000ac  f7fffffe          BL       CRYP_DataOut
0000b0  6070              STR      r0,[r6,#4]
0000b2  3608              ADDS     r6,r6,#8
                  |L2.180|
0000b4  3708              ADDS     r7,r7,#8              ;156
                  |L2.182|
0000b6  454f              CMP      r7,r9                 ;156
0000b8  d202              BCS      |L2.192|
0000ba  f1b80f00          CMP      r8,#0                 ;156
0000be  d1da              BNE      |L2.118|
                  |L2.192|
;;;183          outputaddr+=4;
;;;184        }
;;;185      }
;;;186    
;;;187      /* Disable Crypto */
;;;188      CRYP_Cmd(DISABLE);
0000c0  2000              MOVS     r0,#0
0000c2  f7fffffe          BL       CRYP_Cmd
;;;189    
;;;190      return status; 
0000c6  4640              MOV      r0,r8
                  |L2.200|
;;;191    }
0000c8  b00c              ADD      sp,sp,#0x30
0000ca  e8bd87f0          POP      {r4-r10,pc}
;;;192    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_cryp_tdes.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH|
#line 128
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
