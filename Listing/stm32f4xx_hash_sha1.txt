; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\stm32f4xx_hash_sha1.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\stm32f4xx_hash_sha1.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\stm32f4xx_hash_sha1.crf ..\Libraries\FWlib\src\stm32f4xx_hash_sha1.c]
                          THUMB

                          AREA ||i.HASH_SHA1||, CODE, READONLY, ALIGN=1

                  HASH_SHA1 PROC
;;;92       */
;;;93     ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;94     {
;;;95       HASH_InitTypeDef SHA1_HASH_InitStructure;
;;;96       HASH_MsgDigest SHA1_MessageDigest;
;;;97       __IO uint16_t nbvalidbitsdata = 0;
;;;98       uint32_t i = 0;
;;;99       __IO uint32_t counter = 0;
;;;100      uint32_t busystatus = 0;
;;;101      ErrorStatus status = SUCCESS;
;;;102      uint32_t inputaddr  = (uint32_t)Input;
000004  4604              MOV      r4,r0
000006  2500              MOVS     r5,#0                 ;98
;;;103      uint32_t outputaddr = (uint32_t)Output;
;;;104    
;;;105      /* Number of valid bits in last word of the Input data */
;;;106      nbvalidbitsdata = 8 * (Ilen % 4);
000008  0788              LSLS     r0,r1,#30
00000a  b08c              SUB      sp,sp,#0x30           ;94
00000c  4688              MOV      r8,r1                 ;94
00000e  4617              MOV      r7,r2                 ;94
000010  462e              MOV      r6,r5                 ;99
000012  f04f0901          MOV      r9,#1                 ;101
000016  ea4f6ad0          LSR      r10,r0,#27
;;;107    
;;;108      /* HASH peripheral initialization */
;;;109      HASH_DeInit();
00001a  f7fffffe          BL       HASH_DeInit
;;;110    
;;;111      /* HASH Configuration */
;;;112      SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
00001e  2000              MOVS     r0,#0
;;;113      SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
000020  9008              STR      r0,[sp,#0x20]
;;;114      SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000022  9009              STR      r0,[sp,#0x24]
000024  2020              MOVS     r0,#0x20
;;;115      HASH_Init(&SHA1_HASH_InitStructure);
000026  900a              STR      r0,[sp,#0x28]
000028  a808              ADD      r0,sp,#0x20
00002a  f7fffffe          BL       HASH_Init
;;;116    
;;;117      /* Configure the number of valid bits in last word of the data */
;;;118      HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
00002e  4650              MOV      r0,r10
000030  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;119    
;;;120      /* Write the Input block in the IN FIFO */
;;;121      for(i=0; i<Ilen; i+=4)
000034  e004              B        |L1.64|
                  |L1.54|
;;;122      {
;;;123        HASH_DataIn(*(uint32_t*)inputaddr);
000036  6820              LDR      r0,[r4,#0]
000038  f7fffffe          BL       HASH_DataIn
;;;124        inputaddr+=4;
00003c  1d24              ADDS     r4,r4,#4
00003e  1d2d              ADDS     r5,r5,#4              ;121
                  |L1.64|
000040  4545              CMP      r5,r8                 ;121
000042  d3f8              BCC      |L1.54|
;;;125      }
;;;126    
;;;127      /* Start the HASH processor */
;;;128      HASH_StartDigest();
000044  f7fffffe          BL       HASH_StartDigest
;;;129    
;;;130      /* wait until the Busy flag is RESET */
;;;131      do
;;;132      {
;;;133        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
;;;134        counter++;
;;;135      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
000048  f44f3480          MOV      r4,#0x10000
                  |L1.76|
00004c  2008              MOVS     r0,#8                 ;133
00004e  f7fffffe          BL       HASH_GetFlagStatus
000052  1c76              ADDS     r6,r6,#1              ;134
000054  42a6              CMP      r6,r4
000056  d002              BEQ      |L1.94|
000058  2800              CMP      r0,#0
00005a  d1f7              BNE      |L1.76|
00005c  e003              B        |L1.102|
                  |L1.94|
;;;136    
;;;137      if (busystatus != RESET)
00005e  b110              CBZ      r0,|L1.102|
;;;138      {
;;;139         status = ERROR;
000060  f04f0900          MOV      r9,#0
000064  e011              B        |L1.138|
                  |L1.102|
;;;140      }
;;;141      else
;;;142      {
;;;143        /* Read the message digest */
;;;144        HASH_GetDigest(&SHA1_MessageDigest);
000066  4668              MOV      r0,sp
000068  f7fffffe          BL       HASH_GetDigest
;;;145        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
00006c  9800              LDR      r0,[sp,#0]
00006e  ba00              REV      r0,r0
;;;146        outputaddr+=4;
;;;147        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
000070  6038              STR      r0,[r7,#0]
000072  9801              LDR      r0,[sp,#4]
000074  ba00              REV      r0,r0
;;;148        outputaddr+=4;
;;;149        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
000076  6078              STR      r0,[r7,#4]
000078  9802              LDR      r0,[sp,#8]
00007a  ba00              REV      r0,r0
;;;150        outputaddr+=4;
;;;151        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
00007c  60b8              STR      r0,[r7,#8]
00007e  9803              LDR      r0,[sp,#0xc]
000080  ba00              REV      r0,r0
;;;152        outputaddr+=4;
;;;153        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
000082  60f8              STR      r0,[r7,#0xc]
000084  9804              LDR      r0,[sp,#0x10]
000086  ba00              REV      r0,r0
000088  6138              STR      r0,[r7,#0x10]
                  |L1.138|
;;;154      }
;;;155      return status;
;;;156    }
00008a  b00c              ADD      sp,sp,#0x30
00008c  4648              MOV      r0,r9                 ;155
00008e  e8bd87f0          POP      {r4-r10,pc}
;;;157    
                          ENDP


                          AREA ||i.HMAC_SHA1||, CODE, READONLY, ALIGN=1

                  HMAC_SHA1 PROC
;;;168      */
;;;169    ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;170                          uint32_t Ilen, uint8_t Output[20])
;;;171    {
000004  b08f              SUB      sp,sp,#0x3c
;;;172      HASH_InitTypeDef SHA1_HASH_InitStructure;
;;;173      HASH_MsgDigest SHA1_MessageDigest;
;;;174      __IO uint16_t nbvalidbitsdata = 0;
;;;175      __IO uint16_t nbvalidbitskey = 0;
;;;176      uint32_t i = 0;
;;;177      __IO uint32_t counter = 0;
;;;178      uint32_t busystatus = 0;
;;;179      ErrorStatus status = SUCCESS;
;;;180      uint32_t keyaddr    = (uint32_t)Key;
;;;181      uint32_t inputaddr  = (uint32_t)Input;
;;;182      uint32_t outputaddr = (uint32_t)Output;
;;;183    
;;;184      /* Number of valid bits in last word of the Input data */
;;;185      nbvalidbitsdata = 8 * (Ilen % 4);
000006  0798              LSLS     r0,r3,#30
000008  4689              MOV      r9,r1                 ;171
00000a  0ec0              LSRS     r0,r0,#27
00000c  f8ddb070          LDR      r11,[sp,#0x70]
;;;186    
;;;187      /* Number of valid bits in last word of the Key */
;;;188      nbvalidbitskey = 8 * (Keylen % 4);
000010  0789              LSLS     r1,r1,#30
000012  900d              STR      r0,[sp,#0x34]
000014  2700              MOVS     r7,#0                 ;176
000016  0ec8              LSRS     r0,r1,#27
000018  461c              MOV      r4,r3                 ;171
00001a  46b8              MOV      r8,r7                 ;177
00001c  f04f0a01          MOV      r10,#1                ;179
000020  4616              MOV      r6,r2                 ;181
000022  9d0f              LDR      r5,[sp,#0x3c]         ;185
;;;189    
;;;190      /* HASH peripheral initialization */
;;;191      HASH_DeInit();
000024  900c              STR      r0,[sp,#0x30]
000026  f7fffffe          BL       HASH_DeInit
;;;192    
;;;193      /* HASH Configuration */
;;;194      SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
00002a  2100              MOVS     r1,#0
;;;195      SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
00002c  2240              MOVS     r2,#0x40
00002e  e9cd1208          STRD     r1,r2,[sp,#0x20]
;;;196      SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000032  2220              MOVS     r2,#0x20
;;;197      if(Keylen > 64)
000034  920a              STR      r2,[sp,#0x28]
000036  f1b90f40          CMP      r9,#0x40
00003a  d900              BLS      |L2.62|
;;;198      {
;;;199        /* HMAC long Key */
;;;200        SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
00003c  02d1              LSLS     r1,r2,#11
                  |L2.62|
;;;201      }
;;;202      else
;;;203      {
;;;204        /* HMAC short Key */
;;;205        SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
;;;206      }
;;;207      HASH_Init(&SHA1_HASH_InitStructure);
00003e  a808              ADD      r0,sp,#0x20
000040  910b              STR      r1,[sp,#0x2c]
000042  f7fffffe          BL       HASH_Init
;;;208    
;;;209      /* Configure the number of valid bits in last word of the Key */
;;;210      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
000046  980c              LDR      r0,[sp,#0x30]
000048  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;211    
;;;212      /* Write the Key */
;;;213      for(i=0; i<Keylen; i+=4)
00004c  e004              B        |L2.88|
                  |L2.78|
;;;214      {
;;;215        HASH_DataIn(*(uint32_t*)keyaddr);
00004e  6828              LDR      r0,[r5,#0]
000050  f7fffffe          BL       HASH_DataIn
;;;216        keyaddr+=4;
000054  1d2d              ADDS     r5,r5,#4
000056  1d3f              ADDS     r7,r7,#4              ;213
                  |L2.88|
000058  454f              CMP      r7,r9                 ;213
00005a  d3f8              BCC      |L2.78|
;;;217      }
;;;218    
;;;219      /* Start the HASH processor */
;;;220      HASH_StartDigest();
00005c  f7fffffe          BL       HASH_StartDigest
000060  f44f3780          MOV      r7,#0x10000           ;200
                  |L2.100|
;;;221    
;;;222      /* wait until the Busy flag is RESET */
;;;223      do
;;;224      {
;;;225        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
000064  2008              MOVS     r0,#8
000066  f7fffffe          BL       HASH_GetFlagStatus
;;;226        counter++;
00006a  f1080801          ADD      r8,r8,#1
;;;227      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
00006e  45b8              CMP      r8,r7
000070  d002              BEQ      |L2.120|
000072  2800              CMP      r0,#0
000074  d1f6              BNE      |L2.100|
000076  e000              B        |L2.122|
                  |L2.120|
;;;228    
;;;229      if (busystatus != RESET)
000078  bb88              CBNZ     r0,|L2.222|
                  |L2.122|
;;;230      {
;;;231         status = ERROR;
;;;232      }
;;;233      else
;;;234      {
;;;235        /* Configure the number of valid bits in last word of the Input data */
;;;236        HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
00007a  980d              LDR      r0,[sp,#0x34]
00007c  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;237    
;;;238        /* Write the Input block in the IN FIFO */
;;;239        for(i=0; i<Ilen; i+=4)
000080  2500              MOVS     r5,#0
000082  e004              B        |L2.142|
                  |L2.132|
;;;240        {
;;;241          HASH_DataIn(*(uint32_t*)inputaddr);
000084  6830              LDR      r0,[r6,#0]
000086  f7fffffe          BL       HASH_DataIn
;;;242          inputaddr+=4;
00008a  1d36              ADDS     r6,r6,#4
00008c  1d2d              ADDS     r5,r5,#4              ;239
                  |L2.142|
00008e  42a5              CMP      r5,r4                 ;239
000090  d3f8              BCC      |L2.132|
;;;243        }
;;;244    
;;;245        /* Start the HASH processor */
;;;246        HASH_StartDigest();
000092  f7fffffe          BL       HASH_StartDigest
;;;247    
;;;248    
;;;249        /* wait until the Busy flag is RESET */
;;;250        counter =0;
000096  2500              MOVS     r5,#0
                  |L2.152|
;;;251        do
;;;252        {
;;;253          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
000098  2008              MOVS     r0,#8
00009a  f7fffffe          BL       HASH_GetFlagStatus
;;;254          counter++;
00009e  1c6d              ADDS     r5,r5,#1
;;;255        }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
0000a0  42bd              CMP      r5,r7
0000a2  d002              BEQ      |L2.170|
0000a4  2800              CMP      r0,#0
0000a6  d1f7              BNE      |L2.152|
0000a8  e000              B        |L2.172|
                  |L2.170|
;;;256    
;;;257        if (busystatus != RESET)
0000aa  b9c0              CBNZ     r0,|L2.222|
                  |L2.172|
;;;258        {
;;;259          status = ERROR;
;;;260        }
;;;261        else
;;;262        {  
;;;263          /* Configure the number of valid bits in last word of the Key */
;;;264          HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
0000ac  980c              LDR      r0,[sp,#0x30]
0000ae  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;265    
;;;266          /* Write the Key */
;;;267          keyaddr = (uint32_t)Key;
;;;268          for(i=0; i<Keylen; i+=4)
0000b2  2500              MOVS     r5,#0
0000b4  9c0f              LDR      r4,[sp,#0x3c]
0000b6  e004              B        |L2.194|
                  |L2.184|
;;;269          {
;;;270            HASH_DataIn(*(uint32_t*)keyaddr);
0000b8  6820              LDR      r0,[r4,#0]
0000ba  f7fffffe          BL       HASH_DataIn
;;;271            keyaddr+=4;
0000be  1d24              ADDS     r4,r4,#4
0000c0  1d2d              ADDS     r5,r5,#4              ;268
                  |L2.194|
0000c2  454d              CMP      r5,r9                 ;268
0000c4  d3f8              BCC      |L2.184|
;;;272          }
;;;273    
;;;274          /* Start the HASH processor */
;;;275          HASH_StartDigest();
0000c6  f7fffffe          BL       HASH_StartDigest
;;;276    
;;;277          /* wait until the Busy flag is RESET */
;;;278          counter =0;
0000ca  2400              MOVS     r4,#0
                  |L2.204|
;;;279          do
;;;280          {
;;;281            busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0000cc  2008              MOVS     r0,#8
0000ce  f7fffffe          BL       HASH_GetFlagStatus
;;;282            counter++;
0000d2  1c64              ADDS     r4,r4,#1
;;;283          }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
0000d4  42bc              CMP      r4,r7
0000d6  d003              BEQ      |L2.224|
0000d8  2800              CMP      r0,#0
0000da  d1f7              BNE      |L2.204|
0000dc  e004              B        |L2.232|
                  |L2.222|
0000de  e000              B        |L2.226|
                  |L2.224|
;;;284    
;;;285          if (busystatus != RESET)
0000e0  b110              CBZ      r0,|L2.232|
                  |L2.226|
;;;286          {
;;;287            status = ERROR;
0000e2  f04f0a00          MOV      r10,#0
0000e6  e016              B        |L2.278|
                  |L2.232|
;;;288          }
;;;289          else
;;;290          {
;;;291            /* Read the message digest */
;;;292            HASH_GetDigest(&SHA1_MessageDigest);
0000e8  4668              MOV      r0,sp
0000ea  f7fffffe          BL       HASH_GetDigest
;;;293            *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
0000ee  9800              LDR      r0,[sp,#0]
0000f0  ba00              REV      r0,r0
;;;294            outputaddr+=4;
;;;295            *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
0000f2  f8cb0000          STR      r0,[r11,#0]
0000f6  9801              LDR      r0,[sp,#4]
0000f8  ba00              REV      r0,r0
;;;296            outputaddr+=4;
;;;297            *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
0000fa  f8cb0004          STR      r0,[r11,#4]
0000fe  9802              LDR      r0,[sp,#8]
000100  ba00              REV      r0,r0
;;;298            outputaddr+=4;
;;;299            *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
000102  f8cb0008          STR      r0,[r11,#8]
000106  9803              LDR      r0,[sp,#0xc]
000108  ba00              REV      r0,r0
;;;300            outputaddr+=4;
;;;301            *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
00010a  f8cb000c          STR      r0,[r11,#0xc]
00010e  9804              LDR      r0,[sp,#0x10]
000110  ba00              REV      r0,r0
000112  f8cb0010          STR      r0,[r11,#0x10]
                  |L2.278|
;;;302          }
;;;303        }  
;;;304      }
;;;305      return status;  
;;;306    }
000116  b013              ADD      sp,sp,#0x4c
000118  4650              MOV      r0,r10                ;305
00011a  e8bd8ff0          POP      {r4-r11,pc}
;;;307    /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FWlib\\src\\stm32f4xx_hash_sha1.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_stm32f4xx_hash_sha1_c_328c56b9____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_stm32f4xx_hash_sha1_c_328c56b9____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_stm32f4xx_hash_sha1_c_328c56b9____REVSH|
#line 128
|__asm___21_stm32f4xx_hash_sha1_c_328c56b9____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
